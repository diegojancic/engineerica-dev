<?php
/**
 * ScheduleApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AccuCampus OpenAPI 3
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ScheduleApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ScheduleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation scheduleDelete
     *
     * Delete a schedule slot
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleDelete($unknown_base_type = null)
    {
        $this->scheduleDeleteWithHttpInfo($unknown_base_type);
    }

    /**
     * Operation scheduleDeleteWithHttpInfo
     *
     * Delete a schedule slot
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleDeleteWithHttpInfo($unknown_base_type = null)
    {
        $request = $this->scheduleDeleteRequest($unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleDeleteAsync
     *
     * Delete a schedule slot
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleDeleteAsync($unknown_base_type = null)
    {
        return $this->scheduleDeleteAsyncWithHttpInfo($unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleDeleteAsyncWithHttpInfo
     *
     * Delete a schedule slot
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleDeleteAsyncWithHttpInfo($unknown_base_type = null)
    {
        $returnType = '';
        $request = $this->scheduleDeleteRequest($unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleDelete'
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleDeleteRequest($unknown_base_type = null)
    {

        $resourcePath = '/schedule/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleDeletemine
     *
     * Delete a specific block from a user's own schedule
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleDeletemine($unknown_base_type = null)
    {
        $this->scheduleDeletemineWithHttpInfo($unknown_base_type);
    }

    /**
     * Operation scheduleDeletemineWithHttpInfo
     *
     * Delete a specific block from a user's own schedule
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleDeletemineWithHttpInfo($unknown_base_type = null)
    {
        $request = $this->scheduleDeletemineRequest($unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleDeletemineAsync
     *
     * Delete a specific block from a user's own schedule
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleDeletemineAsync($unknown_base_type = null)
    {
        return $this->scheduleDeletemineAsyncWithHttpInfo($unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleDeletemineAsyncWithHttpInfo
     *
     * Delete a specific block from a user's own schedule
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleDeletemineAsyncWithHttpInfo($unknown_base_type = null)
    {
        $returnType = '';
        $request = $this->scheduleDeletemineRequest($unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleDeletemine'
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleDeletemineRequest($unknown_base_type = null)
    {

        $resourcePath = '/schedule/deletemine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleEnable
     *
     * Enable or disable the schedule for a specific person
     *
     * @param  string $userid The id of the user to enable or disable the schedule. (required)
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleEnable($userid, $enable)
    {
        $this->scheduleEnableWithHttpInfo($userid, $enable);
    }

    /**
     * Operation scheduleEnableWithHttpInfo
     *
     * Enable or disable the schedule for a specific person
     *
     * @param  string $userid The id of the user to enable or disable the schedule. (required)
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleEnableWithHttpInfo($userid, $enable)
    {
        $request = $this->scheduleEnableRequest($userid, $enable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleEnableAsync
     *
     * Enable or disable the schedule for a specific person
     *
     * @param  string $userid The id of the user to enable or disable the schedule. (required)
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleEnableAsync($userid, $enable)
    {
        return $this->scheduleEnableAsyncWithHttpInfo($userid, $enable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleEnableAsyncWithHttpInfo
     *
     * Enable or disable the schedule for a specific person
     *
     * @param  string $userid The id of the user to enable or disable the schedule. (required)
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleEnableAsyncWithHttpInfo($userid, $enable)
    {
        $returnType = '';
        $request = $this->scheduleEnableRequest($userid, $enable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleEnable'
     *
     * @param  string $userid The id of the user to enable or disable the schedule. (required)
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleEnableRequest($userid, $enable)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling scheduleEnable'
            );
        }
        // verify the required parameter 'enable' is set
        if ($enable === null || (is_array($enable) && count($enable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enable when calling scheduleEnable'
            );
        }

        $resourcePath = '/schedule/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($enable !== null) {
            if('form' === 'form' && is_array($enable)) {
                foreach($enable as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enable'] = $enable;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleEnablemine
     *
     * Enable or disable current user's schedule
     *
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleEnablemine($enable)
    {
        $this->scheduleEnablemineWithHttpInfo($enable);
    }

    /**
     * Operation scheduleEnablemineWithHttpInfo
     *
     * Enable or disable current user's schedule
     *
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleEnablemineWithHttpInfo($enable)
    {
        $request = $this->scheduleEnablemineRequest($enable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleEnablemineAsync
     *
     * Enable or disable current user's schedule
     *
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleEnablemineAsync($enable)
    {
        return $this->scheduleEnablemineAsyncWithHttpInfo($enable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleEnablemineAsyncWithHttpInfo
     *
     * Enable or disable current user's schedule
     *
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleEnablemineAsyncWithHttpInfo($enable)
    {
        $returnType = '';
        $request = $this->scheduleEnablemineRequest($enable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleEnablemine'
     *
     * @param  bool $enable True to enable schedules, false to disable. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleEnablemineRequest($enable)
    {
        // verify the required parameter 'enable' is set
        if ($enable === null || (is_array($enable) && count($enable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enable when calling scheduleEnablemine'
            );
        }

        $resourcePath = '/schedule/enablemine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($enable !== null) {
            if('form' === 'form' && is_array($enable)) {
                foreach($enable as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enable'] = $enable;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleFindallstaffslots
     *
     * Search available schedule slots by service, event, date
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $staffid The id of the staff to filter by. (optional)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the location to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleFindallstaffslots($starttime, $endtime, $staffid = null, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null)
    {
        $this->scheduleFindallstaffslotsWithHttpInfo($starttime, $endtime, $staffid, $serviceids, $eventid, $locationid, $staffroleids, $availablefor);
    }

    /**
     * Operation scheduleFindallstaffslotsWithHttpInfo
     *
     * Search available schedule slots by service, event, date
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $staffid The id of the staff to filter by. (optional)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the location to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleFindallstaffslotsWithHttpInfo($starttime, $endtime, $staffid = null, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null)
    {
        $request = $this->scheduleFindallstaffslotsRequest($starttime, $endtime, $staffid, $serviceids, $eventid, $locationid, $staffroleids, $availablefor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleFindallstaffslotsAsync
     *
     * Search available schedule slots by service, event, date
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $staffid The id of the staff to filter by. (optional)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the location to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleFindallstaffslotsAsync($starttime, $endtime, $staffid = null, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null)
    {
        return $this->scheduleFindallstaffslotsAsyncWithHttpInfo($starttime, $endtime, $staffid, $serviceids, $eventid, $locationid, $staffroleids, $availablefor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleFindallstaffslotsAsyncWithHttpInfo
     *
     * Search available schedule slots by service, event, date
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $staffid The id of the staff to filter by. (optional)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the location to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleFindallstaffslotsAsyncWithHttpInfo($starttime, $endtime, $staffid = null, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null)
    {
        $returnType = '';
        $request = $this->scheduleFindallstaffslotsRequest($starttime, $endtime, $staffid, $serviceids, $eventid, $locationid, $staffroleids, $availablefor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleFindallstaffslots'
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $staffid The id of the staff to filter by. (optional)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the location to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleFindallstaffslotsRequest($starttime, $endtime, $staffid = null, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null)
    {
        // verify the required parameter 'starttime' is set
        if ($starttime === null || (is_array($starttime) && count($starttime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttime when calling scheduleFindallstaffslots'
            );
        }
        // verify the required parameter 'endtime' is set
        if ($endtime === null || (is_array($endtime) && count($endtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtime when calling scheduleFindallstaffslots'
            );
        }

        $resourcePath = '/schedule/findallstaffslots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($starttime !== null) {
            if('form' === 'form' && is_array($starttime)) {
                foreach($starttime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['starttime'] = $starttime;
            }
        }
        // query params
        if ($endtime !== null) {
            if('form' === 'form' && is_array($endtime)) {
                foreach($endtime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endtime'] = $endtime;
            }
        }
        // query params
        if ($staffid !== null) {
            if('form' === 'form' && is_array($staffid)) {
                foreach($staffid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staffid'] = $staffid;
            }
        }
        // query params
        if ($serviceids !== null) {
            if('form' === 'form' && is_array($serviceids)) {
                foreach($serviceids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceids'] = $serviceids;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($locationid !== null) {
            if('form' === 'form' && is_array($locationid)) {
                foreach($locationid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationid'] = $locationid;
            }
        }
        // query params
        if ($staffroleids !== null) {
            if('form' === 'form' && is_array($staffroleids)) {
                foreach($staffroleids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staffroleids'] = $staffroleids;
            }
        }
        // query params
        if ($availablefor !== null) {
            if('form' === 'form' && is_array($availablefor)) {
                foreach($availablefor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['availablefor'] = $availablefor;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleFindslots
     *
     * Search available schedule slots by service, event, date and/or staff
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleFindslots($staffid, $starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $availablefor = null)
    {
        $this->scheduleFindslotsWithHttpInfo($staffid, $starttime, $endtime, $serviceids, $eventid, $locationid, $availablefor);
    }

    /**
     * Operation scheduleFindslotsWithHttpInfo
     *
     * Search available schedule slots by service, event, date and/or staff
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleFindslotsWithHttpInfo($staffid, $starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $availablefor = null)
    {
        $request = $this->scheduleFindslotsRequest($staffid, $starttime, $endtime, $serviceids, $eventid, $locationid, $availablefor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleFindslotsAsync
     *
     * Search available schedule slots by service, event, date and/or staff
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleFindslotsAsync($staffid, $starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $availablefor = null)
    {
        return $this->scheduleFindslotsAsyncWithHttpInfo($staffid, $starttime, $endtime, $serviceids, $eventid, $locationid, $availablefor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleFindslotsAsyncWithHttpInfo
     *
     * Search available schedule slots by service, event, date and/or staff
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleFindslotsAsyncWithHttpInfo($staffid, $starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $availablefor = null)
    {
        $returnType = '';
        $request = $this->scheduleFindslotsRequest($staffid, $starttime, $endtime, $serviceids, $eventid, $locationid, $availablefor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleFindslots'
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $availablefor The specific availability type to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleFindslotsRequest($staffid, $starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $availablefor = null)
    {
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling scheduleFindslots'
            );
        }
        // verify the required parameter 'starttime' is set
        if ($starttime === null || (is_array($starttime) && count($starttime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttime when calling scheduleFindslots'
            );
        }
        // verify the required parameter 'endtime' is set
        if ($endtime === null || (is_array($endtime) && count($endtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtime when calling scheduleFindslots'
            );
        }

        $resourcePath = '/schedule/findslots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($staffid !== null) {
            if('form' === 'form' && is_array($staffid)) {
                foreach($staffid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staffid'] = $staffid;
            }
        }
        // query params
        if ($starttime !== null) {
            if('form' === 'form' && is_array($starttime)) {
                foreach($starttime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['starttime'] = $starttime;
            }
        }
        // query params
        if ($endtime !== null) {
            if('form' === 'form' && is_array($endtime)) {
                foreach($endtime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endtime'] = $endtime;
            }
        }
        // query params
        if ($serviceids !== null) {
            if('form' === 'form' && is_array($serviceids)) {
                foreach($serviceids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceids'] = $serviceids;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($locationid !== null) {
            if('form' === 'form' && is_array($locationid)) {
                foreach($locationid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationid'] = $locationid;
            }
        }
        // query params
        if ($availablefor !== null) {
            if('form' === 'form' && is_array($availablefor)) {
                foreach($availablefor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['availablefor'] = $availablefor;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleFindstaffavail
     *
     * Search available staff members slots by service, event, and/or date
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor Filter slots by a specific availability type. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleFindstaffavail($starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null, $photosize = null)
    {
        $this->scheduleFindstaffavailWithHttpInfo($starttime, $endtime, $serviceids, $eventid, $locationid, $staffroleids, $availablefor, $photosize);
    }

    /**
     * Operation scheduleFindstaffavailWithHttpInfo
     *
     * Search available staff members slots by service, event, and/or date
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor Filter slots by a specific availability type. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleFindstaffavailWithHttpInfo($starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null, $photosize = null)
    {
        $request = $this->scheduleFindstaffavailRequest($starttime, $endtime, $serviceids, $eventid, $locationid, $staffroleids, $availablefor, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleFindstaffavailAsync
     *
     * Search available staff members slots by service, event, and/or date
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor Filter slots by a specific availability type. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleFindstaffavailAsync($starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null, $photosize = null)
    {
        return $this->scheduleFindstaffavailAsyncWithHttpInfo($starttime, $endtime, $serviceids, $eventid, $locationid, $staffroleids, $availablefor, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleFindstaffavailAsyncWithHttpInfo
     *
     * Search available staff members slots by service, event, and/or date
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor Filter slots by a specific availability type. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleFindstaffavailAsyncWithHttpInfo($starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null, $photosize = null)
    {
        $returnType = '';
        $request = $this->scheduleFindstaffavailRequest($starttime, $endtime, $serviceids, $eventid, $locationid, $staffroleids, $availablefor, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleFindstaffavail'
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service ids to filter by. (optional)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  string $staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param  string $availablefor Filter slots by a specific availability type. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleFindstaffavailRequest($starttime, $endtime, $serviceids = null, $eventid = null, $locationid = null, $staffroleids = null, $availablefor = null, $photosize = null)
    {
        // verify the required parameter 'starttime' is set
        if ($starttime === null || (is_array($starttime) && count($starttime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttime when calling scheduleFindstaffavail'
            );
        }
        // verify the required parameter 'endtime' is set
        if ($endtime === null || (is_array($endtime) && count($endtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtime when calling scheduleFindstaffavail'
            );
        }

        $resourcePath = '/schedule/findstaffavail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serviceids !== null) {
            if('form' === 'form' && is_array($serviceids)) {
                foreach($serviceids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceids'] = $serviceids;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($starttime !== null) {
            if('form' === 'form' && is_array($starttime)) {
                foreach($starttime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['starttime'] = $starttime;
            }
        }
        // query params
        if ($endtime !== null) {
            if('form' === 'form' && is_array($endtime)) {
                foreach($endtime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endtime'] = $endtime;
            }
        }
        // query params
        if ($locationid !== null) {
            if('form' === 'form' && is_array($locationid)) {
                foreach($locationid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationid'] = $locationid;
            }
        }
        // query params
        if ($staffroleids !== null) {
            if('form' === 'form' && is_array($staffroleids)) {
                foreach($staffroleids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staffroleids'] = $staffroleids;
            }
        }
        // query params
        if ($availablefor !== null) {
            if('form' === 'form' && is_array($availablefor)) {
                foreach($availablefor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['availablefor'] = $availablefor;
            }
        }
        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleGet
     *
     * Search and view details of a specific schedule slot
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleGet($scheduleid)
    {
        $this->scheduleGetWithHttpInfo($scheduleid);
    }

    /**
     * Operation scheduleGetWithHttpInfo
     *
     * Search and view details of a specific schedule slot
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleGetWithHttpInfo($scheduleid)
    {
        $request = $this->scheduleGetRequest($scheduleid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleGetAsync
     *
     * Search and view details of a specific schedule slot
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetAsync($scheduleid)
    {
        return $this->scheduleGetAsyncWithHttpInfo($scheduleid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleGetAsyncWithHttpInfo
     *
     * Search and view details of a specific schedule slot
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetAsyncWithHttpInfo($scheduleid)
    {
        $returnType = '';
        $request = $this->scheduleGetRequest($scheduleid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleGet'
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleGetRequest($scheduleid)
    {
        // verify the required parameter 'scheduleid' is set
        if ($scheduleid === null || (is_array($scheduleid) && count($scheduleid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scheduleid when calling scheduleGet'
            );
        }

        $resourcePath = '/schedule/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scheduleid !== null) {
            if('form' === 'form' && is_array($scheduleid)) {
                foreach($scheduleid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['scheduleid'] = $scheduleid;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleGetmine
     *
     * View details of a specific schedule block, for current user
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleGetmine($scheduleid)
    {
        $this->scheduleGetmineWithHttpInfo($scheduleid);
    }

    /**
     * Operation scheduleGetmineWithHttpInfo
     *
     * View details of a specific schedule block, for current user
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleGetmineWithHttpInfo($scheduleid)
    {
        $request = $this->scheduleGetmineRequest($scheduleid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleGetmineAsync
     *
     * View details of a specific schedule block, for current user
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetmineAsync($scheduleid)
    {
        return $this->scheduleGetmineAsyncWithHttpInfo($scheduleid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleGetmineAsyncWithHttpInfo
     *
     * View details of a specific schedule block, for current user
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetmineAsyncWithHttpInfo($scheduleid)
    {
        $returnType = '';
        $request = $this->scheduleGetmineRequest($scheduleid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleGetmine'
     *
     * @param  string $scheduleid The id of the schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleGetmineRequest($scheduleid)
    {
        // verify the required parameter 'scheduleid' is set
        if ($scheduleid === null || (is_array($scheduleid) && count($scheduleid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scheduleid when calling scheduleGetmine'
            );
        }

        $resourcePath = '/schedule/getmine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scheduleid !== null) {
            if('form' === 'form' && is_array($scheduleid)) {
                foreach($scheduleid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['scheduleid'] = $scheduleid;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleGetstaff
     *
     * View a list of schedule information of a specified person
     *
     * @param  string $userid The id of the user to get info. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleGetstaff($userid)
    {
        $this->scheduleGetstaffWithHttpInfo($userid);
    }

    /**
     * Operation scheduleGetstaffWithHttpInfo
     *
     * View a list of schedule information of a specified person
     *
     * @param  string $userid The id of the user to get info. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleGetstaffWithHttpInfo($userid)
    {
        $request = $this->scheduleGetstaffRequest($userid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleGetstaffAsync
     *
     * View a list of schedule information of a specified person
     *
     * @param  string $userid The id of the user to get info. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetstaffAsync($userid)
    {
        return $this->scheduleGetstaffAsyncWithHttpInfo($userid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleGetstaffAsyncWithHttpInfo
     *
     * View a list of schedule information of a specified person
     *
     * @param  string $userid The id of the user to get info. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetstaffAsyncWithHttpInfo($userid)
    {
        $returnType = '';
        $request = $this->scheduleGetstaffRequest($userid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleGetstaff'
     *
     * @param  string $userid The id of the user to get info. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleGetstaffRequest($userid)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling scheduleGetstaff'
            );
        }

        $resourcePath = '/schedule/getstaff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleGetstaffmine
     *
     * View current user's schedule information
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleGetstaffmine()
    {
        $this->scheduleGetstaffmineWithHttpInfo();
    }

    /**
     * Operation scheduleGetstaffmineWithHttpInfo
     *
     * View current user's schedule information
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleGetstaffmineWithHttpInfo()
    {
        $request = $this->scheduleGetstaffmineRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleGetstaffmineAsync
     *
     * View current user's schedule information
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetstaffmineAsync()
    {
        return $this->scheduleGetstaffmineAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleGetstaffmineAsyncWithHttpInfo
     *
     * View current user's schedule information
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetstaffmineAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->scheduleGetstaffmineRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleGetstaffmine'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleGetstaffmineRequest()
    {

        $resourcePath = '/schedule/getstaffmine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleMyofftimes
     *
     * View current user's schedule exceptions
     *
     * @param  bool $includedeleted If true the deleted offtimes are also returned. (optional)
     * @param  bool $onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleMyofftimes($includedeleted = null, $onlyupcoming = null, $modifiedafter = null)
    {
        $this->scheduleMyofftimesWithHttpInfo($includedeleted, $onlyupcoming, $modifiedafter);
    }

    /**
     * Operation scheduleMyofftimesWithHttpInfo
     *
     * View current user's schedule exceptions
     *
     * @param  bool $includedeleted If true the deleted offtimes are also returned. (optional)
     * @param  bool $onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleMyofftimesWithHttpInfo($includedeleted = null, $onlyupcoming = null, $modifiedafter = null)
    {
        $request = $this->scheduleMyofftimesRequest($includedeleted, $onlyupcoming, $modifiedafter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleMyofftimesAsync
     *
     * View current user's schedule exceptions
     *
     * @param  bool $includedeleted If true the deleted offtimes are also returned. (optional)
     * @param  bool $onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleMyofftimesAsync($includedeleted = null, $onlyupcoming = null, $modifiedafter = null)
    {
        return $this->scheduleMyofftimesAsyncWithHttpInfo($includedeleted, $onlyupcoming, $modifiedafter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleMyofftimesAsyncWithHttpInfo
     *
     * View current user's schedule exceptions
     *
     * @param  bool $includedeleted If true the deleted offtimes are also returned. (optional)
     * @param  bool $onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleMyofftimesAsyncWithHttpInfo($includedeleted = null, $onlyupcoming = null, $modifiedafter = null)
    {
        $returnType = '';
        $request = $this->scheduleMyofftimesRequest($includedeleted, $onlyupcoming, $modifiedafter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleMyofftimes'
     *
     * @param  bool $includedeleted If true the deleted offtimes are also returned. (optional)
     * @param  bool $onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleMyofftimesRequest($includedeleted = null, $onlyupcoming = null, $modifiedafter = null)
    {

        $resourcePath = '/schedule/myofftimes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includedeleted !== null) {
            if('form' === 'form' && is_array($includedeleted)) {
                foreach($includedeleted as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includedeleted'] = $includedeleted;
            }
        }
        // query params
        if ($onlyupcoming !== null) {
            if('form' === 'form' && is_array($onlyupcoming)) {
                foreach($onlyupcoming as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['onlyupcoming'] = $onlyupcoming;
            }
        }
        // query params
        if ($modifiedafter !== null) {
            if('form' === 'form' && is_array($modifiedafter)) {
                foreach($modifiedafter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedafter'] = $modifiedafter;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleSave
     *
     * Create or edit a schedule slot
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleSave($unknown_base_type = null)
    {
        $this->scheduleSaveWithHttpInfo($unknown_base_type);
    }

    /**
     * Operation scheduleSaveWithHttpInfo
     *
     * Create or edit a schedule slot
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleSaveWithHttpInfo($unknown_base_type = null)
    {
        $request = $this->scheduleSaveRequest($unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleSaveAsync
     *
     * Create or edit a schedule slot
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleSaveAsync($unknown_base_type = null)
    {
        return $this->scheduleSaveAsyncWithHttpInfo($unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleSaveAsyncWithHttpInfo
     *
     * Create or edit a schedule slot
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleSaveAsyncWithHttpInfo($unknown_base_type = null)
    {
        $returnType = '';
        $request = $this->scheduleSaveRequest($unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleSave'
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleSaveRequest($unknown_base_type = null)
    {

        $resourcePath = '/schedule/save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleSavemine
     *
     * Create or edit a block in current user's schedule
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleSavemine($unknown_base_type = null)
    {
        $this->scheduleSavemineWithHttpInfo($unknown_base_type);
    }

    /**
     * Operation scheduleSavemineWithHttpInfo
     *
     * Create or edit a block in current user's schedule
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleSavemineWithHttpInfo($unknown_base_type = null)
    {
        $request = $this->scheduleSavemineRequest($unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleSavemineAsync
     *
     * Create or edit a block in current user's schedule
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleSavemineAsync($unknown_base_type = null)
    {
        return $this->scheduleSavemineAsyncWithHttpInfo($unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleSavemineAsyncWithHttpInfo
     *
     * Create or edit a block in current user's schedule
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleSavemineAsyncWithHttpInfo($unknown_base_type = null)
    {
        $returnType = '';
        $request = $this->scheduleSavemineRequest($unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleSavemine'
     *
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleSavemineRequest($unknown_base_type = null)
    {

        $resourcePath = '/schedule/savemine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
