<?php
/**
 * AdvancedstationApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AccuCampus OpenAPI 3
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AdvancedstationApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdvancedstationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation advancedstationCheckunknownuser
     *
     * Check whether the user is known by the system.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationCheckunknownuser($station, $user, $location)
    {
        $this->advancedstationCheckunknownuserWithHttpInfo($station, $user, $location);
    }

    /**
     * Operation advancedstationCheckunknownuserWithHttpInfo
     *
     * Check whether the user is known by the system.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationCheckunknownuserWithHttpInfo($station, $user, $location)
    {
        $request = $this->advancedstationCheckunknownuserRequest($station, $user, $location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationCheckunknownuserAsync
     *
     * Check whether the user is known by the system.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationCheckunknownuserAsync($station, $user, $location)
    {
        return $this->advancedstationCheckunknownuserAsyncWithHttpInfo($station, $user, $location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationCheckunknownuserAsyncWithHttpInfo
     *
     * Check whether the user is known by the system.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationCheckunknownuserAsyncWithHttpInfo($station, $user, $location)
    {
        $returnType = '';
        $request = $this->advancedstationCheckunknownuserRequest($station, $user, $location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationCheckunknownuser'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationCheckunknownuserRequest($station, $user, $location)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationCheckunknownuser'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationCheckunknownuser'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling advancedstationCheckunknownuser'
            );
        }

        $resourcePath = '/advancedstation/checkunknownuser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationCheckuserrole
     *
     * Check whether the user is a staff member, an attendee or both.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationCheckuserrole($station, $user, $location)
    {
        $this->advancedstationCheckuserroleWithHttpInfo($station, $user, $location);
    }

    /**
     * Operation advancedstationCheckuserroleWithHttpInfo
     *
     * Check whether the user is a staff member, an attendee or both.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationCheckuserroleWithHttpInfo($station, $user, $location)
    {
        $request = $this->advancedstationCheckuserroleRequest($station, $user, $location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationCheckuserroleAsync
     *
     * Check whether the user is a staff member, an attendee or both.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationCheckuserroleAsync($station, $user, $location)
    {
        return $this->advancedstationCheckuserroleAsyncWithHttpInfo($station, $user, $location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationCheckuserroleAsyncWithHttpInfo
     *
     * Check whether the user is a staff member, an attendee or both.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationCheckuserroleAsyncWithHttpInfo($station, $user, $location)
    {
        $returnType = '';
        $request = $this->advancedstationCheckuserroleRequest($station, $user, $location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationCheckuserrole'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationCheckuserroleRequest($station, $user, $location)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationCheckuserrole'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationCheckuserrole'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling advancedstationCheckuserrole'
            );
        }

        $resourcePath = '/advancedstation/checkuserrole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationCreateuser
     *
     * Creates a user via a sign-in station.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user to create. (required)
     * @param  string $location The id of the location the user picked. (required)
     * @param  string $firstname The first name of the user to create. (required)
     * @param  string $lastname The last name of the user to create. (required)
     * @param  string $email The email of the user to create. (required)
     * @param  string $middlename The middle name of the user to create. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationCreateuser($station, $user, $location, $firstname, $lastname, $email, $middlename = null)
    {
        $this->advancedstationCreateuserWithHttpInfo($station, $user, $location, $firstname, $lastname, $email, $middlename);
    }

    /**
     * Operation advancedstationCreateuserWithHttpInfo
     *
     * Creates a user via a sign-in station.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user to create. (required)
     * @param  string $location The id of the location the user picked. (required)
     * @param  string $firstname The first name of the user to create. (required)
     * @param  string $lastname The last name of the user to create. (required)
     * @param  string $email The email of the user to create. (required)
     * @param  string $middlename The middle name of the user to create. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationCreateuserWithHttpInfo($station, $user, $location, $firstname, $lastname, $email, $middlename = null)
    {
        $request = $this->advancedstationCreateuserRequest($station, $user, $location, $firstname, $lastname, $email, $middlename);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationCreateuserAsync
     *
     * Creates a user via a sign-in station.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user to create. (required)
     * @param  string $location The id of the location the user picked. (required)
     * @param  string $firstname The first name of the user to create. (required)
     * @param  string $lastname The last name of the user to create. (required)
     * @param  string $email The email of the user to create. (required)
     * @param  string $middlename The middle name of the user to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationCreateuserAsync($station, $user, $location, $firstname, $lastname, $email, $middlename = null)
    {
        return $this->advancedstationCreateuserAsyncWithHttpInfo($station, $user, $location, $firstname, $lastname, $email, $middlename)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationCreateuserAsyncWithHttpInfo
     *
     * Creates a user via a sign-in station.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user to create. (required)
     * @param  string $location The id of the location the user picked. (required)
     * @param  string $firstname The first name of the user to create. (required)
     * @param  string $lastname The last name of the user to create. (required)
     * @param  string $email The email of the user to create. (required)
     * @param  string $middlename The middle name of the user to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationCreateuserAsyncWithHttpInfo($station, $user, $location, $firstname, $lastname, $email, $middlename = null)
    {
        $returnType = '';
        $request = $this->advancedstationCreateuserRequest($station, $user, $location, $firstname, $lastname, $email, $middlename);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationCreateuser'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user to create. (required)
     * @param  string $location The id of the location the user picked. (required)
     * @param  string $firstname The first name of the user to create. (required)
     * @param  string $lastname The last name of the user to create. (required)
     * @param  string $email The email of the user to create. (required)
     * @param  string $middlename The middle name of the user to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationCreateuserRequest($station, $user, $location, $firstname, $lastname, $email, $middlename = null)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationCreateuser'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationCreateuser'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling advancedstationCreateuser'
            );
        }
        // verify the required parameter 'firstname' is set
        if ($firstname === null || (is_array($firstname) && count($firstname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firstname when calling advancedstationCreateuser'
            );
        }
        // verify the required parameter 'lastname' is set
        if ($lastname === null || (is_array($lastname) && count($lastname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lastname when calling advancedstationCreateuser'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling advancedstationCreateuser'
            );
        }

        $resourcePath = '/advancedstation/createuser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }
        // query params
        if ($firstname !== null) {
            if('form' === 'form' && is_array($firstname)) {
                foreach($firstname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstname'] = $firstname;
            }
        }
        // query params
        if ($middlename !== null) {
            if('form' === 'form' && is_array($middlename)) {
                foreach($middlename as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['middlename'] = $middlename;
            }
        }
        // query params
        if ($lastname !== null) {
            if('form' === 'form' && is_array($lastname)) {
                foreach($lastname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lastname'] = $lastname;
            }
        }
        // query params
        if ($email !== null) {
            if('form' === 'form' && is_array($email)) {
                foreach($email as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['email'] = $email;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationGetevents
     *
     * Gets the courses available for a specific location and a specific student.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationGetevents($station, $location, $user)
    {
        $this->advancedstationGeteventsWithHttpInfo($station, $location, $user);
    }

    /**
     * Operation advancedstationGeteventsWithHttpInfo
     *
     * Gets the courses available for a specific location and a specific student.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationGeteventsWithHttpInfo($station, $location, $user)
    {
        $request = $this->advancedstationGeteventsRequest($station, $location, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationGeteventsAsync
     *
     * Gets the courses available for a specific location and a specific student.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGeteventsAsync($station, $location, $user)
    {
        return $this->advancedstationGeteventsAsyncWithHttpInfo($station, $location, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationGeteventsAsyncWithHttpInfo
     *
     * Gets the courses available for a specific location and a specific student.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGeteventsAsyncWithHttpInfo($station, $location, $user)
    {
        $returnType = '';
        $request = $this->advancedstationGeteventsRequest($station, $location, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationGetevents'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationGeteventsRequest($station, $location, $user)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationGetevents'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling advancedstationGetevents'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationGetevents'
            );
        }

        $resourcePath = '/advancedstation/getevents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationGetinfo
     *
     * Gets the info to display in the sign-in station by it's ID.
     *
     * @param  string $id The id of the sign-in station to get. (required)
     * @param  string $event The id of the event (or session), to override the scheduled one. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationGetinfo($id, $event = null)
    {
        $this->advancedstationGetinfoWithHttpInfo($id, $event);
    }

    /**
     * Operation advancedstationGetinfoWithHttpInfo
     *
     * Gets the info to display in the sign-in station by it's ID.
     *
     * @param  string $id The id of the sign-in station to get. (required)
     * @param  string $event The id of the event (or session), to override the scheduled one. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationGetinfoWithHttpInfo($id, $event = null)
    {
        $request = $this->advancedstationGetinfoRequest($id, $event);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationGetinfoAsync
     *
     * Gets the info to display in the sign-in station by it's ID.
     *
     * @param  string $id The id of the sign-in station to get. (required)
     * @param  string $event The id of the event (or session), to override the scheduled one. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetinfoAsync($id, $event = null)
    {
        return $this->advancedstationGetinfoAsyncWithHttpInfo($id, $event)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationGetinfoAsyncWithHttpInfo
     *
     * Gets the info to display in the sign-in station by it's ID.
     *
     * @param  string $id The id of the sign-in station to get. (required)
     * @param  string $event The id of the event (or session), to override the scheduled one. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetinfoAsyncWithHttpInfo($id, $event = null)
    {
        $returnType = '';
        $request = $this->advancedstationGetinfoRequest($id, $event);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationGetinfo'
     *
     * @param  string $id The id of the sign-in station to get. (required)
     * @param  string $event The id of the event (or session), to override the scheduled one. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationGetinfoRequest($id, $event = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling advancedstationGetinfo'
            );
        }

        $resourcePath = '/advancedstation/getinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($event !== null) {
            if('form' === 'form' && is_array($event)) {
                foreach($event as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['event'] = $event;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationGetlocations
     *
     * Gets the locations available in a sign-in station.
     *
     * @param  string $station The id of the sign-in station whose locations have to be returned. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationGetlocations($station, $user)
    {
        $this->advancedstationGetlocationsWithHttpInfo($station, $user);
    }

    /**
     * Operation advancedstationGetlocationsWithHttpInfo
     *
     * Gets the locations available in a sign-in station.
     *
     * @param  string $station The id of the sign-in station whose locations have to be returned. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationGetlocationsWithHttpInfo($station, $user)
    {
        $request = $this->advancedstationGetlocationsRequest($station, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationGetlocationsAsync
     *
     * Gets the locations available in a sign-in station.
     *
     * @param  string $station The id of the sign-in station whose locations have to be returned. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetlocationsAsync($station, $user)
    {
        return $this->advancedstationGetlocationsAsyncWithHttpInfo($station, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationGetlocationsAsyncWithHttpInfo
     *
     * Gets the locations available in a sign-in station.
     *
     * @param  string $station The id of the sign-in station whose locations have to be returned. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetlocationsAsyncWithHttpInfo($station, $user)
    {
        $returnType = '';
        $request = $this->advancedstationGetlocationsRequest($station, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationGetlocations'
     *
     * @param  string $station The id of the sign-in station whose locations have to be returned. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationGetlocationsRequest($station, $user)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationGetlocations'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationGetlocations'
            );
        }

        $resourcePath = '/advancedstation/getlocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationGetlogstaff
     *
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $attendancelog The id of the attendance log to filter the staff members. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationGetlogstaff($station, $attendancelog, $photosize = null)
    {
        $this->advancedstationGetlogstaffWithHttpInfo($station, $attendancelog, $photosize);
    }

    /**
     * Operation advancedstationGetlogstaffWithHttpInfo
     *
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $attendancelog The id of the attendance log to filter the staff members. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationGetlogstaffWithHttpInfo($station, $attendancelog, $photosize = null)
    {
        $request = $this->advancedstationGetlogstaffRequest($station, $attendancelog, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationGetlogstaffAsync
     *
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $attendancelog The id of the attendance log to filter the staff members. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetlogstaffAsync($station, $attendancelog, $photosize = null)
    {
        return $this->advancedstationGetlogstaffAsyncWithHttpInfo($station, $attendancelog, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationGetlogstaffAsyncWithHttpInfo
     *
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $attendancelog The id of the attendance log to filter the staff members. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetlogstaffAsyncWithHttpInfo($station, $attendancelog, $photosize = null)
    {
        $returnType = '';
        $request = $this->advancedstationGetlogstaffRequest($station, $attendancelog, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationGetlogstaff'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $attendancelog The id of the attendance log to filter the staff members. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationGetlogstaffRequest($station, $attendancelog, $photosize = null)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationGetlogstaff'
            );
        }
        // verify the required parameter 'attendancelog' is set
        if ($attendancelog === null || (is_array($attendancelog) && count($attendancelog) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attendancelog when calling advancedstationGetlogstaff'
            );
        }

        $resourcePath = '/advancedstation/getlogstaff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($attendancelog !== null) {
            if('form' === 'form' && is_array($attendancelog)) {
                foreach($attendancelog as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['attendancelog'] = $attendancelog;
            }
        }
        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationGetroles
     *
     * Gets the user roles of the user trying to sign-in.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $signinrole Specifies how the user is signing-in. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationGetroles($station, $signinrole, $user, $location)
    {
        $this->advancedstationGetrolesWithHttpInfo($station, $signinrole, $user, $location);
    }

    /**
     * Operation advancedstationGetrolesWithHttpInfo
     *
     * Gets the user roles of the user trying to sign-in.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $signinrole Specifies how the user is signing-in. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationGetrolesWithHttpInfo($station, $signinrole, $user, $location)
    {
        $request = $this->advancedstationGetrolesRequest($station, $signinrole, $user, $location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationGetrolesAsync
     *
     * Gets the user roles of the user trying to sign-in.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $signinrole Specifies how the user is signing-in. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetrolesAsync($station, $signinrole, $user, $location)
    {
        return $this->advancedstationGetrolesAsyncWithHttpInfo($station, $signinrole, $user, $location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationGetrolesAsyncWithHttpInfo
     *
     * Gets the user roles of the user trying to sign-in.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $signinrole Specifies how the user is signing-in. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetrolesAsyncWithHttpInfo($station, $signinrole, $user, $location)
    {
        $returnType = '';
        $request = $this->advancedstationGetrolesRequest($station, $signinrole, $user, $location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationGetroles'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $signinrole Specifies how the user is signing-in. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationGetrolesRequest($station, $signinrole, $user, $location)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationGetroles'
            );
        }
        // verify the required parameter 'signinrole' is set
        if ($signinrole === null || (is_array($signinrole) && count($signinrole) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signinrole when calling advancedstationGetroles'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationGetroles'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling advancedstationGetroles'
            );
        }

        $resourcePath = '/advancedstation/getroles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($signinrole !== null) {
            if('form' === 'form' && is_array($signinrole)) {
                foreach($signinrole as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['signinrole'] = $signinrole;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationGetservices
     *
     * Gets the services available for a specific location.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationGetservices($station, $location, $user)
    {
        $this->advancedstationGetservicesWithHttpInfo($station, $location, $user);
    }

    /**
     * Operation advancedstationGetservicesWithHttpInfo
     *
     * Gets the services available for a specific location.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationGetservicesWithHttpInfo($station, $location, $user)
    {
        $request = $this->advancedstationGetservicesRequest($station, $location, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationGetservicesAsync
     *
     * Gets the services available for a specific location.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetservicesAsync($station, $location, $user)
    {
        return $this->advancedstationGetservicesAsyncWithHttpInfo($station, $location, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationGetservicesAsyncWithHttpInfo
     *
     * Gets the services available for a specific location.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetservicesAsyncWithHttpInfo($station, $location, $user)
    {
        $returnType = '';
        $request = $this->advancedstationGetservicesRequest($station, $location, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationGetservices'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $location The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationGetservicesRequest($station, $location, $user)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationGetservices'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling advancedstationGetservices'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationGetservices'
            );
        }

        $resourcePath = '/advancedstation/getservices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationGetstaff
     *
     * Gets the staff/tutors available for a specific location, course and service.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $locationid The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $services The list of services selected by the user, in JSON format. (optional)
     * @param  string $eventid The ID of the event selected. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationGetstaff($station, $locationid, $user, $services = null, $eventid = null, $photosize = null)
    {
        $this->advancedstationGetstaffWithHttpInfo($station, $locationid, $user, $services, $eventid, $photosize);
    }

    /**
     * Operation advancedstationGetstaffWithHttpInfo
     *
     * Gets the staff/tutors available for a specific location, course and service.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $locationid The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $services The list of services selected by the user, in JSON format. (optional)
     * @param  string $eventid The ID of the event selected. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationGetstaffWithHttpInfo($station, $locationid, $user, $services = null, $eventid = null, $photosize = null)
    {
        $request = $this->advancedstationGetstaffRequest($station, $locationid, $user, $services, $eventid, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationGetstaffAsync
     *
     * Gets the staff/tutors available for a specific location, course and service.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $locationid The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $services The list of services selected by the user, in JSON format. (optional)
     * @param  string $eventid The ID of the event selected. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetstaffAsync($station, $locationid, $user, $services = null, $eventid = null, $photosize = null)
    {
        return $this->advancedstationGetstaffAsyncWithHttpInfo($station, $locationid, $user, $services, $eventid, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationGetstaffAsyncWithHttpInfo
     *
     * Gets the staff/tutors available for a specific location, course and service.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $locationid The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $services The list of services selected by the user, in JSON format. (optional)
     * @param  string $eventid The ID of the event selected. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationGetstaffAsyncWithHttpInfo($station, $locationid, $user, $services = null, $eventid = null, $photosize = null)
    {
        $returnType = '';
        $request = $this->advancedstationGetstaffRequest($station, $locationid, $user, $services, $eventid, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationGetstaff'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $locationid The id of the location the student picked. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $services The list of services selected by the user, in JSON format. (optional)
     * @param  string $eventid The ID of the event selected. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationGetstaffRequest($station, $locationid, $user, $services = null, $eventid = null, $photosize = null)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationGetstaff'
            );
        }
        // verify the required parameter 'locationid' is set
        if ($locationid === null || (is_array($locationid) && count($locationid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationid when calling advancedstationGetstaff'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationGetstaff'
            );
        }

        $resourcePath = '/advancedstation/getstaff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($locationid !== null) {
            if('form' === 'form' && is_array($locationid)) {
                foreach($locationid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationid'] = $locationid;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($services !== null) {
            if('form' === 'form' && is_array($services)) {
                foreach($services as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['services'] = $services;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation advancedstationIssignedin
     *
     * Gets whether a user is signed-in or not.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function advancedstationIssignedin($station, $time, $user, $location = null)
    {
        $this->advancedstationIssignedinWithHttpInfo($station, $time, $user, $location);
    }

    /**
     * Operation advancedstationIssignedinWithHttpInfo
     *
     * Gets whether a user is signed-in or not.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedstationIssignedinWithHttpInfo($station, $time, $user, $location = null)
    {
        $request = $this->advancedstationIssignedinRequest($station, $time, $user, $location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation advancedstationIssignedinAsync
     *
     * Gets whether a user is signed-in or not.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationIssignedinAsync($station, $time, $user, $location = null)
    {
        return $this->advancedstationIssignedinAsyncWithHttpInfo($station, $time, $user, $location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedstationIssignedinAsyncWithHttpInfo
     *
     * Gets whether a user is signed-in or not.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function advancedstationIssignedinAsyncWithHttpInfo($station, $time, $user, $location = null)
    {
        $returnType = '';
        $request = $this->advancedstationIssignedinRequest($station, $time, $user, $location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedstationIssignedin'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function advancedstationIssignedinRequest($station, $time, $user, $location = null)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling advancedstationIssignedin'
            );
        }
        // verify the required parameter 'time' is set
        if ($time === null || (is_array($time) && count($time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time when calling advancedstationIssignedin'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling advancedstationIssignedin'
            );
        }

        $resourcePath = '/advancedstation/issignedin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($time !== null) {
            if('form' === 'form' && is_array($time)) {
                foreach($time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time'] = $time;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
