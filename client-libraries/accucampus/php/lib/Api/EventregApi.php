<?php
/**
 * EventregApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AccuCampus OpenAPI 3
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * EventregApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventregApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation eventregAddme
     *
     * Register current user to a course
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregAddme($eventid, $listname)
    {
        $this->eventregAddmeWithHttpInfo($eventid, $listname);
    }

    /**
     * Operation eventregAddmeWithHttpInfo
     *
     * Register current user to a course
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregAddmeWithHttpInfo($eventid, $listname)
    {
        $request = $this->eventregAddmeRequest($eventid, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregAddmeAsync
     *
     * Register current user to a course
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddmeAsync($eventid, $listname)
    {
        return $this->eventregAddmeAsyncWithHttpInfo($eventid, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregAddmeAsyncWithHttpInfo
     *
     * Register current user to a course
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddmeAsyncWithHttpInfo($eventid, $listname)
    {
        $returnType = '';
        $request = $this->eventregAddmeRequest($eventid, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregAddme'
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregAddmeRequest($eventid, $listname)
    {
        // verify the required parameter 'eventid' is set
        if ($eventid === null || (is_array($eventid) && count($eventid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventid when calling eventregAddme'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregAddme'
            );
        }

        $resourcePath = '/eventreg/addme';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregAddmetoall
     *
     * Register current user to all courses
     *
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregAddmetoall($listname)
    {
        $this->eventregAddmetoallWithHttpInfo($listname);
    }

    /**
     * Operation eventregAddmetoallWithHttpInfo
     *
     * Register current user to all courses
     *
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregAddmetoallWithHttpInfo($listname)
    {
        $request = $this->eventregAddmetoallRequest($listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregAddmetoallAsync
     *
     * Register current user to all courses
     *
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddmetoallAsync($listname)
    {
        return $this->eventregAddmetoallAsyncWithHttpInfo($listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregAddmetoallAsyncWithHttpInfo
     *
     * Register current user to all courses
     *
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddmetoallAsyncWithHttpInfo($listname)
    {
        $returnType = '';
        $request = $this->eventregAddmetoallRequest($listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregAddmetoall'
     *
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregAddmetoallRequest($listname)
    {
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregAddmetoall'
            );
        }

        $resourcePath = '/eventreg/addmetoall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregAddmetogroup
     *
     * Register current user to a course group
     *
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregAddmetogroup($codegroup, $listname)
    {
        $this->eventregAddmetogroupWithHttpInfo($codegroup, $listname);
    }

    /**
     * Operation eventregAddmetogroupWithHttpInfo
     *
     * Register current user to a course group
     *
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregAddmetogroupWithHttpInfo($codegroup, $listname)
    {
        $request = $this->eventregAddmetogroupRequest($codegroup, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregAddmetogroupAsync
     *
     * Register current user to a course group
     *
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddmetogroupAsync($codegroup, $listname)
    {
        return $this->eventregAddmetogroupAsyncWithHttpInfo($codegroup, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregAddmetogroupAsyncWithHttpInfo
     *
     * Register current user to a course group
     *
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddmetogroupAsyncWithHttpInfo($codegroup, $listname)
    {
        $returnType = '';
        $request = $this->eventregAddmetogroupRequest($codegroup, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregAddmetogroup'
     *
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregAddmetogroupRequest($codegroup, $listname)
    {
        // verify the required parameter 'codegroup' is set
        if ($codegroup === null || (is_array($codegroup) && count($codegroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codegroup when calling eventregAddmetogroup'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregAddmetogroup'
            );
        }

        $resourcePath = '/eventreg/addmetogroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($codegroup !== null) {
            if('form' === 'form' && is_array($codegroup)) {
                foreach($codegroup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['codegroup'] = $codegroup;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregAdduser
     *
     * Register a user to a course for attendance
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregAdduser($userid, $eventid, $listname)
    {
        $this->eventregAdduserWithHttpInfo($userid, $eventid, $listname);
    }

    /**
     * Operation eventregAdduserWithHttpInfo
     *
     * Register a user to a course for attendance
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregAdduserWithHttpInfo($userid, $eventid, $listname)
    {
        $request = $this->eventregAdduserRequest($userid, $eventid, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregAdduserAsync
     *
     * Register a user to a course for attendance
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAdduserAsync($userid, $eventid, $listname)
    {
        return $this->eventregAdduserAsyncWithHttpInfo($userid, $eventid, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregAdduserAsyncWithHttpInfo
     *
     * Register a user to a course for attendance
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAdduserAsyncWithHttpInfo($userid, $eventid, $listname)
    {
        $returnType = '';
        $request = $this->eventregAdduserRequest($userid, $eventid, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregAdduser'
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregAdduserRequest($userid, $eventid, $listname)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling eventregAdduser'
            );
        }
        // verify the required parameter 'eventid' is set
        if ($eventid === null || (is_array($eventid) && count($eventid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventid when calling eventregAdduser'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregAdduser'
            );
        }

        $resourcePath = '/eventreg/adduser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregAddusertoall
     *
     * Register a user to assist with all courses
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregAddusertoall($userid, $listname)
    {
        $this->eventregAddusertoallWithHttpInfo($userid, $listname);
    }

    /**
     * Operation eventregAddusertoallWithHttpInfo
     *
     * Register a user to assist with all courses
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregAddusertoallWithHttpInfo($userid, $listname)
    {
        $request = $this->eventregAddusertoallRequest($userid, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregAddusertoallAsync
     *
     * Register a user to assist with all courses
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddusertoallAsync($userid, $listname)
    {
        return $this->eventregAddusertoallAsyncWithHttpInfo($userid, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregAddusertoallAsyncWithHttpInfo
     *
     * Register a user to assist with all courses
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddusertoallAsyncWithHttpInfo($userid, $listname)
    {
        $returnType = '';
        $request = $this->eventregAddusertoallRequest($userid, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregAddusertoall'
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregAddusertoallRequest($userid, $listname)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling eventregAddusertoall'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregAddusertoall'
            );
        }

        $resourcePath = '/eventreg/addusertoall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregAddusertogroup
     *
     * Register a user to an course group
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregAddusertogroup($userid, $codegroup, $listname)
    {
        $this->eventregAddusertogroupWithHttpInfo($userid, $codegroup, $listname);
    }

    /**
     * Operation eventregAddusertogroupWithHttpInfo
     *
     * Register a user to an course group
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregAddusertogroupWithHttpInfo($userid, $codegroup, $listname)
    {
        $request = $this->eventregAddusertogroupRequest($userid, $codegroup, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregAddusertogroupAsync
     *
     * Register a user to an course group
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddusertogroupAsync($userid, $codegroup, $listname)
    {
        return $this->eventregAddusertogroupAsyncWithHttpInfo($userid, $codegroup, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregAddusertogroupAsyncWithHttpInfo
     *
     * Register a user to an course group
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregAddusertogroupAsyncWithHttpInfo($userid, $codegroup, $listname)
    {
        $returnType = '';
        $request = $this->eventregAddusertogroupRequest($userid, $codegroup, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregAddusertogroup'
     *
     * @param  string $userid The id of the user to add. (required)
     * @param  string $codegroup The code used to group events. (required)
     * @param  string $listname The name of the list where the user has to be registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregAddusertogroupRequest($userid, $codegroup, $listname)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling eventregAddusertogroup'
            );
        }
        // verify the required parameter 'codegroup' is set
        if ($codegroup === null || (is_array($codegroup) && count($codegroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codegroup when calling eventregAddusertogroup'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregAddusertogroup'
            );
        }

        $resourcePath = '/eventreg/addusertogroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($codegroup !== null) {
            if('form' === 'form' && is_array($codegroup)) {
                foreach($codegroup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['codegroup'] = $codegroup;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregGetevents
     *
     * View course registration by user
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregGetevents($userid, $listname, $termid = null, $namefilter = null)
    {
        $this->eventregGeteventsWithHttpInfo($userid, $listname, $termid, $namefilter);
    }

    /**
     * Operation eventregGeteventsWithHttpInfo
     *
     * View course registration by user
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregGeteventsWithHttpInfo($userid, $listname, $termid = null, $namefilter = null)
    {
        $request = $this->eventregGeteventsRequest($userid, $listname, $termid, $namefilter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregGeteventsAsync
     *
     * View course registration by user
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGeteventsAsync($userid, $listname, $termid = null, $namefilter = null)
    {
        return $this->eventregGeteventsAsyncWithHttpInfo($userid, $listname, $termid, $namefilter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregGeteventsAsyncWithHttpInfo
     *
     * View course registration by user
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGeteventsAsyncWithHttpInfo($userid, $listname, $termid = null, $namefilter = null)
    {
        $returnType = '';
        $request = $this->eventregGeteventsRequest($userid, $listname, $termid, $namefilter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregGetevents'
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregGeteventsRequest($userid, $listname, $termid = null, $namefilter = null)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling eventregGetevents'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregGetevents'
            );
        }

        $resourcePath = '/eventreg/getevents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }
        // query params
        if ($termid !== null) {
            if('form' === 'form' && is_array($termid)) {
                foreach($termid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['termid'] = $termid;
            }
        }
        // query params
        if ($namefilter !== null) {
            if('form' === 'form' && is_array($namefilter)) {
                foreach($namefilter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['namefilter'] = $namefilter;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregGetgroups
     *
     * Lists the course group registrations of a user
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregGetgroups($userid, $listname)
    {
        $this->eventregGetgroupsWithHttpInfo($userid, $listname);
    }

    /**
     * Operation eventregGetgroupsWithHttpInfo
     *
     * Lists the course group registrations of a user
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregGetgroupsWithHttpInfo($userid, $listname)
    {
        $request = $this->eventregGetgroupsRequest($userid, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregGetgroupsAsync
     *
     * Lists the course group registrations of a user
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetgroupsAsync($userid, $listname)
    {
        return $this->eventregGetgroupsAsyncWithHttpInfo($userid, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregGetgroupsAsyncWithHttpInfo
     *
     * Lists the course group registrations of a user
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetgroupsAsyncWithHttpInfo($userid, $listname)
    {
        $returnType = '';
        $request = $this->eventregGetgroupsRequest($userid, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregGetgroups'
     *
     * @param  string $userid The user id to list events. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregGetgroupsRequest($userid, $listname)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling eventregGetgroups'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregGetgroups'
            );
        }

        $resourcePath = '/eventreg/getgroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregGetmyevents
     *
     * View the event registrations of the current user
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregGetmyevents($listname, $termid = null, $namefilter = null)
    {
        $this->eventregGetmyeventsWithHttpInfo($listname, $termid, $namefilter);
    }

    /**
     * Operation eventregGetmyeventsWithHttpInfo
     *
     * View the event registrations of the current user
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregGetmyeventsWithHttpInfo($listname, $termid = null, $namefilter = null)
    {
        $request = $this->eventregGetmyeventsRequest($listname, $termid, $namefilter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregGetmyeventsAsync
     *
     * View the event registrations of the current user
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetmyeventsAsync($listname, $termid = null, $namefilter = null)
    {
        return $this->eventregGetmyeventsAsyncWithHttpInfo($listname, $termid, $namefilter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregGetmyeventsAsyncWithHttpInfo
     *
     * View the event registrations of the current user
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetmyeventsAsyncWithHttpInfo($listname, $termid = null, $namefilter = null)
    {
        $returnType = '';
        $request = $this->eventregGetmyeventsRequest($listname, $termid, $namefilter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregGetmyevents'
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     * @param  string $termid The term id to list events. (optional)
     * @param  string $namefilter The value used to filter the events by name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregGetmyeventsRequest($listname, $termid = null, $namefilter = null)
    {
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregGetmyevents'
            );
        }

        $resourcePath = '/eventreg/getmyevents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }
        // query params
        if ($termid !== null) {
            if('form' === 'form' && is_array($termid)) {
                foreach($termid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['termid'] = $termid;
            }
        }
        // query params
        if ($namefilter !== null) {
            if('form' === 'form' && is_array($namefilter)) {
                foreach($namefilter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['namefilter'] = $namefilter;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregGetmygroups
     *
     * View all current user registrations to course groups
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregGetmygroups($listname)
    {
        $this->eventregGetmygroupsWithHttpInfo($listname);
    }

    /**
     * Operation eventregGetmygroupsWithHttpInfo
     *
     * View all current user registrations to course groups
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregGetmygroupsWithHttpInfo($listname)
    {
        $request = $this->eventregGetmygroupsRequest($listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregGetmygroupsAsync
     *
     * View all current user registrations to course groups
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetmygroupsAsync($listname)
    {
        return $this->eventregGetmygroupsAsyncWithHttpInfo($listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregGetmygroupsAsyncWithHttpInfo
     *
     * View all current user registrations to course groups
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetmygroupsAsyncWithHttpInfo($listname)
    {
        $returnType = '';
        $request = $this->eventregGetmygroupsRequest($listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregGetmygroups'
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregGetmygroupsRequest($listname)
    {
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregGetmygroups'
            );
        }

        $resourcePath = '/eventreg/getmygroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregGetusers
     *
     * View course registration
     *
     * @param  string $eventid The event id to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregGetusers($eventid, $listname, $photosize = null)
    {
        $this->eventregGetusersWithHttpInfo($eventid, $listname, $photosize);
    }

    /**
     * Operation eventregGetusersWithHttpInfo
     *
     * View course registration
     *
     * @param  string $eventid The event id to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregGetusersWithHttpInfo($eventid, $listname, $photosize = null)
    {
        $request = $this->eventregGetusersRequest($eventid, $listname, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregGetusersAsync
     *
     * View course registration
     *
     * @param  string $eventid The event id to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetusersAsync($eventid, $listname, $photosize = null)
    {
        return $this->eventregGetusersAsyncWithHttpInfo($eventid, $listname, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregGetusersAsyncWithHttpInfo
     *
     * View course registration
     *
     * @param  string $eventid The event id to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetusersAsyncWithHttpInfo($eventid, $listname, $photosize = null)
    {
        $returnType = '';
        $request = $this->eventregGetusersRequest($eventid, $listname, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregGetusers'
     *
     * @param  string $eventid The event id to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregGetusersRequest($eventid, $listname, $photosize = null)
    {
        // verify the required parameter 'eventid' is set
        if ($eventid === null || (is_array($eventid) && count($eventid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventid when calling eventregGetusers'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregGetusers'
            );
        }

        $resourcePath = '/eventreg/getusers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }
        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregGetusersfromgroup
     *
     * Lists the registrations for a course group
     *
     * @param  string $codegroup The code group to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregGetusersfromgroup($codegroup, $listname)
    {
        $this->eventregGetusersfromgroupWithHttpInfo($codegroup, $listname);
    }

    /**
     * Operation eventregGetusersfromgroupWithHttpInfo
     *
     * Lists the registrations for a course group
     *
     * @param  string $codegroup The code group to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregGetusersfromgroupWithHttpInfo($codegroup, $listname)
    {
        $request = $this->eventregGetusersfromgroupRequest($codegroup, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregGetusersfromgroupAsync
     *
     * Lists the registrations for a course group
     *
     * @param  string $codegroup The code group to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetusersfromgroupAsync($codegroup, $listname)
    {
        return $this->eventregGetusersfromgroupAsyncWithHttpInfo($codegroup, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregGetusersfromgroupAsyncWithHttpInfo
     *
     * Lists the registrations for a course group
     *
     * @param  string $codegroup The code group to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetusersfromgroupAsyncWithHttpInfo($codegroup, $listname)
    {
        $returnType = '';
        $request = $this->eventregGetusersfromgroupRequest($codegroup, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregGetusersfromgroup'
     *
     * @param  string $codegroup The code group to list users. (required)
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregGetusersfromgroupRequest($codegroup, $listname)
    {
        // verify the required parameter 'codegroup' is set
        if ($codegroup === null || (is_array($codegroup) && count($codegroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codegroup when calling eventregGetusersfromgroup'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregGetusersfromgroup'
            );
        }

        $resourcePath = '/eventreg/getusersfromgroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($codegroup !== null) {
            if('form' === 'form' && is_array($codegroup)) {
                foreach($codegroup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['codegroup'] = $codegroup;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregGetuserstoall
     *
     * View the users that are registered to all courses
     *
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregGetuserstoall($listname)
    {
        $this->eventregGetuserstoallWithHttpInfo($listname);
    }

    /**
     * Operation eventregGetuserstoallWithHttpInfo
     *
     * View the users that are registered to all courses
     *
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregGetuserstoallWithHttpInfo($listname)
    {
        $request = $this->eventregGetuserstoallRequest($listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregGetuserstoallAsync
     *
     * View the users that are registered to all courses
     *
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetuserstoallAsync($listname)
    {
        return $this->eventregGetuserstoallAsyncWithHttpInfo($listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregGetuserstoallAsyncWithHttpInfo
     *
     * View the users that are registered to all courses
     *
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregGetuserstoallAsyncWithHttpInfo($listname)
    {
        $returnType = '';
        $request = $this->eventregGetuserstoallRequest($listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregGetuserstoall'
     *
     * @param  string $listname The name of the list to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregGetuserstoallRequest($listname)
    {
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregGetuserstoall'
            );
        }

        $resourcePath = '/eventreg/getuserstoall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregRemoveme
     *
     * Unregister current user from a course
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregRemoveme($eventid, $listname)
    {
        $this->eventregRemovemeWithHttpInfo($eventid, $listname);
    }

    /**
     * Operation eventregRemovemeWithHttpInfo
     *
     * Unregister current user from a course
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregRemovemeWithHttpInfo($eventid, $listname)
    {
        $request = $this->eventregRemovemeRequest($eventid, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregRemovemeAsync
     *
     * Unregister current user from a course
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemovemeAsync($eventid, $listname)
    {
        return $this->eventregRemovemeAsyncWithHttpInfo($eventid, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregRemovemeAsyncWithHttpInfo
     *
     * Unregister current user from a course
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemovemeAsyncWithHttpInfo($eventid, $listname)
    {
        $returnType = '';
        $request = $this->eventregRemovemeRequest($eventid, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregRemoveme'
     *
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregRemovemeRequest($eventid, $listname)
    {
        // verify the required parameter 'eventid' is set
        if ($eventid === null || (is_array($eventid) && count($eventid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventid when calling eventregRemoveme'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregRemoveme'
            );
        }

        $resourcePath = '/eventreg/removeme';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregRemovemefromall
     *
     * Remove current user from the registration to all courses
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregRemovemefromall($listname)
    {
        $this->eventregRemovemefromallWithHttpInfo($listname);
    }

    /**
     * Operation eventregRemovemefromallWithHttpInfo
     *
     * Remove current user from the registration to all courses
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregRemovemefromallWithHttpInfo($listname)
    {
        $request = $this->eventregRemovemefromallRequest($listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregRemovemefromallAsync
     *
     * Remove current user from the registration to all courses
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemovemefromallAsync($listname)
    {
        return $this->eventregRemovemefromallAsyncWithHttpInfo($listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregRemovemefromallAsyncWithHttpInfo
     *
     * Remove current user from the registration to all courses
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemovemefromallAsyncWithHttpInfo($listname)
    {
        $returnType = '';
        $request = $this->eventregRemovemefromallRequest($listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregRemovemefromall'
     *
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregRemovemefromallRequest($listname)
    {
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregRemovemefromall'
            );
        }

        $resourcePath = '/eventreg/removemefromall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregRemovemefromgroup
     *
     * Remove current user from a course group
     *
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregRemovemefromgroup($codegroup, $listname)
    {
        $this->eventregRemovemefromgroupWithHttpInfo($codegroup, $listname);
    }

    /**
     * Operation eventregRemovemefromgroupWithHttpInfo
     *
     * Remove current user from a course group
     *
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregRemovemefromgroupWithHttpInfo($codegroup, $listname)
    {
        $request = $this->eventregRemovemefromgroupRequest($codegroup, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregRemovemefromgroupAsync
     *
     * Remove current user from a course group
     *
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemovemefromgroupAsync($codegroup, $listname)
    {
        return $this->eventregRemovemefromgroupAsyncWithHttpInfo($codegroup, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregRemovemefromgroupAsyncWithHttpInfo
     *
     * Remove current user from a course group
     *
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemovemefromgroupAsyncWithHttpInfo($codegroup, $listname)
    {
        $returnType = '';
        $request = $this->eventregRemovemefromgroupRequest($codegroup, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregRemovemefromgroup'
     *
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregRemovemefromgroupRequest($codegroup, $listname)
    {
        // verify the required parameter 'codegroup' is set
        if ($codegroup === null || (is_array($codegroup) && count($codegroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codegroup when calling eventregRemovemefromgroup'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregRemovemefromgroup'
            );
        }

        $resourcePath = '/eventreg/removemefromgroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($codegroup !== null) {
            if('form' === 'form' && is_array($codegroup)) {
                foreach($codegroup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['codegroup'] = $codegroup;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregRemoveuser
     *
     * Remove a user from a course
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregRemoveuser($userid, $eventid, $listname)
    {
        $this->eventregRemoveuserWithHttpInfo($userid, $eventid, $listname);
    }

    /**
     * Operation eventregRemoveuserWithHttpInfo
     *
     * Remove a user from a course
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregRemoveuserWithHttpInfo($userid, $eventid, $listname)
    {
        $request = $this->eventregRemoveuserRequest($userid, $eventid, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregRemoveuserAsync
     *
     * Remove a user from a course
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemoveuserAsync($userid, $eventid, $listname)
    {
        return $this->eventregRemoveuserAsyncWithHttpInfo($userid, $eventid, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregRemoveuserAsyncWithHttpInfo
     *
     * Remove a user from a course
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemoveuserAsyncWithHttpInfo($userid, $eventid, $listname)
    {
        $returnType = '';
        $request = $this->eventregRemoveuserRequest($userid, $eventid, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregRemoveuser'
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $eventid The id of the event. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregRemoveuserRequest($userid, $eventid, $listname)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling eventregRemoveuser'
            );
        }
        // verify the required parameter 'eventid' is set
        if ($eventid === null || (is_array($eventid) && count($eventid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventid when calling eventregRemoveuser'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregRemoveuser'
            );
        }

        $resourcePath = '/eventreg/removeuser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregRemoveuserfromall
     *
     * Remove a user from the registration to all courses
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregRemoveuserfromall($userid, $listname)
    {
        $this->eventregRemoveuserfromallWithHttpInfo($userid, $listname);
    }

    /**
     * Operation eventregRemoveuserfromallWithHttpInfo
     *
     * Remove a user from the registration to all courses
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregRemoveuserfromallWithHttpInfo($userid, $listname)
    {
        $request = $this->eventregRemoveuserfromallRequest($userid, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregRemoveuserfromallAsync
     *
     * Remove a user from the registration to all courses
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemoveuserfromallAsync($userid, $listname)
    {
        return $this->eventregRemoveuserfromallAsyncWithHttpInfo($userid, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregRemoveuserfromallAsyncWithHttpInfo
     *
     * Remove a user from the registration to all courses
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemoveuserfromallAsyncWithHttpInfo($userid, $listname)
    {
        $returnType = '';
        $request = $this->eventregRemoveuserfromallRequest($userid, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregRemoveuserfromall'
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregRemoveuserfromallRequest($userid, $listname)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling eventregRemoveuserfromall'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregRemoveuserfromall'
            );
        }

        $resourcePath = '/eventreg/removeuserfromall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventregRemoveuserfromgroup
     *
     * Remove a user from a course group
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function eventregRemoveuserfromgroup($userid, $codegroup, $listname)
    {
        $this->eventregRemoveuserfromgroupWithHttpInfo($userid, $codegroup, $listname);
    }

    /**
     * Operation eventregRemoveuserfromgroupWithHttpInfo
     *
     * Remove a user from a course group
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventregRemoveuserfromgroupWithHttpInfo($userid, $codegroup, $listname)
    {
        $request = $this->eventregRemoveuserfromgroupRequest($userid, $codegroup, $listname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation eventregRemoveuserfromgroupAsync
     *
     * Remove a user from a course group
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemoveuserfromgroupAsync($userid, $codegroup, $listname)
    {
        return $this->eventregRemoveuserfromgroupAsyncWithHttpInfo($userid, $codegroup, $listname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventregRemoveuserfromgroupAsyncWithHttpInfo
     *
     * Remove a user from a course group
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventregRemoveuserfromgroupAsyncWithHttpInfo($userid, $codegroup, $listname)
    {
        $returnType = '';
        $request = $this->eventregRemoveuserfromgroupRequest($userid, $codegroup, $listname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventregRemoveuserfromgroup'
     *
     * @param  string $userid The id of the user to remove. (required)
     * @param  string $codegroup The code group of the events/courses. (required)
     * @param  string $listname The name of the list where the user is registered. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventregRemoveuserfromgroupRequest($userid, $codegroup, $listname)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null || (is_array($userid) && count($userid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userid when calling eventregRemoveuserfromgroup'
            );
        }
        // verify the required parameter 'codegroup' is set
        if ($codegroup === null || (is_array($codegroup) && count($codegroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $codegroup when calling eventregRemoveuserfromgroup'
            );
        }
        // verify the required parameter 'listname' is set
        if ($listname === null || (is_array($listname) && count($listname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listname when calling eventregRemoveuserfromgroup'
            );
        }

        $resourcePath = '/eventreg/removeuserfromgroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }
        // query params
        if ($codegroup !== null) {
            if('form' === 'form' && is_array($codegroup)) {
                foreach($codegroup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['codegroup'] = $codegroup;
            }
        }
        // query params
        if ($listname !== null) {
            if('form' === 'form' && is_array($listname)) {
                foreach($listname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listname'] = $listname;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
