<?php
/**
 * WaitinglineApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AccuCampus OpenAPI 3
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WaitinglineApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WaitinglineApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation waitinglineAdduser
     *
     * Put user in a waiting line
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  string $user The user&#39;s card number. (required)
     * @param  string $locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param  \DateTime $time The date and time of the swipe. (optional)
     * @param  string $signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param  string $roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param  string $services The services ids the user has selected. (optional)
     * @param  string $eventid The id of the event the user selected. (optional)
     * @param  string $staff The id of the staff member the user selected. (optional)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function waitinglineAdduser($station, $user, $locationid = null, $time = null, $signinrole = null, $roleid = null, $services = null, $eventid = null, $staff = null, $photosize = null)
    {
        $this->waitinglineAdduserWithHttpInfo($station, $user, $locationid, $time, $signinrole, $roleid, $services, $eventid, $staff, $photosize);
    }

    /**
     * Operation waitinglineAdduserWithHttpInfo
     *
     * Put user in a waiting line
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  string $user The user&#39;s card number. (required)
     * @param  string $locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param  \DateTime $time The date and time of the swipe. (optional)
     * @param  string $signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param  string $roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param  string $services The services ids the user has selected. (optional)
     * @param  string $eventid The id of the event the user selected. (optional)
     * @param  string $staff The id of the staff member the user selected. (optional)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitinglineAdduserWithHttpInfo($station, $user, $locationid = null, $time = null, $signinrole = null, $roleid = null, $services = null, $eventid = null, $staff = null, $photosize = null)
    {
        $request = $this->waitinglineAdduserRequest($station, $user, $locationid, $time, $signinrole, $roleid, $services, $eventid, $staff, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation waitinglineAdduserAsync
     *
     * Put user in a waiting line
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  string $user The user&#39;s card number. (required)
     * @param  string $locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param  \DateTime $time The date and time of the swipe. (optional)
     * @param  string $signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param  string $roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param  string $services The services ids the user has selected. (optional)
     * @param  string $eventid The id of the event the user selected. (optional)
     * @param  string $staff The id of the staff member the user selected. (optional)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineAdduserAsync($station, $user, $locationid = null, $time = null, $signinrole = null, $roleid = null, $services = null, $eventid = null, $staff = null, $photosize = null)
    {
        return $this->waitinglineAdduserAsyncWithHttpInfo($station, $user, $locationid, $time, $signinrole, $roleid, $services, $eventid, $staff, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitinglineAdduserAsyncWithHttpInfo
     *
     * Put user in a waiting line
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  string $user The user&#39;s card number. (required)
     * @param  string $locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param  \DateTime $time The date and time of the swipe. (optional)
     * @param  string $signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param  string $roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param  string $services The services ids the user has selected. (optional)
     * @param  string $eventid The id of the event the user selected. (optional)
     * @param  string $staff The id of the staff member the user selected. (optional)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineAdduserAsyncWithHttpInfo($station, $user, $locationid = null, $time = null, $signinrole = null, $roleid = null, $services = null, $eventid = null, $staff = null, $photosize = null)
    {
        $returnType = '';
        $request = $this->waitinglineAdduserRequest($station, $user, $locationid, $time, $signinrole, $roleid, $services, $eventid, $staff, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitinglineAdduser'
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  string $user The user&#39;s card number. (required)
     * @param  string $locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param  \DateTime $time The date and time of the swipe. (optional)
     * @param  string $signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param  string $roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param  string $services The services ids the user has selected. (optional)
     * @param  string $eventid The id of the event the user selected. (optional)
     * @param  string $staff The id of the staff member the user selected. (optional)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitinglineAdduserRequest($station, $user, $locationid = null, $time = null, $signinrole = null, $roleid = null, $services = null, $eventid = null, $staff = null, $photosize = null)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling waitinglineAdduser'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling waitinglineAdduser'
            );
        }

        $resourcePath = '/waitingline/adduser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($locationid !== null) {
            if('form' === 'form' && is_array($locationid)) {
                foreach($locationid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationid'] = $locationid;
            }
        }
        // query params
        if ($time !== null) {
            if('form' === 'form' && is_array($time)) {
                foreach($time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time'] = $time;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($signinrole !== null) {
            if('form' === 'form' && is_array($signinrole)) {
                foreach($signinrole as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['signinrole'] = $signinrole;
            }
        }
        // query params
        if ($roleid !== null) {
            if('form' === 'form' && is_array($roleid)) {
                foreach($roleid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['roleid'] = $roleid;
            }
        }
        // query params
        if ($services !== null) {
            if('form' === 'form' && is_array($services)) {
                foreach($services as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['services'] = $services;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($staff !== null) {
            if('form' === 'form' && is_array($staff)) {
                foreach($staff as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staff'] = $staff;
            }
        }
        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitinglineDelete
     *
     * Delete a waiting line
     *
     * @param  string $id The id of the line to delete. (required)
     * @param  AnyType $body body (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function waitinglineDelete($id, $body = null)
    {
        $this->waitinglineDeleteWithHttpInfo($id, $body);
    }

    /**
     * Operation waitinglineDeleteWithHttpInfo
     *
     * Delete a waiting line
     *
     * @param  string $id The id of the line to delete. (required)
     * @param  AnyType $body (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitinglineDeleteWithHttpInfo($id, $body = null)
    {
        $request = $this->waitinglineDeleteRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation waitinglineDeleteAsync
     *
     * Delete a waiting line
     *
     * @param  string $id The id of the line to delete. (required)
     * @param  AnyType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineDeleteAsync($id, $body = null)
    {
        return $this->waitinglineDeleteAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitinglineDeleteAsyncWithHttpInfo
     *
     * Delete a waiting line
     *
     * @param  string $id The id of the line to delete. (required)
     * @param  AnyType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineDeleteAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '';
        $request = $this->waitinglineDeleteRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitinglineDelete'
     *
     * @param  string $id The id of the line to delete. (required)
     * @param  AnyType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitinglineDeleteRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling waitinglineDelete'
            );
        }

        $resourcePath = '/waitingline/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitinglineGet
     *
     * View details of a waiting line
     *
     * @param  string $id The id of the waiting line to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function waitinglineGet($id, $photosize = null)
    {
        $this->waitinglineGetWithHttpInfo($id, $photosize);
    }

    /**
     * Operation waitinglineGetWithHttpInfo
     *
     * View details of a waiting line
     *
     * @param  string $id The id of the waiting line to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitinglineGetWithHttpInfo($id, $photosize = null)
    {
        $request = $this->waitinglineGetRequest($id, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation waitinglineGetAsync
     *
     * View details of a waiting line
     *
     * @param  string $id The id of the waiting line to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineGetAsync($id, $photosize = null)
    {
        return $this->waitinglineGetAsyncWithHttpInfo($id, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitinglineGetAsyncWithHttpInfo
     *
     * View details of a waiting line
     *
     * @param  string $id The id of the waiting line to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineGetAsyncWithHttpInfo($id, $photosize = null)
    {
        $returnType = '';
        $request = $this->waitinglineGetRequest($id, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitinglineGet'
     *
     * @param  string $id The id of the waiting line to get. (required)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitinglineGetRequest($id, $photosize = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling waitinglineGet'
            );
        }

        $resourcePath = '/waitingline/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitinglineIsuserin
     *
     * Check whether a user is in a waiting line, signed-in or is not in the area
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card number of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function waitinglineIsuserin($station, $time, $user, $location = null)
    {
        $this->waitinglineIsuserinWithHttpInfo($station, $time, $user, $location);
    }

    /**
     * Operation waitinglineIsuserinWithHttpInfo
     *
     * Check whether a user is in a waiting line, signed-in or is not in the area
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card number of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitinglineIsuserinWithHttpInfo($station, $time, $user, $location = null)
    {
        $request = $this->waitinglineIsuserinRequest($station, $time, $user, $location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation waitinglineIsuserinAsync
     *
     * Check whether a user is in a waiting line, signed-in or is not in the area
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card number of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineIsuserinAsync($station, $time, $user, $location = null)
    {
        return $this->waitinglineIsuserinAsyncWithHttpInfo($station, $time, $user, $location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitinglineIsuserinAsyncWithHttpInfo
     *
     * Check whether a user is in a waiting line, signed-in or is not in the area
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card number of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineIsuserinAsyncWithHttpInfo($station, $time, $user, $location = null)
    {
        $returnType = '';
        $request = $this->waitinglineIsuserinRequest($station, $time, $user, $location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitinglineIsuserin'
     *
     * @param  string $station The id of the sign-in station. (required)
     * @param  \DateTime $time The date and time of the swipe. (required)
     * @param  string $user The card number of the user. (required)
     * @param  string $location The id of the location the user picked. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitinglineIsuserinRequest($station, $time, $user, $location = null)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling waitinglineIsuserin'
            );
        }
        // verify the required parameter 'time' is set
        if ($time === null || (is_array($time) && count($time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time when calling waitinglineIsuserin'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling waitinglineIsuserin'
            );
        }

        $resourcePath = '/waitingline/isuserin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($time !== null) {
            if('form' === 'form' && is_array($time)) {
                foreach($time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time'] = $time;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitinglineList
     *
     * View a list of waiting lines
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function waitinglineList($from, $count)
    {
        $this->waitinglineListWithHttpInfo($from, $count);
    }

    /**
     * Operation waitinglineListWithHttpInfo
     *
     * View a list of waiting lines
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitinglineListWithHttpInfo($from, $count)
    {
        $request = $this->waitinglineListRequest($from, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation waitinglineListAsync
     *
     * View a list of waiting lines
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineListAsync($from, $count)
    {
        return $this->waitinglineListAsyncWithHttpInfo($from, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitinglineListAsyncWithHttpInfo
     *
     * View a list of waiting lines
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineListAsyncWithHttpInfo($from, $count)
    {
        $returnType = '';
        $request = $this->waitinglineListRequest($from, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitinglineList'
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitinglineListRequest($from, $count)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling waitinglineList'
            );
        }
        // verify the required parameter 'count' is set
        if ($count === null || (is_array($count) && count($count) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling waitinglineList'
            );
        }

        $resourcePath = '/waitingline/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitinglineRemoveuser
     *
     * Remove a user from a waiting line
     *
     * @param  string $waitingline The id of the waiting line whose item has to be removed. (required)
     * @param  string $itemid The ID of the item that has to be removed. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function waitinglineRemoveuser($waitingline, $itemid)
    {
        $this->waitinglineRemoveuserWithHttpInfo($waitingline, $itemid);
    }

    /**
     * Operation waitinglineRemoveuserWithHttpInfo
     *
     * Remove a user from a waiting line
     *
     * @param  string $waitingline The id of the waiting line whose item has to be removed. (required)
     * @param  string $itemid The ID of the item that has to be removed. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitinglineRemoveuserWithHttpInfo($waitingline, $itemid)
    {
        $request = $this->waitinglineRemoveuserRequest($waitingline, $itemid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation waitinglineRemoveuserAsync
     *
     * Remove a user from a waiting line
     *
     * @param  string $waitingline The id of the waiting line whose item has to be removed. (required)
     * @param  string $itemid The ID of the item that has to be removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineRemoveuserAsync($waitingline, $itemid)
    {
        return $this->waitinglineRemoveuserAsyncWithHttpInfo($waitingline, $itemid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitinglineRemoveuserAsyncWithHttpInfo
     *
     * Remove a user from a waiting line
     *
     * @param  string $waitingline The id of the waiting line whose item has to be removed. (required)
     * @param  string $itemid The ID of the item that has to be removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineRemoveuserAsyncWithHttpInfo($waitingline, $itemid)
    {
        $returnType = '';
        $request = $this->waitinglineRemoveuserRequest($waitingline, $itemid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitinglineRemoveuser'
     *
     * @param  string $waitingline The id of the waiting line whose item has to be removed. (required)
     * @param  string $itemid The ID of the item that has to be removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitinglineRemoveuserRequest($waitingline, $itemid)
    {
        // verify the required parameter 'waitingline' is set
        if ($waitingline === null || (is_array($waitingline) && count($waitingline) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waitingline when calling waitinglineRemoveuser'
            );
        }
        // verify the required parameter 'itemid' is set
        if ($itemid === null || (is_array($itemid) && count($itemid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemid when calling waitinglineRemoveuser'
            );
        }

        $resourcePath = '/waitingline/removeuser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($waitingline !== null) {
            if('form' === 'form' && is_array($waitingline)) {
                foreach($waitingline as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['waitingline'] = $waitingline;
            }
        }
        // query params
        if ($itemid !== null) {
            if('form' === 'form' && is_array($itemid)) {
                foreach($itemid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['itemid'] = $itemid;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitinglineSave
     *
     * Create or edit a waiting line
     *
     * @param  string $id The id of the waiting line save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function waitinglineSave($id, $unknown_base_type = null)
    {
        $this->waitinglineSaveWithHttpInfo($id, $unknown_base_type);
    }

    /**
     * Operation waitinglineSaveWithHttpInfo
     *
     * Create or edit a waiting line
     *
     * @param  string $id The id of the waiting line save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitinglineSaveWithHttpInfo($id, $unknown_base_type = null)
    {
        $request = $this->waitinglineSaveRequest($id, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation waitinglineSaveAsync
     *
     * Create or edit a waiting line
     *
     * @param  string $id The id of the waiting line save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineSaveAsync($id, $unknown_base_type = null)
    {
        return $this->waitinglineSaveAsyncWithHttpInfo($id, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitinglineSaveAsyncWithHttpInfo
     *
     * Create or edit a waiting line
     *
     * @param  string $id The id of the waiting line save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineSaveAsyncWithHttpInfo($id, $unknown_base_type = null)
    {
        $returnType = '';
        $request = $this->waitinglineSaveRequest($id, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitinglineSave'
     *
     * @param  string $id The id of the waiting line save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitinglineSaveRequest($id, $unknown_base_type = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling waitinglineSave'
            );
        }

        $resourcePath = '/waitingline/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitinglineSigninuser
     *
     * Sign a user in from a waiting line
     *
     * @param  string $waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param  string $itemid The ID of the item that has to be signed-in. (required)
     * @param  string $staff The id of the staff member selected to sign-in. (required)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function waitinglineSigninuser($waitingline, $itemid, $staff, $photosize = null)
    {
        $this->waitinglineSigninuserWithHttpInfo($waitingline, $itemid, $staff, $photosize);
    }

    /**
     * Operation waitinglineSigninuserWithHttpInfo
     *
     * Sign a user in from a waiting line
     *
     * @param  string $waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param  string $itemid The ID of the item that has to be signed-in. (required)
     * @param  string $staff The id of the staff member selected to sign-in. (required)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitinglineSigninuserWithHttpInfo($waitingline, $itemid, $staff, $photosize = null)
    {
        $request = $this->waitinglineSigninuserRequest($waitingline, $itemid, $staff, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation waitinglineSigninuserAsync
     *
     * Sign a user in from a waiting line
     *
     * @param  string $waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param  string $itemid The ID of the item that has to be signed-in. (required)
     * @param  string $staff The id of the staff member selected to sign-in. (required)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineSigninuserAsync($waitingline, $itemid, $staff, $photosize = null)
    {
        return $this->waitinglineSigninuserAsyncWithHttpInfo($waitingline, $itemid, $staff, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitinglineSigninuserAsyncWithHttpInfo
     *
     * Sign a user in from a waiting line
     *
     * @param  string $waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param  string $itemid The ID of the item that has to be signed-in. (required)
     * @param  string $staff The id of the staff member selected to sign-in. (required)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitinglineSigninuserAsyncWithHttpInfo($waitingline, $itemid, $staff, $photosize = null)
    {
        $returnType = '';
        $request = $this->waitinglineSigninuserRequest($waitingline, $itemid, $staff, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitinglineSigninuser'
     *
     * @param  string $waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param  string $itemid The ID of the item that has to be signed-in. (required)
     * @param  string $staff The id of the staff member selected to sign-in. (required)
     * @param  int $photosize The swiping user&#39;s photo size. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitinglineSigninuserRequest($waitingline, $itemid, $staff, $photosize = null)
    {
        // verify the required parameter 'waitingline' is set
        if ($waitingline === null || (is_array($waitingline) && count($waitingline) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waitingline when calling waitinglineSigninuser'
            );
        }
        // verify the required parameter 'itemid' is set
        if ($itemid === null || (is_array($itemid) && count($itemid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemid when calling waitinglineSigninuser'
            );
        }
        // verify the required parameter 'staff' is set
        if ($staff === null || (is_array($staff) && count($staff) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff when calling waitinglineSigninuser'
            );
        }

        $resourcePath = '/waitingline/signinuser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($waitingline !== null) {
            if('form' === 'form' && is_array($waitingline)) {
                foreach($waitingline as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['waitingline'] = $waitingline;
            }
        }
        // query params
        if ($itemid !== null) {
            if('form' === 'form' && is_array($itemid)) {
                foreach($itemid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['itemid'] = $itemid;
            }
        }
        // query params
        if ($staff !== null) {
            if('form' === 'form' && is_array($staff)) {
                foreach($staff as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staff'] = $staff;
            }
        }
        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
