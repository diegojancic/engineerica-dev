/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Session service.
* @module api/SessionApi
* @version 1.0.0
*/
export default class SessionApi {

    /**
    * Constructs a new SessionApi. 
    * @alias module:api/SessionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sessionBulkupdate operation.
     * @callback module:api/SessionApi~sessionBulkupdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update event sessions
     * Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
     * @param {String} eventid The id of the event to bulk update.
     * @param {String} sessions A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties.
     * @param {module:api/SessionApi~sessionBulkupdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionBulkupdate(eventid, sessions, callback) {
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionBulkupdate");
      }
      // verify the required parameter 'sessions' is set
      if (sessions === undefined || sessions === null) {
        throw new Error("Missing the required parameter 'sessions' when calling sessionBulkupdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'eventid': eventid,
        'sessions': sessions
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/session/bulkupdate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionGet operation.
     * @callback module:api/SessionApi~sessionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a session
     * Allows the user to view a session in order to take attendance.
     * @param {String} id The id of the session to get.
     * @param {module:api/SessionApi~sessionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/session/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionGetschedule operation.
     * @callback module:api/SessionApi~sessionGetscheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the schedule for a location, instructor or attendees
     * @param {Object} opts Optional parameters
     * @param {Date} opts.day The day to return. It will also return the whole week for that day.
     * @param {String} opts.attendee The id of the attendee to get the schedule.
     * @param {String} opts.location The id of the location to get the schedule.
     * @param {String} opts.instructor The id of the instructor to get the schedule.
     * @param {module:api/SessionApi~sessionGetscheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionGetschedule(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'day': opts['day'],
        'attendee': opts['attendee'],
        'location': opts['location'],
        'instructor': opts['instructor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/session/getschedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionList operation.
     * @callback module:api/SessionApi~sessionListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all future sessions of the current semester
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startdate The start date to filter the sessions
     * @param {Date} opts.enddate The end date to filter the sessions.
     * @param {module:api/SessionApi~sessionListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sessionList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling sessionList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/session/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
