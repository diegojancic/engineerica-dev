/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Compassservice service.
* @module api/CompassserviceApi
* @version 1.0.0
*/
export default class CompassserviceApi {

    /**
    * Constructs a new CompassserviceApi. 
    * @alias module:api/CompassserviceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the compassserviceList operation.
     * @callback module:api/CompassserviceApi~compassserviceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the services added to the compass
     * @param {Object} opts Optional parameters
     * @param {String} opts.category The id of the category to filter the services.
     * @param {module:api/CompassserviceApi~compassserviceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compassserviceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/compassservice/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compassserviceListlocations operation.
     * @callback module:api/CompassserviceApi~compassserviceListlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the locations where a service added to the compass is available
     * @param {String} serviceid The id of the service to get its locations.
     * @param {module:api/CompassserviceApi~compassserviceListlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compassserviceListlocations(serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling compassserviceListlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/compassservice/listlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
