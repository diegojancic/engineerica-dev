/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Staffavail service.
* @module api/StaffavailApi
* @version 1.0.0
*/
export default class StaffavailApi {

    /**
    * Constructs a new StaffavailApi. 
    * @alias module:api/StaffavailApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the staffavailAddmetoallservices operation.
     * @callback module:api/StaffavailApi~staffavailAddmetoallservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate current user to all services
     * Allows the user to associate themselves to all services, provided they have a staff role.
     * @param {module:api/StaffavailApi~staffavailAddmetoallservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailAddmetoallservices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/addmetoallservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailAddmetoservice operation.
     * @callback module:api/StaffavailApi~staffavailAddmetoserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate current user to a service
     * Allows the user to associate themselves to a service, provided they have a staff role.
     * @param {String} serviceid The id of the service.
     * @param {module:api/StaffavailApi~staffavailAddmetoserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailAddmetoservice(serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailAddmetoservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/addmetoservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailAddusertoallservices operation.
     * @callback module:api/StaffavailApi~staffavailAddusertoallservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a staff member to all services
     * Allows the user to make a staff member available for all services.
     * @param {String} userid The id of the user to add.
     * @param {module:api/StaffavailApi~staffavailAddusertoallservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailAddusertoallservices(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailAddusertoallservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/addusertoallservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailAddusertoservice operation.
     * @callback module:api/StaffavailApi~staffavailAddusertoserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a staff member to a service
     * Allows the user to make a staff member available for a service.
     * @param {String} userid The id of the user to add.
     * @param {String} serviceid The id of the service.
     * @param {module:api/StaffavailApi~staffavailAddusertoserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailAddusertoservice(userid, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailAddusertoservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailAddusertoservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/addusertoservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailGetmyservices operation.
     * @callback module:api/StaffavailApi~staffavailGetmyservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the services the current user is available for
     * Allows the user to view a list of services that they are associated with.
     * @param {module:api/StaffavailApi~staffavailGetmyservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailGetmyservices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/getmyservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailGetservices operation.
     * @callback module:api/StaffavailApi~staffavailGetservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of services that a staff member is available for
     * Allows the user to view the list of services that a staff member is available for.
     * @param {String} userid The user id to list services.
     * @param {module:api/StaffavailApi~staffavailGetservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailGetservices(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailGetservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/getservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailGetusersforservice operation.
     * @callback module:api/StaffavailApi~staffavailGetusersforserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of staff members that are available for a specific service
     * Allows the user to view all staff members who are available for a service.
     * @param {String} serviceid The service id to list users.
     * @param {module:api/StaffavailApi~staffavailGetusersforserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailGetusersforservice(serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailGetusersforservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/getusersforservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailListtypes operation.
     * @callback module:api/StaffavailApi~staffavailListtypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the availability types
     * @param {module:api/StaffavailApi~staffavailListtypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailListtypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/listtypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailRemovemefromallservices operation.
     * @callback module:api/StaffavailApi~staffavailRemovemefromallservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove current user from all services
     * Allows the user to disassociate themselves from all services, provided they have a staff role.
     * @param {module:api/StaffavailApi~staffavailRemovemefromallservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailRemovemefromallservices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/removemefromallservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailRemovemefromservice operation.
     * @callback module:api/StaffavailApi~staffavailRemovemefromserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove current user from a service
     * Allows the user to disassociate themselves from a service, provided they have a staff role.
     * @param {String} serviceid The id of the service.
     * @param {module:api/StaffavailApi~staffavailRemovemefromserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailRemovemefromservice(serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailRemovemefromservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/removemefromservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailRemoveuserfromallservices operation.
     * @callback module:api/StaffavailApi~staffavailRemoveuserfromallservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a staff member from the registration to all services
     * Allows the user to remove a staff member's availability to all services.
     * @param {String} userid The id of the user to remove.
     * @param {module:api/StaffavailApi~staffavailRemoveuserfromallservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailRemoveuserfromallservices(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailRemoveuserfromallservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/removeuserfromallservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailRemoveuserfromservice operation.
     * @callback module:api/StaffavailApi~staffavailRemoveuserfromserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a staff member from a service
     * Allows the user to remove a staff member's service availability.
     * @param {String} userid The id of the user to remove.
     * @param {String} serviceid The id of the service.
     * @param {module:api/StaffavailApi~staffavailRemoveuserfromserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailRemoveuserfromservice(userid, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailRemoveuserfromservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailRemoveuserfromservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/removeuserfromservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailSetavailability operation.
     * @callback module:api/StaffavailApi~staffavailSetavailabilityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make a staff member available for a specific availability type
     * Allows the user to set a staff member as available for walk ins, appointments, or both.
     * @param {String} userid The id of the user whose specific availability has to be set.
     * @param {Object} opts Optional parameters
     * @param {String} opts.availablefor Specific availability to set.
     * @param {module:api/StaffavailApi~staffavailSetavailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailSetavailability(userid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailSetavailability");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'availablefor': opts['availablefor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/setavailability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailSetmyavailability operation.
     * @callback module:api/StaffavailApi~staffavailSetmyavailabilityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change current user's availability type
     * Allows the user to make themselves available for walk ins, appointments, or both.
     * @param {Object} opts Optional parameters
     * @param {String} opts.availablefor Specific availability to set.
     * @param {module:api/StaffavailApi~staffavailSetmyavailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailSetmyavailability(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'availablefor': opts['availablefor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavail/setmyavailability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
