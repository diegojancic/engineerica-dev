/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Sessionattendancelog service.
* @module api/SessionattendancelogApi
* @version 1.0.0
*/
export default class SessionattendancelogApi {

    /**
    * Constructs a new SessionattendancelogApi. 
    * @alias module:api/SessionattendancelogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sessionattendancelogAddnote operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogAddnoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a note to a class attendance log
     * Allows the user to add a note to a class attendance log.
     * @param {String} id The id of the attendance log.
     * @param {String} text The text of the note to add.
     * @param {module:api/SessionattendancelogApi~sessionattendancelogAddnoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogAddnote(id, text, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionattendancelogAddnote");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sessionattendancelogAddnote");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/addnote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogGet operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a class attendance log
     * Allows the user to view an individual class attendance log and its details.
     * @param {String} id The id of the attendance log to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.
     * @param {module:api/SessionattendancelogApi~sessionattendancelogGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionattendancelogGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogGetuser operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogGetuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the class session attendance information for a specific user
     * Allows the user to view the attendance for a specified student.
     * @param {String} attendee The id of the attendee to get statistic for.
     * @param {String} eventid The id of the event whose attendee statistics have to be returned.
     * @param {module:api/SessionattendancelogApi~sessionattendancelogGetuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogGetuser(attendee, eventid, callback) {
      let postBody = null;
      // verify the required parameter 'attendee' is set
      if (attendee === undefined || attendee === null) {
        throw new Error("Missing the required parameter 'attendee' when calling sessionattendancelogGetuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionattendancelogGetuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'attendee': attendee,
        'eventid': eventid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/getuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogList operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View attendance logs of the specified session
     * Allows the user to view the full list of logs from a specified session
     * @param {String} session The id of the session whose attendees logs have to be returned.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/SessionattendancelogApi~sessionattendancelogListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogList(session, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'session' is set
      if (session === undefined || session === null) {
        throw new Error("Missing the required parameter 'session' when calling sessionattendancelogList");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sessionattendancelogList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling sessionattendancelogList");
      }

      let pathParams = {
      };
      let queryParams = {
        'session': session,
        'from': from,
        'count': count,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogListevent operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogListeventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the attendance information of an entire class
     * Allows the user to view the attendance information for an entire class
     * @param {String} eventid The id of the event whose attendance has to be returned.
     * @param {module:api/SessionattendancelogApi~sessionattendancelogListeventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogListevent(eventid, callback) {
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionattendancelogListevent");
      }

      let pathParams = {
      };
      let queryParams = {
        'eventid': eventid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/listevent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogListsummary operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogListsummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the attendance summary for a class and/or a attendee
     * Allows the user to view the attendance summary for a given class and/or attendee.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventid The id of the event whose attendance has to be returned.
     * @param {String} opts.attendeeid The id of the attendee whose attendance has to be returned.
     * @param {String} opts.groupid The id of the group whose attendance has to be returned.
     * @param {String} opts.start The start date to filter (beginning of time by default).
     * @param {String} opts.end The end date to filter (today by default).
     * @param {module:api/SessionattendancelogApi~sessionattendancelogListsummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogListsummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eventid': opts['eventid'],
        'attendeeid': opts['attendeeid'],
        'groupid': opts['groupid'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/listsummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogMylistsummary operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogMylistsummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View my attendance summary
     * Allows the user to view their own attendance summary.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventid The id of the event whose attendance has to be returned.
     * @param {String} opts.start The start date to filter (beginning of time by default).
     * @param {String} opts.end The end date to filter (today by default).
     * @param {module:api/SessionattendancelogApi~sessionattendancelogMylistsummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogMylistsummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eventid': opts['eventid'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/mylistsummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogSave operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a class attendance log
     * Allows the user to create or edit a class attendance log.
     * @param {String} id The id of the att log to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/SessionattendancelogApi~sessionattendancelogSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionattendancelogSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogSaveswipe operation.
     * @callback module:api/SessionattendancelogApi~sessionattendancelogSaveswipeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a class attendance log swipe
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/SessionattendancelogApi~sessionattendancelogSaveswipeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogSaveswipe(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelog/saveswipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
