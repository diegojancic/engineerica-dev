/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Attendancelogcomment service.
* @module api/AttendancelogcommentApi
* @version 1.0.0
*/
export default class AttendancelogcommentApi {

    /**
    * Constructs a new AttendancelogcommentApi. 
    * @alias module:api/AttendancelogcommentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attendancelogcommentDelete operation.
     * @callback module:api/AttendancelogcommentApi~attendancelogcommentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment on an attendance log
     * @param {String} id The id of the attendance log comment to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/AttendancelogcommentApi~attendancelogcommentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogcommentDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcomment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentGet operation.
     * @callback module:api/AttendancelogcommentApi~attendancelogcommentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a comment on an attendance log
     * @param {String} id The id of the comment to get.
     * @param {module:api/AttendancelogcommentApi~attendancelogcommentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogcommentGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcomment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentList operation.
     * @callback module:api/AttendancelogcommentApi~attendancelogcommentListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the comments on a specific attendance log
     * @param {String} attendancelog The id of the attendance log whose comments have to be retrieved.
     * @param {module:api/AttendancelogcommentApi~attendancelogcommentListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentList(attendancelog, callback) {
      let postBody = null;
      // verify the required parameter 'attendancelog' is set
      if (attendancelog === undefined || attendancelog === null) {
        throw new Error("Missing the required parameter 'attendancelog' when calling attendancelogcommentList");
      }

      let pathParams = {
      };
      let queryParams = {
        'attendancelog': attendancelog
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcomment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentSave operation.
     * @callback module:api/AttendancelogcommentApi~attendancelogcommentSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a comment on an attendance log
     * @param {String} id The id of the comment to edit (leave empty to create a new one)
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/AttendancelogcommentApi~attendancelogcommentSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogcommentSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcomment/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
