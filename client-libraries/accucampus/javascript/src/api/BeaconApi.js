/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Beacon service.
* @module api/BeaconApi
* @version 1.0.0
*/
export default class BeaconApi {

    /**
    * Constructs a new BeaconApi. 
    * @alias module:api/BeaconApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the beaconDelete operation.
     * @callback module:api/BeaconApi~beaconDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a beacon profile
     * Allows the user to delete an existing beacon profile.
     * @param {String} id The id of the beacon to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/BeaconApi~beaconDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling beaconDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconDisable operation.
     * @callback module:api/BeaconApi~beaconDisableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable beacon support account wide
     * Allows the user to enable or disable beacon usage account wide.
     * @param {module:api/BeaconApi~beaconDisableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconDisable(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/disable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconGet operation.
     * @callback module:api/BeaconApi~beaconGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a beacon profile
     * Allows the user to view an individual beacon profile and its details.
     * @param {String} id The id of the beacon to get.
     * @param {module:api/BeaconApi~beaconGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling beaconGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconGetlocations operation.
     * @callback module:api/BeaconApi~beaconGetlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sign-in stations assigned to specific beacons.
     * @param {String} beacons A JSON array containg the beacons data (region, minor and major) values.
     * @param {module:api/BeaconApi~beaconGetlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconGetlocations(beacons, callback) {
      let postBody = null;
      // verify the required parameter 'beacons' is set
      if (beacons === undefined || beacons === null) {
        throw new Error("Missing the required parameter 'beacons' when calling beaconGetlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'beacons': beacons
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/getlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconGetstationlocation operation.
     * @callback module:api/BeaconApi~beaconGetstationlocationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the location settings in the specified sign-in station.
     * @param {String} station The id of the sign-in station whose location information has to be retrieved.
     * @param {String} location The id of the location whose information has to be retrieved.
     * @param {module:api/BeaconApi~beaconGetstationlocationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconGetstationlocation(station, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling beaconGetstationlocation");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling beaconGetstationlocation");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/getstationlocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconGetuuid operation.
     * @callback module:api/BeaconApi~beaconGetuuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the identifier for the account's beacon region (for sign-in stations).
     * @param {module:api/BeaconApi~beaconGetuuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconGetuuid(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/getuuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconList operation.
     * @callback module:api/BeaconApi~beaconListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of beacon profiles
     * Allows the user to view the list of all beacon profiles without their basic details.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/BeaconApi~beaconListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconList(from, count, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling beaconList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling beaconList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconListprofiles operation.
     * @callback module:api/BeaconApi~beaconListprofilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of beacon profiles with their characteristics
     * Allows the user to view the list of all beacon profiles with their basic details.
     * @param {module:api/BeaconApi~beaconListprofilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconListprofiles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/listprofiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconResetuuid operation.
     * @callback module:api/BeaconApi~beaconResetuuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate or reset the identifier for the account's beacon region.
     * Allows the user to reset the identifier for the beacon region, generally not necessary.
     * @param {module:api/BeaconApi~beaconResetuuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconResetuuid(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/resetuuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconSave operation.
     * @callback module:api/BeaconApi~beaconSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a beacon profile
     * Allows the user to create or edit a beacon profile.
     * @param {String} id The id of the beacon save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/BeaconApi~beaconSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling beaconSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconScanlocations operation.
     * @callback module:api/BeaconApi~beaconScanlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if there's location available to sign-in / out.
     * @param {String} beacons A JSON array containg the beacons data (region, minor and major) values.
     * @param {module:api/BeaconApi~beaconScanlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconScanlocations(beacons, callback) {
      let postBody = null;
      // verify the required parameter 'beacons' is set
      if (beacons === undefined || beacons === null) {
        throw new Error("Missing the required parameter 'beacons' when calling beaconScanlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'beacons': beacons
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/scanlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconSetuuid operation.
     * @callback module:api/BeaconApi~beaconSetuuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the identifier for the account's beacon region (for sign-in stations).
     * Allows the user to set the identifier for the account's beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
     * @param {String} id The custom region UUID.
     * @param {module:api/BeaconApi~beaconSetuuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconSetuuid(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling beaconSetuuid");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/setuuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconSilentregions operation.
     * @callback module:api/BeaconApi~beaconSilentregionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the beacon regions defined for silent tracking
     * @param {module:api/BeaconApi~beaconSilentregionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconSilentregions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/silentregions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconSilentsignin operation.
     * @callback module:api/BeaconApi~beaconSilentsigninCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign-in silently from the location specified by a beacon
     * @param {String} uuid The id of the region the user is in.
     * @param {module:api/BeaconApi~beaconSilentsigninCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconSilentsignin(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling beaconSilentsignin");
      }

      let pathParams = {
      };
      let queryParams = {
        'uuid': uuid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/silentsignin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconSilentsignout operation.
     * @callback module:api/BeaconApi~beaconSilentsignoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign-out silently from the location specified by a beacon
     * @param {String} uuid The id of the region the user has left.
     * @param {module:api/BeaconApi~beaconSilentsignoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconSilentsignout(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling beaconSilentsignout");
      }

      let pathParams = {
      };
      let queryParams = {
        'uuid': uuid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacon/silentsignout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
