/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Adhocquery service.
* @module api/AdhocqueryApi
* @version 1.0.0
*/
export default class AdhocqueryApi {

    /**
    * Constructs a new AdhocqueryApi. 
    * @alias module:api/AdhocqueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adhocqueryCheckexecution operation.
     * @callback module:api/AdhocqueryApi~adhocqueryCheckexecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of an ad hoc query execution
     * Allows the user to check whether a query has executed, viewable on the query's execution page.
     * @param {String} id The id of the ad hoc query execution to be checked.
     * @param {module:api/AdhocqueryApi~adhocqueryCheckexecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryCheckexecution(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocqueryCheckexecution");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/checkexecution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryDelete operation.
     * @callback module:api/AdhocqueryApi~adhocqueryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an ad hoc query
     * Allows the user to delete a previously created ad hoc query.
     * @param {String} id The id of the ad hoc query to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/AdhocqueryApi~adhocqueryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocqueryDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryExecute operation.
     * @callback module:api/AdhocqueryApi~adhocqueryExecuteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute an ad hoc query
     * Allows the user to execute an ad hoc query.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the query to execute.
     * @param {String} opts.query The query to execute.
     * @param {module:api/AdhocqueryApi~adhocqueryExecuteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryExecute(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/execute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryGet operation.
     * @callback module:api/AdhocqueryApi~adhocqueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of an ad hoc query
     * Allows the user to view an individual ad hoc query with its settings.
     * @param {String} id The id of the query to get.
     * @param {module:api/AdhocqueryApi~adhocqueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocqueryGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryGetschema operation.
     * @callback module:api/AdhocqueryApi~adhocqueryGetschemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the database schema for making ad hoc queries
     * Allows the user to view the list of schema for ad hoc queries.
     * @param {module:api/AdhocqueryApi~adhocqueryGetschemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryGetschema(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/getschema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryList operation.
     * @callback module:api/AdhocqueryApi~adhocqueryListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of saved ad hoc queries
     * Allows the user to view the full list of saved queries.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/AdhocqueryApi~adhocqueryListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryList(from, count, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling adhocqueryList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling adhocqueryList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryListexecutions operation.
     * @callback module:api/AdhocqueryApi~adhocqueryListexecutionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of ad hoc queries executions
     * Allows the user to view the full list of past query executions.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query The first record to return.
     * @param {module:api/AdhocqueryApi~adhocqueryListexecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryListexecutions(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling adhocqueryListexecutions");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling adhocqueryListexecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/listexecutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocquerySave operation.
     * @callback module:api/AdhocqueryApi~adhocquerySaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an ad hoc query
     * Allows the user to edit an ad hoc query.
     * @param {String} id The id of the query to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/AdhocqueryApi~adhocquerySaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocquerySave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocquerySave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryStopexecution operation.
     * @callback module:api/AdhocqueryApi~adhocqueryStopexecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the execution of an ad hoc query
     * Allows the user to halt the execution of a query that is currently being executed.
     * @param {String} id The id of the ad hoc query execution to be stopped.
     * @param {module:api/AdhocqueryApi~adhocqueryStopexecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryStopexecution(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocqueryStopexecution");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquery/stopexecution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
