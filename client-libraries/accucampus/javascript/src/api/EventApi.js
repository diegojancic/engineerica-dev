/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Event service.
* @module api/EventApi
* @version 1.0.0
*/
export default class EventApi {

    /**
    * Constructs a new EventApi. 
    * @alias module:api/EventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventChecksessions operation.
     * @callback module:api/EventApi~eventChecksessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an event's sessions according to their schedule
     * Allows the user to edit event sessions.
     * @param {String} eventid The id of the event to check.
     * @param {Boolean} autorepair True to automatically fix the invalid sessions.
     * @param {module:api/EventApi~eventChecksessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventChecksessions(eventid, autorepair, callback) {
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling eventChecksessions");
      }
      // verify the required parameter 'autorepair' is set
      if (autorepair === undefined || autorepair === null) {
        throw new Error("Missing the required parameter 'autorepair' when calling eventChecksessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'eventid': eventid,
        'autorepair': autorepair
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/checksessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventDelete operation.
     * @callback module:api/EventApi~eventDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a course
     * Allows the user to delete an existing course.
     * @param {String} id The id of the event to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/EventApi~eventDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventGet operation.
     * @callback module:api/EventApi~eventGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a course
     * Allows the user to view an individual course and its details.
     * @param {String} id The id of the event to get.
     * @param {module:api/EventApi~eventGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventGetsessionsbydate operation.
     * @callback module:api/EventApi~eventGetsessionsbydateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of courses by date
     * Allows the user to view a list of courses by date.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The location to filter the events.
     * @param {Date} opts._date The date to filter the events. Today will be used if this parameter is omitted.
     * @param {String} opts.type Type of event to list.
     * @param {module:api/EventApi~eventGetsessionsbydateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventGetsessionsbydate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'location': opts['location'],
        'date': opts['_date'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/getsessionsbydate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventList operation.
     * @callback module:api/EventApi~eventListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of courses
     * Allows the user to view the full list of courses.
     * @param {String} from The first record to return.
     * @param {String} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
     * @param {String} opts.termid Id of the term to list the events. Null to list all events.
     * @param {module:api/EventApi~eventListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling eventList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling eventList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'summaryonly': opts['summaryonly'],
        'termid': opts['termid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventListregistered operation.
     * @callback module:api/EventApi~eventListregisteredCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of courses I am registered to
     * Allows the user to view the courses they are registered to.
     * @param {String} from The first record to return.
     * @param {String} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
     * @param {String} opts.termid Id of the term to list the events. Null to list all events.
     * @param {module:api/EventApi~eventListregisteredCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventListregistered(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling eventListregistered");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling eventListregistered");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'summaryonly': opts['summaryonly'],
        'termid': opts['termid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/listregistered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSave operation.
     * @callback module:api/EventApi~eventSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a course
     * Allows the user to create or edit a course.
     * @param {String} id The id of the event to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/EventApi~eventSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSearchgroup operation.
     * @callback module:api/EventApi~eventSearchgroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for the available event groups
     * @param {String} query Query to search event groups.
     * @param {module:api/EventApi~eventSearchgroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventSearchgroup(query, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling eventSearchgroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/searchgroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
