/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Security service.
* @module api/SecurityApi
* @version 1.0.0
*/
export default class SecurityApi {

    /**
    * Constructs a new SecurityApi. 
    * @alias module:api/SecurityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the securityAssesspermission operation.
     * @callback module:api/SecurityApi~securityAssesspermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of users for a specific permission
     * @param {String} commandname Name of the action or command to get the roles.
     * @param {module:api/SecurityApi~securityAssesspermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityAssesspermission(commandname, callback) {
      let postBody = null;
      // verify the required parameter 'commandname' is set
      if (commandname === undefined || commandname === null) {
        throw new Error("Missing the required parameter 'commandname' when calling securityAssesspermission");
      }

      let pathParams = {
      };
      let queryParams = {
        'commandname': commandname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/security/assesspermission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAssessrole operation.
     * @callback module:api/SecurityApi~securityAssessroleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of permissions for a specific role
     * @param {String} roleid Role ID to list the effective permissions.
     * @param {module:api/SecurityApi~securityAssessroleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityAssessrole(roleid, callback) {
      let postBody = null;
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling securityAssessrole");
      }

      let pathParams = {
      };
      let queryParams = {
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/security/assessrole', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAssessscope operation.
     * @callback module:api/SecurityApi~securityAssessscopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of users for a specific user
     * @param {Object} opts Optional parameters
     * @param {String} opts.locationid Location ID to list the users with that scope.
     * @param {module:api/SecurityApi~securityAssessscopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityAssessscope(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'locationid': opts['locationid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/security/assessscope', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAssessuser operation.
     * @callback module:api/SecurityApi~securityAssessuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of permissions for a specific user
     * @param {String} userid User ID to list the effective permissions.
     * @param {module:api/SecurityApi~securityAssessuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityAssessuser(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling securityAssessuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/security/assessuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
