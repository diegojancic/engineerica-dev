/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Serviceassignment service.
* @module api/ServiceassignmentApi
* @version 1.0.0
*/
export default class ServiceassignmentApi {

    /**
    * Constructs a new ServiceassignmentApi. 
    * @alias module:api/ServiceassignmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serviceassignmentAddservice operation.
     * @callback module:api/ServiceassignmentApi~serviceassignmentAddserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a service in a specific location
     * Allows the user to enable a service in a location to which they are scoped.
     * @param {String} serviceid The id of the service to add.
     * @param {String} locationid The id of the location.
     * @param {module:api/ServiceassignmentApi~serviceassignmentAddserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceassignmentAddservice(serviceid, locationid, callback) {
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling serviceassignmentAddservice");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling serviceassignmentAddservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceid': serviceid,
        'locationid': locationid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceassignment/addservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceassignmentGetlocation operation.
     * @callback module:api/ServiceassignmentApi~serviceassignmentGetlocationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of services enabled for a specific location
     * Allows the user to view a list of services available in a location to which they are scoped.
     * @param {String} locationid The id of the location to get.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includegloballyavailable Specifies whether the services available globally must be returned or not.
     * @param {Boolean} opts.namefilter Filters the name of the services to return.
     * @param {Number} opts.count The max number of services to return.
     * @param {module:api/ServiceassignmentApi~serviceassignmentGetlocationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceassignmentGetlocation(locationid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling serviceassignmentGetlocation");
      }

      let pathParams = {
      };
      let queryParams = {
        'locationid': locationid,
        'includegloballyavailable': opts['includegloballyavailable'],
        'namefilter': opts['namefilter'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceassignment/getlocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceassignmentGetservice operation.
     * @callback module:api/ServiceassignmentApi~serviceassignmentGetserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of locations where a service is available
     * Allows the user to view a list of locations in which a service is available.
     * @param {String} serviceid The id of the service to get its locations.
     * @param {module:api/ServiceassignmentApi~serviceassignmentGetserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceassignmentGetservice(serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling serviceassignmentGetservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceassignment/getservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceassignmentRemoveservice operation.
     * @callback module:api/ServiceassignmentApi~serviceassignmentRemoveserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a service from a location
     * Allows the user to disable a service from a location to which they are scoped.
     * @param {String} serviceid The id of the service to remove.
     * @param {String} locationid The id of the location to remove the service from.
     * @param {module:api/ServiceassignmentApi~serviceassignmentRemoveserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceassignmentRemoveservice(serviceid, locationid, callback) {
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling serviceassignmentRemoveservice");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling serviceassignmentRemoveservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceid': serviceid,
        'locationid': locationid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceassignment/removeservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
