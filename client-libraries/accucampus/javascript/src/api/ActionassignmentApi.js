/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Actionassignment service.
* @module api/ActionassignmentApi
* @version 1.0.0
*/
export default class ActionassignmentApi {

    /**
    * Constructs a new ActionassignmentApi. 
    * @alias module:api/ActionassignmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionassignmentDelete operation.
     * @callback module:api/ActionassignmentApi~actionassignmentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an action item from an action plan
     * Allows a user to remove an action item from a user's action plan.
     * @param {String} id The id of the action assignment to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/ActionassignmentApi~actionassignmentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionassignmentDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentGet operation.
     * @callback module:api/ActionassignmentApi~actionassignmentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an action item assigned to a user
     * Allows the user to view an individual action item and its details, minus all the action item's updates.
     * @param {String} id The id of the action assignment to get.
     * @param {module:api/ActionassignmentApi~actionassignmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionassignmentGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentList operation.
     * @callback module:api/ActionassignmentApi~actionassignmentListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action items in a user's plan
     * Allows the user to view the list of all action items for a specified user.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.assignee The assignee's id to filter the assignments.
     * @param {Number} opts.status The status to filter the assignments.
     * @param {module:api/ActionassignmentApi~actionassignmentListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionassignmentList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionassignmentList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'assignee': opts['assignee'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentListhistory operation.
     * @callback module:api/ActionassignmentApi~actionassignmentListhistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the history of an action item assigned to a user
     * Allows the user to view an individual action plan and its details, including all the action plan's updates.
     * @param {String} actionassignment The action assignment's id whose history the user wants to get.
     * @param {module:api/ActionassignmentApi~actionassignmentListhistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentListhistory(actionassignment, callback) {
      let postBody = null;
      // verify the required parameter 'actionassignment' is set
      if (actionassignment === undefined || actionassignment === null) {
        throw new Error("Missing the required parameter 'actionassignment' when calling actionassignmentListhistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'actionassignment': actionassignment
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/listhistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentListmine operation.
     * @callback module:api/ActionassignmentApi~actionassignmentListmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public action assignments assigned to the logged user
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status The status to filter the assignments.
     * @param {module:api/ActionassignmentApi~actionassignmentListmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentListmine(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionassignmentListmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionassignmentListmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/listmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentListpublichistory operation.
     * @callback module:api/ActionassignmentApi~actionassignmentListpublichistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public action assignment history
     * @param {String} actionassignment The action assignment's id whose history the user wants to get.
     * @param {module:api/ActionassignmentApi~actionassignmentListpublichistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentListpublichistory(actionassignment, callback) {
      let postBody = null;
      // verify the required parameter 'actionassignment' is set
      if (actionassignment === undefined || actionassignment === null) {
        throw new Error("Missing the required parameter 'actionassignment' when calling actionassignmentListpublichistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'actionassignment': actionassignment
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/listpublichistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentMarkcomplete operation.
     * @callback module:api/ActionassignmentApi~actionassignmentMarkcompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk complete action items
     * Allows the user to bulk complete action items.
     * @param {String} item The action item to assign.
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignee The assignee of the item.
     * @param {String} opts.group The group to assing the item.
     * @param {String} opts.notes The assignment's notes.
     * @param {module:api/ActionassignmentApi~actionassignmentMarkcompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentMarkcomplete(item, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling actionassignmentMarkcomplete");
      }

      let pathParams = {
      };
      let queryParams = {
        'assignee': opts['assignee'],
        'group': opts['group'],
        'item': item,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/markcomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentSave operation.
     * @callback module:api/ActionassignmentApi~actionassignmentSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an action item to a user's action plan
     * Allows the user to edit or assign an action item to a user
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/ActionassignmentApi~actionassignmentSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentSave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentSavehistory operation.
     * @callback module:api/ActionassignmentApi~actionassignmentSavehistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an action item assigned to a user
     * Allows the user to update or mark an action item as complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/ActionassignmentApi~actionassignmentSavehistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentSavehistory(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignment/savehistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
