/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Attendancelog service.
* @module api/AttendancelogApi
* @version 1.0.0
*/
export default class AttendancelogApi {

    /**
    * Constructs a new AttendancelogApi. 
    * @alias module:api/AttendancelogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attendancelogDelete operation.
     * @callback module:api/AttendancelogApi~attendancelogDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attendance log
     * Allows the user to delete an existing attendance log.
     * @param {String} id The id of the attendance log to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/AttendancelogApi~attendancelogDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogGet operation.
     * @callback module:api/AttendancelogApi~attendancelogGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an attendance log
     * Allows the user to view an individual attendance log and its details.
     * @param {String} id The id of the attendance log to get.
     * @param {module:api/AttendancelogApi~attendancelogGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogGetchangehistory operation.
     * @callback module:api/AttendancelogApi~attendancelogGetchangehistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an attendance log's swipe history
     * Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
     * @param {String} id The id of the attendance log to get.
     * @param {module:api/AttendancelogApi~attendancelogGetchangehistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogGetchangehistory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogGetchangehistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/getchangehistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogList operation.
     * @callback module:api/AttendancelogApi~attendancelogListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of attendance logs
     * Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
     * @param {String} opts.userid The user ID of the user to get the logs.
     * @param {module:api/AttendancelogApi~attendancelogListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendancelogList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendancelogList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'filter': opts['filter'],
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogListmine operation.
     * @callback module:api/AttendancelogApi~attendancelogListmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the attendance logs of the current user
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
     * @param {module:api/AttendancelogApi~attendancelogListmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogListmine(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendancelogListmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendancelogListmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/listmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogListstaff operation.
     * @callback module:api/AttendancelogApi~attendancelogListstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the attendance logs that the current user is involved in as staff
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
     * @param {module:api/AttendancelogApi~attendancelogListstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogListstaff(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendancelogListstaff");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendancelogListstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/liststaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogSave operation.
     * @callback module:api/AttendancelogApi~attendancelogSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an attendance log
     * Allows the user to create or edit an attendance log.
     * @param {String} id The id of the room to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/AttendancelogApi~attendancelogSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogSignout operation.
     * @callback module:api/AttendancelogApi~attendancelogSignoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign out an attendance log
     * Allows the user to sign out am attendance log from the Who's In page.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the attendance log to sign-out.
     * @param {String} opts.location The id of the location to filter the users to sign out.
     * @param {String} opts.event The id of the event to filter the users to sign out.
     * @param {Date} opts.datetime Specifies the date and time when the specified logs have to be signed out.
     * @param {module:api/AttendancelogApi~attendancelogSignoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogSignout(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'location': opts['location'],
        'event': opts['event'],
        'datetime': opts['datetime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/signout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogWhosin operation.
     * @callback module:api/AttendancelogApi~attendancelogWhosinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View who's in a location
     * Allows the user to view the Who's In page and view all users who are logged into locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The id of the location to search for users that are in.
     * @param {String} opts.event The id of the event to search for users that are in.
     * @param {String} opts.sorting Field to sort by. Either first-name, last-name or sign-in-time.
     * @param {String} opts.roles The comma-separated list of ids of the roles to search for users that are in.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {String} opts.extensions A JSON array containing the extension filters (i.e [{name: 'nametofilter', value: 'valuetofilter'}]).
     * @param {Boolean} opts._export True to export the results as CSV
     * @param {module:api/AttendancelogApi~attendancelogWhosinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogWhosin(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendancelogWhosin");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendancelogWhosin");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'location': opts['location'],
        'event': opts['event'],
        'sorting': opts['sorting'],
        'roles': opts['roles'],
        'photosize': opts['photosize'],
        'extensions': opts['extensions'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelog/whosin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
