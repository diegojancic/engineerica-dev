/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Appointment service.
* @module api/AppointmentApi
* @version 1.0.0
*/
export default class AppointmentApi {

    /**
    * Constructs a new AppointmentApi. 
    * @alias module:api/AppointmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appointmentCancel operation.
     * @callback module:api/AppointmentApi~appointmentCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an appointment
     * Allows the user to cancel an appointment.
     * @param {String} id The id of the appointment to cancel.
     * @param {module:api/AppointmentApi~appointmentCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentCancel(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentCancel");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/cancel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentCheckisvalid operation.
     * @callback module:api/AppointmentApi~appointmentCheckisvalidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if an appointment is valid or not
     * @param {String} id The id of the appointment to check.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.editing Specifies whether the check is for a new appointment or an existing one.
     * @param {module:api/AppointmentApi~appointmentCheckisvalidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentCheckisvalid(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentCheckisvalid");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'editing': opts['editing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/checkisvalid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentEditanyway operation.
     * @callback module:api/AppointmentApi~appointmentEditanywayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an appointment even if it breaks activated rules
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     * @param {String} id The id of the appointment to edit.
     * @param {String} attendee The id of the attendee involved in the appointment.
     * @param {String} staff The id of the staff member involved in the appointment.
     * @param {String} location The id of the location where the appointment will take place.
     * @param {Date} start The appointment's start date & time.
     * @param {Date} end The appointment's end date & time.
     * @param {Object} opts Optional parameters
     * @param {String} opts.term The id of the term when the appointment takes place.
     * @param {String} opts.event The id of the event of the appointment.
     * @param {String} opts.services Comma-separated string containing the ids of the services of the appointment.
     * @param {String} opts.notes The notes of the appointment.
     * @param {module:api/AppointmentApi~appointmentEditanywayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentEditanyway(id, attendee, staff, location, start, end, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentEditanyway");
      }
      // verify the required parameter 'attendee' is set
      if (attendee === undefined || attendee === null) {
        throw new Error("Missing the required parameter 'attendee' when calling appointmentEditanyway");
      }
      // verify the required parameter 'staff' is set
      if (staff === undefined || staff === null) {
        throw new Error("Missing the required parameter 'staff' when calling appointmentEditanyway");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling appointmentEditanyway");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling appointmentEditanyway");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling appointmentEditanyway");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'term': opts['term'],
        'attendee': attendee,
        'staff': staff,
        'location': location,
        'start': start,
        'end': end,
        'event': opts['event'],
        'services': opts['services'],
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/editanyway', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentEditpresence operation.
     * @callback module:api/AppointmentApi~appointmentEditpresenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit the no-show status of an appointment
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     * @param {String} id The id of the appointment to edit its presence.
     * @param {Boolean} showedup Specifies whether the attendee was showed-up or not in the appointment.
     * @param {module:api/AppointmentApi~appointmentEditpresenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentEditpresence(id, showedup, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentEditpresence");
      }
      // verify the required parameter 'showedup' is set
      if (showedup === undefined || showedup === null) {
        throw new Error("Missing the required parameter 'showedup' when calling appointmentEditpresence");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'showedup': showedup
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/editpresence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentFindallstaffslots operation.
     * @callback module:api/AppointmentApi~appointmentFindallstaffslotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds all staff available slots filtered by service, date, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {String} serviceids CSV list of the service Ids to filter by.
     * @param {String} locationid The id of the service to filter by.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/AppointmentApi~appointmentFindallstaffslotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentFindallstaffslots(starttime, endtime, serviceids, locationid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling appointmentFindallstaffslots");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling appointmentFindallstaffslots");
      }
      // verify the required parameter 'serviceids' is set
      if (serviceids === undefined || serviceids === null) {
        throw new Error("Missing the required parameter 'serviceids' when calling appointmentFindallstaffslots");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling appointmentFindallstaffslots");
      }

      let pathParams = {
      };
      let queryParams = {
        'starttime': starttime,
        'endtime': endtime,
        'serviceids': serviceids,
        'eventid': opts['eventid'],
        'locationid': locationid,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/findallstaffslots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentFindslots operation.
     * @callback module:api/AppointmentApi~appointmentFindslotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds available slots filtered by service, date, staff, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param {String} staffid The id of the staff to filter by.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {String} serviceids CSV list of the service Ids to filter by.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the service to filter by.
     * @param {module:api/AppointmentApi~appointmentFindslotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentFindslots(staffid, starttime, endtime, serviceids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'staffid' is set
      if (staffid === undefined || staffid === null) {
        throw new Error("Missing the required parameter 'staffid' when calling appointmentFindslots");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling appointmentFindslots");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling appointmentFindslots");
      }
      // verify the required parameter 'serviceids' is set
      if (serviceids === undefined || serviceids === null) {
        throw new Error("Missing the required parameter 'serviceids' when calling appointmentFindslots");
      }

      let pathParams = {
      };
      let queryParams = {
        'staffid': staffid,
        'starttime': starttime,
        'endtime': endtime,
        'serviceids': serviceids,
        'eventid': opts['eventid'],
        'locationid': opts['locationid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/findslots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentFindstaff operation.
     * @callback module:api/AppointmentApi~appointmentFindstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds staff available by service, date, event, etc
     * Allows the user to view staff availability when creating an appointment.
     * @param {String} serviceids CSV list of the service ids to filter by.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the service to filter by.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/AppointmentApi~appointmentFindstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentFindstaff(serviceids, starttime, endtime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceids' is set
      if (serviceids === undefined || serviceids === null) {
        throw new Error("Missing the required parameter 'serviceids' when calling appointmentFindstaff");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling appointmentFindstaff");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling appointmentFindstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceids': serviceids,
        'eventid': opts['eventid'],
        'starttime': starttime,
        'endtime': endtime,
        'locationid': opts['locationid'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/findstaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentGet operation.
     * @callback module:api/AppointmentApi~appointmentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an appointment
     * Allows the user to view an individual appointment and its details.
     * @param {String} id The id of the appointment to get.
     * @param {module:api/AppointmentApi~appointmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentGetcurrent operation.
     * @callback module:api/AppointmentApi~appointmentGetcurrentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {String} location The id of the location where the user wants to sign-in.
     * @param {module:api/AppointmentApi~appointmentGetcurrentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentGetcurrent(station, user, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling appointmentGetcurrent");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling appointmentGetcurrent");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling appointmentGetcurrent");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/getcurrent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentGetlocations operation.
     * @callback module:api/AppointmentApi~appointmentGetlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find locations where a service is available
     * Allows the user to search for appointment availability by location or service.
     * @param {String} serviceid The id of the service to get its locations.
     * @param {module:api/AppointmentApi~appointmentGetlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentGetlocations(serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling appointmentGetlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/getlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentList operation.
     * @callback module:api/AppointmentApi~appointmentListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of appointments
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startdate The start date of the period to filter the appointments.
     * @param {Date} opts.enddate The end date of the period to filter the appointments.
     * @param {String} opts.userid The attendee id to filter the appointments.
     * @param {module:api/AppointmentApi~appointmentListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling appointmentList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling appointmentList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentListmine operation.
     * @callback module:api/AppointmentApi~appointmentListmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all my upcoming appointments
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start If specified, only appointments that start after the specified date will be returned.
     * @param {Date} opts.modifiedafter If specified, only appointments modified after the specified date will be returned.
     * @param {module:api/AppointmentApi~appointmentListmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentListmine(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'modifiedafter': opts['modifiedafter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/listmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentListupcoming operation.
     * @callback module:api/AppointmentApi~appointmentListupcomingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of all my upcoming appointments
     * Allows the user to view all of their own upcoming appointments.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start If specified, only appointments that start after the specified date will be returned.
     * @param {Date} opts.modifiedafter If specified, only appointments modified after the specified date will be returned.
     * @param {module:api/AppointmentApi~appointmentListupcomingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentListupcoming(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'modifiedafter': opts['modifiedafter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/listupcoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentRescheduleoutlook operation.
     * @callback module:api/AppointmentApi~appointmentRescheduleoutlookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reschedule an appointment from MS Outlook.
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     * @param {String} id The id of the appointment to edit.
     * @param {Date} start The appointment's start date & time.
     * @param {Date} end The appointment's end date & time.
     * @param {module:api/AppointmentApi~appointmentRescheduleoutlookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentRescheduleoutlook(id, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentRescheduleoutlook");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling appointmentRescheduleoutlook");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling appointmentRescheduleoutlook");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'start': start,
        'end': end
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/rescheduleoutlook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentRestore operation.
     * @callback module:api/AppointmentApi~appointmentRestoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore an appointment
     * Allows the user to restore a canceled appointment.
     * @param {String} id The id of the appointment to restore.
     * @param {module:api/AppointmentApi~appointmentRestoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentRestore(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentRestore");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/restore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentRestoreanyway operation.
     * @callback module:api/AppointmentApi~appointmentRestoreanywayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore an appointment even if it breaks activated rules
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     * @param {String} id The id of the appointment to restore.
     * @param {module:api/AppointmentApi~appointmentRestoreanywayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentRestoreanyway(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentRestoreanyway");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/restoreanyway', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentSave operation.
     * @callback module:api/AppointmentApi~appointmentSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule an appointment
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     * @param {String} id The id of the appointment to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/AppointmentApi~appointmentSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentSetasvalid operation.
     * @callback module:api/AppointmentApi~appointmentSetasvalidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule an appointment even if it breaks activated rules
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     * @param {String} id The id of the appointment to set as valid.
     * @param {module:api/AppointmentApi~appointmentSetasvalidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentSetasvalid(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentSetasvalid");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/setasvalid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentSuggestlocations operation.
     * @callback module:api/AppointmentApi~appointmentSuggestlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the locations with most appointments
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     * @param {module:api/AppointmentApi~appointmentSuggestlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentSuggestlocations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/suggestlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentSuggestservices operation.
     * @callback module:api/AppointmentApi~appointmentSuggestservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the services with most appointments
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     * @param {module:api/AppointmentApi~appointmentSuggestservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentSuggestservices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/suggestservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentVoid operation.
     * @callback module:api/AppointmentApi~appointmentVoidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Void an appointment
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student's restrictions.
     * @param {String} id The id of the appointment to cancel.
     * @param {module:api/AppointmentApi~appointmentVoidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentVoid(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentVoid");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/void', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
