/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Socialgroup service.
* @module api/SocialgroupApi
* @version 1.0.0
*/
export default class SocialgroupApi {

    /**
    * Constructs a new SocialgroupApi. 
    * @alias module:api/SocialgroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the socialgroupAddmembers operation.
     * @callback module:api/SocialgroupApi~socialgroupAddmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds new members to a group (which the user must own already)
     * @param {String} id ID of the group to add members to.
     * @param {String} userids Csv list of user Ids to add.
     * @param {module:api/SocialgroupApi~socialgroupAddmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupAddmembers(id, userids, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupAddmembers");
      }
      // verify the required parameter 'userids' is set
      if (userids === undefined || userids === null) {
        throw new Error("Missing the required parameter 'userids' when calling socialgroupAddmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'userids': userids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroup/addmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupDelete operation.
     * @callback module:api/SocialgroupApi~socialgroupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a group
     * @param {String} id ID of the group to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/SocialgroupApi~socialgroupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroup/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupList operation.
     * @callback module:api/SocialgroupApi~socialgroupListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the groups the current user is in
     * @param {module:api/SocialgroupApi~socialgroupListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroup/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupListmembers operation.
     * @callback module:api/SocialgroupApi~socialgroupListmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the members of a group
     * @param {String} id ID of the group to list members.
     * @param {module:api/SocialgroupApi~socialgroupListmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupListmembers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupListmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroup/listmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupRemovemembers operation.
     * @callback module:api/SocialgroupApi~socialgroupRemovemembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes members from a group (which the user must own already)
     * @param {String} id ID of the group to remove members from.
     * @param {String} userids Csv list of user Ids to remove.
     * @param {module:api/SocialgroupApi~socialgroupRemovemembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupRemovemembers(id, userids, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupRemovemembers");
      }
      // verify the required parameter 'userids' is set
      if (userids === undefined || userids === null) {
        throw new Error("Missing the required parameter 'userids' when calling socialgroupRemovemembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'userids': userids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroup/removemembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupRemovemyself operation.
     * @callback module:api/SocialgroupApi~socialgroupRemovemyselfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes myself from an existent group
     * @param {String} id ID of the group to remove me from.
     * @param {module:api/SocialgroupApi~socialgroupRemovemyselfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupRemovemyself(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupRemovemyself");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroup/removemyself', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupSave operation.
     * @callback module:api/SocialgroupApi~socialgroupSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a new group
     * @param {String} id ID of the group to update. Leave blank to create new.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/SocialgroupApi~socialgroupSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroup/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
