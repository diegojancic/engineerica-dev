/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Userprofile service.
* @module api/UserprofileApi
* @version 1.0.0
*/
export default class UserprofileApi {

    /**
    * Constructs a new UserprofileApi. 
    * @alias module:api/UserprofileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userprofileDelete operation.
     * @callback module:api/UserprofileApi~userprofileDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user profile
     * Allows the user to delete a profile from the list of profiles that they have permission to edit.
     * @param {String} id The id of the user profile to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/UserprofileApi~userprofileDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofileDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userprofileDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofile/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofileGet operation.
     * @callback module:api/UserprofileApi~userprofileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a specific user profile
     * Allows the user to view individual user profiles and their details, provided they have permission to view that profile.
     * @param {String} id The id of the profile question set.
     * @param {module:api/UserprofileApi~userprofileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofileGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userprofileGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofile/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofileGetallview operation.
     * @callback module:api/UserprofileApi~userprofileGetallviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows the profile for a specific (or current) user, based on each profile questionnaire questions.
     * Allows the user to view a profile for a user, provided they have permission to view that user and profile.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the user to view, or empty for current user.
     * @param {module:api/UserprofileApi~userprofileGetallviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofileGetallview(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofile/getallview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofileList operation.
     * @callback module:api/UserprofileApi~userprofileListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the list of user profiles
     * Allows the user to view the full list of profiles that they have permission to view.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The first record to return.
     * @param {Number} opts.count The max number of records to return.
     * @param {module:api/UserprofileApi~userprofileListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofileList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofile/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofileListquestions operation.
     * @callback module:api/UserprofileApi~userprofileListquestionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all the available user questions
     * Allows the user to view the list of questions in a profile that they have permission to view.
     * @param {module:api/UserprofileApi~userprofileListquestionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofileListquestions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofile/listquestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofilePreparestats operation.
     * @callback module:api/UserprofileApi~userprofilePreparestatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the statistics of a user group
     * Allows the user to view the demographic statistics of a user group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.params The ID of the group, specified as 'group=...'
     * @param {module:api/UserprofileApi~userprofilePreparestatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofilePreparestats(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofile/preparestats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofileSave operation.
     * @callback module:api/UserprofileApi~userprofileSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit user profile questions
     * Allows the user to create or edit a user profile.
     * @param {String} id The id of the profile question set.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/UserprofileApi~userprofileSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofileSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userprofileSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofile/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofileSaveanswers operation.
     * @callback module:api/UserprofileApi~userprofileSaveanswersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.
     * Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/UserprofileApi~userprofileSaveanswersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofileSaveanswers(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofile/saveanswers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
