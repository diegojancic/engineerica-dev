/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Deadendrecording service.
* @module api/DeadendrecordingApi
* @version 1.0.0
*/
export default class DeadendrecordingApi {

    /**
    * Constructs a new DeadendrecordingApi. 
    * @alias module:api/DeadendrecordingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deadendrecordingDelete operation.
     * @callback module:api/DeadendrecordingApi~deadendrecordingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dead-end record group
     * Allows the user to delete a dead end record group.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DeadendrecordingApi~deadendrecordingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deadendrecordingDelete(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deadendrecording/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deadendrecordingList operation.
     * @callback module:api/DeadendrecordingApi~deadendrecordingListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the recorded dead ends, if enabled
     * Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
     * @param {module:api/DeadendrecordingApi~deadendrecordingListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deadendrecordingList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deadendrecording/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deadendrecordingListcomments operation.
     * @callback module:api/DeadendrecordingApi~deadendrecordingListcommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the comments for a specific dead end
     * Allows the user to view the comments made on dead end sessions.
     * @param {String} hierarchykey The hierarchy key of the record to get the feedback.
     * @param {module:api/DeadendrecordingApi~deadendrecordingListcommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deadendrecordingListcomments(hierarchykey, callback) {
      let postBody = null;
      // verify the required parameter 'hierarchykey' is set
      if (hierarchykey === undefined || hierarchykey === null) {
        throw new Error("Missing the required parameter 'hierarchykey' when calling deadendrecordingListcomments");
      }

      let pathParams = {
      };
      let queryParams = {
        'hierarchykey': hierarchykey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deadendrecording/listcomments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deadendrecordingSave operation.
     * @callback module:api/DeadendrecordingApi~deadendrecordingSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a dead-end record
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DeadendrecordingApi~deadendrecordingSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deadendrecordingSave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deadendrecording/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
