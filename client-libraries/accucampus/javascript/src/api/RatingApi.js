/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Rating service.
* @module api/RatingApi
* @version 1.0.0
*/
export default class RatingApi {

    /**
    * Constructs a new RatingApi. 
    * @alias module:api/RatingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ratingFlag operation.
     * @callback module:api/RatingApi~ratingFlagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flags one rating for moderation
     * @param {String} id The rating to flag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.comment Comment why should this should be removed.
     * @param {module:api/RatingApi~ratingFlagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingFlag(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ratingFlag");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'comment': opts['comment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/flag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingFlagcomment operation.
     * @callback module:api/RatingApi~ratingFlagcommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flags one comment for moderation
     * @param {String} id The comment to flag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.comment Comment why should this should be removed.
     * @param {module:api/RatingApi~ratingFlagcommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingFlagcomment(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ratingFlagcomment");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'comment': opts['comment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/flagcomment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingGet operation.
     * @callback module:api/RatingApi~ratingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rating for one or more entities
     * @param {String} type The entity type to get the rating.
     * @param {String} entityids List of ids to get the ratings.
     * @param {module:api/RatingApi~ratingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingGet(type, entityids, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling ratingGet");
      }
      // verify the required parameter 'entityids' is set
      if (entityids === undefined || entityids === null) {
        throw new Error("Missing the required parameter 'entityids' when calling ratingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'entityids': entityids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingGetall operation.
     * @callback module:api/RatingApi~ratingGetallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the full ratings and comments for a specific entity
     * @param {String} type The entity type to get the rating.
     * @param {String} entityid Id of the entity to get the ratings.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mostrecentfirst True to show most recent first, otherwise most helpful first.
     * @param {module:api/RatingApi~ratingGetallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingGetall(type, entityid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling ratingGetall");
      }
      // verify the required parameter 'entityid' is set
      if (entityid === undefined || entityid === null) {
        throw new Error("Missing the required parameter 'entityid' when calling ratingGetall");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'entityid': entityid,
        'mostrecentfirst': opts['mostrecentfirst']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/getall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingGetcomments operation.
     * @callback module:api/RatingApi~ratingGetcommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the comments for a rating
     * @param {String} ratingid The ID of the rating to get all comments.
     * @param {module:api/RatingApi~ratingGetcommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingGetcomments(ratingid, callback) {
      let postBody = null;
      // verify the required parameter 'ratingid' is set
      if (ratingid === undefined || ratingid === null) {
        throw new Error("Missing the required parameter 'ratingid' when calling ratingGetcomments");
      }

      let pathParams = {
      };
      let queryParams = {
        'ratingid': ratingid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/getcomments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingGetpending operation.
     * @callback module:api/RatingApi~ratingGetpendingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets info of pre-saved and pre-approved ratings
     * @param {String} getgroup The ID of the group of pending ratings to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.rateid Rate this before returning.
     * @param {Number} opts.rateval The value used to rate the item specified in rateid.
     * @param {module:api/RatingApi~ratingGetpendingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingGetpending(getgroup, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'getgroup' is set
      if (getgroup === undefined || getgroup === null) {
        throw new Error("Missing the required parameter 'getgroup' when calling ratingGetpending");
      }

      let pathParams = {
      };
      let queryParams = {
        'getgroup': getgroup,
        'rateid': opts['rateid'],
        'rateval': opts['rateval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/getpending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingGetpendingmoderation operation.
     * @callback module:api/RatingApi~ratingGetpendingmoderationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows a list of the ratings and comments that are pending for moderation
     * Allows the user to view the list of pending ratings and comments.
     * @param {module:api/RatingApi~ratingGetpendingmoderationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingGetpendingmoderation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/getpendingmoderation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingModerate operation.
     * @callback module:api/RatingApi~ratingModerateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the user to accept or reject a comment
     * Allows the user to approve or reject a comment or rating.
     * @param {String} type Either 'rating' or 'comment' depending on what you want to moderate.
     * @param {String} id Id of the rating or comment, as specified in type.
     * @param {Boolean} approve True to approve, false to reject.
     * @param {module:api/RatingApi~ratingModerateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingModerate(type, id, approve, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling ratingModerate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ratingModerate");
      }
      // verify the required parameter 'approve' is set
      if (approve === undefined || approve === null) {
        throw new Error("Missing the required parameter 'approve' when calling ratingModerate");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'id': id,
        'approve': approve
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/moderate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingPostcomment operation.
     * @callback module:api/RatingApi~ratingPostcommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Posts a comments for in a rating
     * @param {String} ratingid The ID of the rating to post the comment.
     * @param {String} comment Text of the comment to post.
     * @param {Boolean} annonymous True to post the comment annonymously.
     * @param {module:api/RatingApi~ratingPostcommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingPostcomment(ratingid, comment, annonymous, callback) {
      let postBody = null;
      // verify the required parameter 'ratingid' is set
      if (ratingid === undefined || ratingid === null) {
        throw new Error("Missing the required parameter 'ratingid' when calling ratingPostcomment");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling ratingPostcomment");
      }
      // verify the required parameter 'annonymous' is set
      if (annonymous === undefined || annonymous === null) {
        throw new Error("Missing the required parameter 'annonymous' when calling ratingPostcomment");
      }

      let pathParams = {
      };
      let queryParams = {
        'ratingid': ratingid,
        'comment': comment,
        'annonymous': annonymous
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/postcomment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingRate operation.
     * @callback module:api/RatingApi~ratingRateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rates one entity
     * @param {String} type The entity type to rate.
     * @param {String} entityid Id of the entity to rate.
     * @param {Boolean} annonymous Whether to post as annonymous.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.value Value from 0 to 100 with the rating.
     * @param {String} opts.comment Comment associated with this review. Comment can be updated later on another request too.
     * @param {Boolean} opts.updatecomment Whether to update the comments. Defaults to true.
     * @param {module:api/RatingApi~ratingRateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingRate(type, entityid, annonymous, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling ratingRate");
      }
      // verify the required parameter 'entityid' is set
      if (entityid === undefined || entityid === null) {
        throw new Error("Missing the required parameter 'entityid' when calling ratingRate");
      }
      // verify the required parameter 'annonymous' is set
      if (annonymous === undefined || annonymous === null) {
        throw new Error("Missing the required parameter 'annonymous' when calling ratingRate");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'entityid': entityid,
        'value': opts['value'],
        'annonymous': annonymous,
        'comment': opts['comment'],
        'updatecomment': opts['updatecomment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/rate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingRatepending operation.
     * @callback module:api/RatingApi~ratingRatependingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rates a pre-saved and pre-approved entity
     * @param {String} group The ID of the group of with pre-approved ratings.
     * @param {Boolean} annonymous Whether to post as annonymous.
     * @param {Object} opts Optional parameters
     * @param {String} opts.rateid Rate this before returning.
     * @param {Number} opts.value Value from 0 to 100 with the rating.
     * @param {String} opts.comment Comment associated with this review. Comment can be updated later on another request too.
     * @param {Boolean} opts.updatecomment Whether to update the comments. Defaults to true.
     * @param {module:api/RatingApi~ratingRatependingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingRatepending(group, annonymous, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling ratingRatepending");
      }
      // verify the required parameter 'annonymous' is set
      if (annonymous === undefined || annonymous === null) {
        throw new Error("Missing the required parameter 'annonymous' when calling ratingRatepending");
      }

      let pathParams = {
      };
      let queryParams = {
        'group': group,
        'rateid': opts['rateid'],
        'value': opts['value'],
        'annonymous': annonymous,
        'comment': opts['comment'],
        'updatecomment': opts['updatecomment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/ratepending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingVote operation.
     * @callback module:api/RatingApi~ratingVoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Votes up or down a rating
     * @param {String} ratingid The ID of the rating to vote on.
     * @param {Number} vote 1 to vote up, -1 to vote down.
     * @param {module:api/RatingApi~ratingVoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingVote(ratingid, vote, callback) {
      let postBody = null;
      // verify the required parameter 'ratingid' is set
      if (ratingid === undefined || ratingid === null) {
        throw new Error("Missing the required parameter 'ratingid' when calling ratingVote");
      }
      // verify the required parameter 'vote' is set
      if (vote === undefined || vote === null) {
        throw new Error("Missing the required parameter 'vote' when calling ratingVote");
      }

      let pathParams = {
      };
      let queryParams = {
        'ratingid': ratingid,
        'vote': vote
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rating/vote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
