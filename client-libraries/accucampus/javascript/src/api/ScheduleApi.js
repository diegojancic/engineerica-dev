/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Schedule service.
* @module api/ScheduleApi
* @version 1.0.0
*/
export default class ScheduleApi {

    /**
    * Constructs a new ScheduleApi. 
    * @alias module:api/ScheduleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scheduleDelete operation.
     * @callback module:api/ScheduleApi~scheduleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a schedule slot
     * Allows the user to delete a schedule slot from another user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/ScheduleApi~scheduleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleDelete(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleDeletemine operation.
     * @callback module:api/ScheduleApi~scheduleDeletemineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific block from a user's own schedule
     * Allows the user to delete a schedule block from their own availability.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/ScheduleApi~scheduleDeletemineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleDeletemine(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/deletemine', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleEnable operation.
     * @callback module:api/ScheduleApi~scheduleEnableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable the schedule for a specific person
     * Allows the user to enable or disable a schedule for another user.
     * @param {String} userid The id of the user to enable or disable the schedule.
     * @param {Boolean} enable True to enable schedules, false to disable.
     * @param {module:api/ScheduleApi~scheduleEnableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleEnable(userid, enable, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling scheduleEnable");
      }
      // verify the required parameter 'enable' is set
      if (enable === undefined || enable === null) {
        throw new Error("Missing the required parameter 'enable' when calling scheduleEnable");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'enable': enable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/enable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleEnablemine operation.
     * @callback module:api/ScheduleApi~scheduleEnablemineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable current user's schedule
     * Allows the user to enable or disable a schedule for himself.
     * @param {Boolean} enable True to enable schedules, false to disable.
     * @param {module:api/ScheduleApi~scheduleEnablemineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleEnablemine(enable, callback) {
      let postBody = null;
      // verify the required parameter 'enable' is set
      if (enable === undefined || enable === null) {
        throw new Error("Missing the required parameter 'enable' when calling scheduleEnablemine");
      }

      let pathParams = {
      };
      let queryParams = {
        'enable': enable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/enablemine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleFindallstaffslots operation.
     * @callback module:api/ScheduleApi~scheduleFindallstaffslotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available schedule slots by service, event, date
     * Allows users to search available slots.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.staffid The id of the staff to filter by.
     * @param {String} opts.serviceids CSV list of the service Ids to filter by.
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the location to filter by.
     * @param {String} opts.staffroleids CSV list of the staff member role ids to filter by.
     * @param {String} opts.availablefor The specific availability type to filter by.
     * @param {module:api/ScheduleApi~scheduleFindallstaffslotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleFindallstaffslots(starttime, endtime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling scheduleFindallstaffslots");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling scheduleFindallstaffslots");
      }

      let pathParams = {
      };
      let queryParams = {
        'starttime': starttime,
        'endtime': endtime,
        'staffid': opts['staffid'],
        'serviceids': opts['serviceids'],
        'eventid': opts['eventid'],
        'locationid': opts['locationid'],
        'staffroleids': opts['staffroleids'],
        'availablefor': opts['availablefor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/findallstaffslots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleFindslots operation.
     * @callback module:api/ScheduleApi~scheduleFindslotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available schedule slots by service, event, date and/or staff
     * Allows users to search available slots when making appointments.
     * @param {String} staffid The id of the staff to filter by.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.serviceids CSV list of the service Ids to filter by.
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the service to filter by.
     * @param {String} opts.availablefor The specific availability type to filter by.
     * @param {module:api/ScheduleApi~scheduleFindslotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleFindslots(staffid, starttime, endtime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'staffid' is set
      if (staffid === undefined || staffid === null) {
        throw new Error("Missing the required parameter 'staffid' when calling scheduleFindslots");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling scheduleFindslots");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling scheduleFindslots");
      }

      let pathParams = {
      };
      let queryParams = {
        'staffid': staffid,
        'starttime': starttime,
        'endtime': endtime,
        'serviceids': opts['serviceids'],
        'eventid': opts['eventid'],
        'locationid': opts['locationid'],
        'availablefor': opts['availablefor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/findslots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleFindstaffavail operation.
     * @callback module:api/ScheduleApi~scheduleFindstaffavailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available staff members slots by service, event, and/or date
     * Allows users to search available staff.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.serviceids CSV list of the service ids to filter by.
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the service to filter by.
     * @param {String} opts.staffroleids CSV list of the staff member role ids to filter by.
     * @param {String} opts.availablefor Filter slots by a specific availability type.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/ScheduleApi~scheduleFindstaffavailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleFindstaffavail(starttime, endtime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling scheduleFindstaffavail");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling scheduleFindstaffavail");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceids': opts['serviceids'],
        'eventid': opts['eventid'],
        'starttime': starttime,
        'endtime': endtime,
        'locationid': opts['locationid'],
        'staffroleids': opts['staffroleids'],
        'availablefor': opts['availablefor'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/findstaffavail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleGet operation.
     * @callback module:api/ScheduleApi~scheduleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a specific schedule slot
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     * @param {String} scheduleid The id of the schedule.
     * @param {module:api/ScheduleApi~scheduleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleGet(scheduleid, callback) {
      let postBody = null;
      // verify the required parameter 'scheduleid' is set
      if (scheduleid === undefined || scheduleid === null) {
        throw new Error("Missing the required parameter 'scheduleid' when calling scheduleGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'scheduleid': scheduleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleGetmine operation.
     * @callback module:api/ScheduleApi~scheduleGetmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a specific schedule block, for current user
     * Allows the user to view the details of their own schedule shifts.
     * @param {String} scheduleid The id of the schedule.
     * @param {module:api/ScheduleApi~scheduleGetmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleGetmine(scheduleid, callback) {
      let postBody = null;
      // verify the required parameter 'scheduleid' is set
      if (scheduleid === undefined || scheduleid === null) {
        throw new Error("Missing the required parameter 'scheduleid' when calling scheduleGetmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'scheduleid': scheduleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/getmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleGetstaff operation.
     * @callback module:api/ScheduleApi~scheduleGetstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of schedule information of a specified person
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     * @param {String} userid The id of the user to get info.
     * @param {module:api/ScheduleApi~scheduleGetstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleGetstaff(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling scheduleGetstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/getstaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleGetstaffmine operation.
     * @callback module:api/ScheduleApi~scheduleGetstaffmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View current user's schedule information
     * Allows the user to view their own schedule.
     * @param {module:api/ScheduleApi~scheduleGetstaffmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleGetstaffmine(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/getstaffmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleMyofftimes operation.
     * @callback module:api/ScheduleApi~scheduleMyofftimesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View current user's schedule exceptions
     * Allows the user to view their own schedule exceptions.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includedeleted If true the deleted offtimes are also returned.
     * @param {Boolean} opts.onlyupcoming If true then only upcoming offtimes are returned.
     * @param {Date} opts.modifiedafter If specified, only offtimes modified after the specified date will be returned.
     * @param {module:api/ScheduleApi~scheduleMyofftimesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleMyofftimes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includedeleted': opts['includedeleted'],
        'onlyupcoming': opts['onlyupcoming'],
        'modifiedafter': opts['modifiedafter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/myofftimes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleSave operation.
     * @callback module:api/ScheduleApi~scheduleSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a schedule slot
     * Allows the user to create or edit a schedule slot of another user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/ScheduleApi~scheduleSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleSave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleSavemine operation.
     * @callback module:api/ScheduleApi~scheduleSavemineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a block in current user's schedule
     * Allows the user to create or edit a schedule shift in their own availability.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/ScheduleApi~scheduleSavemineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleSavemine(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/savemine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
