/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Advancedstation service.
* @module api/AdvancedstationApi
* @version 1.0.0
*/
export default class AdvancedstationApi {

    /**
    * Constructs a new AdvancedstationApi. 
    * @alias module:api/AdvancedstationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the advancedstationCheckunknownuser operation.
     * @callback module:api/AdvancedstationApi~advancedstationCheckunknownuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether the user is known by the system.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {String} location The id of the location the user picked.
     * @param {module:api/AdvancedstationApi~advancedstationCheckunknownuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationCheckunknownuser(station, user, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationCheckunknownuser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationCheckunknownuser");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationCheckunknownuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/checkunknownuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationCheckuserrole operation.
     * @callback module:api/AdvancedstationApi~advancedstationCheckuserroleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether the user is a staff member, an attendee or both.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {String} location The id of the location the user picked.
     * @param {module:api/AdvancedstationApi~advancedstationCheckuserroleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationCheckuserrole(station, user, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationCheckuserrole");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationCheckuserrole");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationCheckuserrole");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/checkuserrole', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationCreateuser operation.
     * @callback module:api/AdvancedstationApi~advancedstationCreateuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user via a sign-in station.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user to create.
     * @param {String} location The id of the location the user picked.
     * @param {String} firstname The first name of the user to create.
     * @param {String} lastname The last name of the user to create.
     * @param {String} email The email of the user to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.middlename The middle name of the user to create.
     * @param {module:api/AdvancedstationApi~advancedstationCreateuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationCreateuser(station, user, location, firstname, lastname, email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationCreateuser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationCreateuser");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationCreateuser");
      }
      // verify the required parameter 'firstname' is set
      if (firstname === undefined || firstname === null) {
        throw new Error("Missing the required parameter 'firstname' when calling advancedstationCreateuser");
      }
      // verify the required parameter 'lastname' is set
      if (lastname === undefined || lastname === null) {
        throw new Error("Missing the required parameter 'lastname' when calling advancedstationCreateuser");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling advancedstationCreateuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user,
        'location': location,
        'firstname': firstname,
        'middlename': opts['middlename'],
        'lastname': lastname,
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/createuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationGetevents operation.
     * @callback module:api/AdvancedstationApi~advancedstationGeteventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the courses available for a specific location and a specific student.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} location The id of the location the student picked.
     * @param {String} user The card of the user.
     * @param {module:api/AdvancedstationApi~advancedstationGeteventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationGetevents(station, location, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationGetevents");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationGetevents");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationGetevents");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'location': location,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/getevents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationGetinfo operation.
     * @callback module:api/AdvancedstationApi~advancedstationGetinfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the info to display in the sign-in station by it's ID.
     * @param {String} id The id of the sign-in station to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.event The id of the event (or session), to override the scheduled one.
     * @param {module:api/AdvancedstationApi~advancedstationGetinfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationGetinfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advancedstationGetinfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'event': opts['event']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/getinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationGetlocations operation.
     * @callback module:api/AdvancedstationApi~advancedstationGetlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the locations available in a sign-in station.
     * @param {String} station The id of the sign-in station whose locations have to be returned.
     * @param {String} user The card of the user.
     * @param {module:api/AdvancedstationApi~advancedstationGetlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationGetlocations(station, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationGetlocations");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationGetlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/getlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationGetlogstaff operation.
     * @callback module:api/AdvancedstationApi~advancedstationGetlogstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} attendancelog The id of the attendance log to filter the staff members.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/AdvancedstationApi~advancedstationGetlogstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationGetlogstaff(station, attendancelog, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationGetlogstaff");
      }
      // verify the required parameter 'attendancelog' is set
      if (attendancelog === undefined || attendancelog === null) {
        throw new Error("Missing the required parameter 'attendancelog' when calling advancedstationGetlogstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'attendancelog': attendancelog,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/getlogstaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationGetroles operation.
     * @callback module:api/AdvancedstationApi~advancedstationGetrolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the user roles of the user trying to sign-in.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} signinrole Specifies how the user is signing-in.
     * @param {String} user The card of the user.
     * @param {String} location The id of the location the user picked.
     * @param {module:api/AdvancedstationApi~advancedstationGetrolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationGetroles(station, signinrole, user, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationGetroles");
      }
      // verify the required parameter 'signinrole' is set
      if (signinrole === undefined || signinrole === null) {
        throw new Error("Missing the required parameter 'signinrole' when calling advancedstationGetroles");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationGetroles");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationGetroles");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'signinrole': signinrole,
        'user': user,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/getroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationGetservices operation.
     * @callback module:api/AdvancedstationApi~advancedstationGetservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the services available for a specific location.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} location The id of the location the student picked.
     * @param {String} user The card of the user.
     * @param {module:api/AdvancedstationApi~advancedstationGetservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationGetservices(station, location, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationGetservices");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationGetservices");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationGetservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'location': location,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/getservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationGetstaff operation.
     * @callback module:api/AdvancedstationApi~advancedstationGetstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the staff/tutors available for a specific location, course and service.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} locationid The id of the location the student picked.
     * @param {String} user The card of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.services The list of services selected by the user, in JSON format.
     * @param {String} opts.eventid The ID of the event selected.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/AdvancedstationApi~advancedstationGetstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationGetstaff(station, locationid, user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationGetstaff");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling advancedstationGetstaff");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationGetstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'locationid': locationid,
        'user': user,
        'services': opts['services'],
        'eventid': opts['eventid'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/getstaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationIssignedin operation.
     * @callback module:api/AdvancedstationApi~advancedstationIssignedinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets whether a user is signed-in or not.
     * @param {String} station The id of the sign-in station to get.
     * @param {Date} time The date and time of the swipe.
     * @param {String} user The card of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The id of the location the user picked.
     * @param {module:api/AdvancedstationApi~advancedstationIssignedinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationIssignedin(station, time, user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationIssignedin");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling advancedstationIssignedin");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationIssignedin");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'time': time,
        'user': user,
        'location': opts['location']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstation/issignedin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
