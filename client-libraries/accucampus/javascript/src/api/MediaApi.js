/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Media service.
* @module api/MediaApi
* @version 1.0.0
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mediaCheckin operation.
     * @callback module:api/MediaApi~mediaCheckinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check in media item
     * Allows the user to check in a media item.
     * @param {String} media The id of the media item to checkin.
     * @param {Date} checkindate The checkout date.
     * @param {Object} opts Optional parameters
     * @param {String} opts.notes The notes of the checkout.
     * @param {module:api/MediaApi~mediaCheckinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaCheckin(media, checkindate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'media' is set
      if (media === undefined || media === null) {
        throw new Error("Missing the required parameter 'media' when calling mediaCheckin");
      }
      // verify the required parameter 'checkindate' is set
      if (checkindate === undefined || checkindate === null) {
        throw new Error("Missing the required parameter 'checkindate' when calling mediaCheckin");
      }

      let pathParams = {
      };
      let queryParams = {
        'media': media,
        'checkindate': checkindate,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/checkin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaCheckout operation.
     * @callback module:api/MediaApi~mediaCheckoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check out media item
     * Allows the user to check out a media item.
     * @param {String} media The id of the media item to checkout.
     * @param {String} user The id of the user that is checking the item out.
     * @param {Date} checkoutdate The checkout date.
     * @param {Date} duedate The date when the checkout is due.
     * @param {Object} opts Optional parameters
     * @param {String} opts.staff The id of the staff member related to the checkout.
     * @param {String} opts.event The id of the event related to the checkout.
     * @param {String} opts.notes The notes of the checkout.
     * @param {module:api/MediaApi~mediaCheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaCheckout(media, user, checkoutdate, duedate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'media' is set
      if (media === undefined || media === null) {
        throw new Error("Missing the required parameter 'media' when calling mediaCheckout");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling mediaCheckout");
      }
      // verify the required parameter 'checkoutdate' is set
      if (checkoutdate === undefined || checkoutdate === null) {
        throw new Error("Missing the required parameter 'checkoutdate' when calling mediaCheckout");
      }
      // verify the required parameter 'duedate' is set
      if (duedate === undefined || duedate === null) {
        throw new Error("Missing the required parameter 'duedate' when calling mediaCheckout");
      }

      let pathParams = {
      };
      let queryParams = {
        'media': media,
        'user': user,
        'staff': opts['staff'],
        'event': opts['event'],
        'checkoutdate': checkoutdate,
        'duedate': duedate,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/checkout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaCheckoutlist operation.
     * @callback module:api/MediaApi~mediaCheckoutlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of past media checkouts
     * Allows the user to view a list of all past checkouts
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.media Used to filter the checkouts of a specific media item.
     * @param {String} opts.user Used to filter the checkouts made by a specific user.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/MediaApi~mediaCheckoutlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaCheckoutlist(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling mediaCheckoutlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling mediaCheckoutlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'media': opts['media'],
        'user': opts['user'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/checkoutlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaDelete operation.
     * @callback module:api/MediaApi~mediaDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a media item
     * Allows the user to delete an existing media item.
     * @param {String} id The id of the media item to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/MediaApi~mediaDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediaDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaDeletecheckoutlog operation.
     * @callback module:api/MediaApi~mediaDeletecheckoutlogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a media checkout log
     * Allows the user to delete a media item's checkout log.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/MediaApi~mediaDeletecheckoutlogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaDeletecheckoutlog(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/deletecheckoutlog', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGet operation.
     * @callback module:api/MediaApi~mediaGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a media item
     * Allows the user to view an individual media item and its details.
     * @param {String} id The id of the media item to get.
     * @param {module:api/MediaApi~mediaGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediaGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGetbycode operation.
     * @callback module:api/MediaApi~mediaGetbycodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search media item by unique code
     * Allows the user to search for media items by their unique code.
     * @param {String} code The code of the media item to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The location where to look for the media item.
     * @param {module:api/MediaApi~mediaGetbycodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaGetbycode(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling mediaGetbycode");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'location': opts['location']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/getbycode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGetcheckout operation.
     * @callback module:api/MediaApi~mediaGetcheckoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a media item checkout information
     * Allows the user to view a media item's checkout information.
     * @param {String} id The id of the media item whose checkout information has to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/MediaApi~mediaGetcheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaGetcheckout(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediaGetcheckout");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/getcheckout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGetcheckoutlog operation.
     * @callback module:api/MediaApi~mediaGetcheckoutlogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a media checkout log
     * Allows the user to view a media item's checkout history.
     * @param {String} id The id of the media item whose checkout information has to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/MediaApi~mediaGetcheckoutlogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaGetcheckoutlog(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediaGetcheckoutlog");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/getcheckoutlog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaList operation.
     * @callback module:api/MediaApi~mediaListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of media items
     * Allows the user to view the list of all media items tied to locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Used to filter the media items by their checkout status (0 = CheckedIn, 1 = CheckedOut, Unspecified = All).
     * @param {String} opts.user Used to filter the media items that are checked-out by a specific user.
     * @param {module:api/MediaApi~mediaListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling mediaList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling mediaList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'status': opts['status'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaSave operation.
     * @callback module:api/MediaApi~mediaSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a media item
     * Allows the user to create or edit a media item.
     * @param {String} id The id of the media item save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/MediaApi~mediaSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediaSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
