/**
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Interaction service.
* @module api/InteractionApi
* @version 1.0.0
*/
export default class InteractionApi {

    /**
    * Constructs a new InteractionApi. 
    * @alias module:api/InteractionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the interactionDelete operation.
     * @callback module:api/InteractionApi~interactionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an interaction
     * @param {String} id The id of the interaction to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/InteractionApi~interactionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling interactionDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interaction/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionFeed operation.
     * @callback module:api/InteractionApi~interactionFeedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the interactions feed
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startdate If set, only interactions that happened after this date are returned.
     * @param {Boolean} opts._public Specifies whether to return public or private interactions.
     * @param {String} opts.contexttype The type of the context of the interactions to return.
     * @param {String} opts.contextid The id of the context of the interactions to return.
     * @param {String} opts.types The  comma separated types of the interactions to return.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {Boolean} opts.showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
     * @param {Boolean} opts.orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly.
     * @param {module:api/InteractionApi~interactionFeedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionFeed(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling interactionFeed");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling interactionFeed");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'startdate': opts['startdate'],
        'public': opts['_public'],
        'contexttype': opts['contexttype'],
        'contextid': opts['contextid'],
        'types': opts['types'],
        'photosize': opts['photosize'],
        'showdefaultphoto': opts['showdefaultphoto'],
        'orderdescending': opts['orderdescending']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interaction/feed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionGet operation.
     * @callback module:api/InteractionApi~interactionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View an interaction
     * @param {String} id The id of the interaction.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/InteractionApi~interactionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling interactionGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'thumbnailmediasize': opts['thumbnailmediasize'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interaction/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionListprivatesummary operation.
     * @callback module:api/InteractionApi~interactionListprivatesummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user's latest private interactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {Boolean} opts.showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
     * @param {module:api/InteractionApi~interactionListprivatesummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionListprivatesummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'photosize': opts['photosize'],
        'showdefaultphoto': opts['showdefaultphoto']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interaction/listprivatesummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionSave operation.
     * @callback module:api/InteractionApi~interactionSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save an interaction
     * @param {String} id The id of the interaction to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/InteractionApi~interactionSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling interactionSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interaction/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
