{
  "openapi": "3.0.1",
  "info": {
    "title": "AccuCampus OpenAPI 3",
    "description": "",
    "version": "1.0.0",
    "x-logo": {
      "url": "https://c1.engineerica.com/images/logos-png/h59/accucampus.png",
      "altText": "AccuCampus"
    }
  },
  "servers": [
    {
      "url": "https://accucampus.net:443/api/v1"
    }
  ],
  "paths": {
    "/doc": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get the documentation",
        "description": "Retrieves the list of actions available in the system.",
        "operationId": "doc",
        "parameters": [
          {
            "name": "excludeanonymous",
            "in": "query",
            "description": "If true it excludes the anonymous actions from the returned list.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/feature/list": {
      "get": {
        "tags": [
          "feature"
        ],
        "summary": "Lists the available features.",
        "operationId": "featureList",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/login": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Login",
        "operationId": "login",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "The account domain to login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The username (email) of the user to login as.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password of the user to login as.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "The authentication method. Valid values are 'token' and 'cookie'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rememberme",
            "in": "query",
            "description": "If true then the session will not expire.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/search": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Search",
        "operationId": "search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page to show, zero-based.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/search/getentities": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Get the information of the entities that can be searched",
        "operationId": "searchGetentities",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/listtimezones": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Lists the available timezones",
        "operationId": "listtimezones",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/my/ianatimezone": {
      "get": {
        "tags": [
          "my"
        ],
        "summary": "Gets the current time zone's iana name",
        "operationId": "myIanatimezone",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/captcha/getimage": {
      "get": {
        "tags": [
          "captcha"
        ],
        "summary": "Gets a captcha image that the user must complete to do certain requests.",
        "operationId": "captchaGetimage",
        "parameters": [
          {
            "name": "captchatoken",
            "in": "query",
            "description": "The captcha token or ID returned by the captcha.getchallenge action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/captcha/getchallenge": {
      "get": {
        "tags": [
          "captcha"
        ],
        "summary": "Gets a captcha challenge that the user must complete to do certain requests.",
        "operationId": "captchaGetchallenge",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/menu/getitems": {
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Gets the items on the menu",
        "operationId": "menuGetitems",
        "parameters": [
          {
            "name": "menuid",
            "in": "query",
            "description": "The Id of the menu to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/texttoimage": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Generates a dynamic image from text",
        "operationId": "texttoimage",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "The text to convert to an image, use double pipes (||) as a new line.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fontcolor",
            "in": "query",
            "description": "The color of the text, in hex format, without the #.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fontsize",
            "in": "query",
            "description": "The size of the text, in points.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Either vertical or horizontal, default horizontal.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "The image width in pixels (or height if the direction is vertical).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/qrlogin/get": {
      "get": {
        "tags": [
          "qrlogin"
        ],
        "summary": "Gets an image of a QR token",
        "operationId": "qrloginGet",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/qrlogin/login": {
      "get": {
        "tags": [
          "qrlogin"
        ],
        "summary": "Login",
        "operationId": "qrloginLogin",
        "parameters": [
          {
            "name": "onetimetoken",
            "in": "query",
            "description": "The token read from the QR code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/appshare/getphone": {
      "get": {
        "tags": [
          "appshare"
        ],
        "summary": "Gets the phone number of the current user",
        "operationId": "appshareGetphone",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appshare/sendtext": {
      "get": {
        "tags": [
          "appshare"
        ],
        "summary": "Sends an SMS with the link to the app",
        "operationId": "appshareSendtext",
        "parameters": [
          {
            "name": "phonenumber",
            "in": "query",
            "description": "Phone number to where to send the link. Leave empty to the number on file.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sso/generatekey": {
      "get": {
        "tags": [
          "sso"
        ],
        "summary": "Generate/reset single sign on access key.",
        "description": "Allows the user to generate or reset the access key for single sign-on.",
        "operationId": "ssoGeneratekey",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sso/savesettings": {
      "post": {
        "tags": [
          "sso"
        ],
        "summary": "Edit single sign-on settings.",
        "description": "Allows the user to edit settings for single sign-on.",
        "operationId": "ssoSavesettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "enabled",
                  "expireswheninactive"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the single sign on is enabled or not."
                  },
                  "expireswheninactive": {
                    "type": "boolean",
                    "description": "Specifies whether the sessions should expire when inactive."
                  },
                  "redirecturl": {
                    "type": "string",
                    "description": "The url the user gets redirected when the session is closed or expires."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sso/getsettings": {
      "get": {
        "tags": [
          "sso"
        ],
        "summary": "View single sign on settings.",
        "description": "Allows the user to view settings for single sign-on.",
        "operationId": "ssoGetsettings",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sso/issuetoken": {
      "get": {
        "tags": [
          "sso"
        ],
        "summary": "Issue single sign-on token",
        "operationId": "ssoIssuetoken",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "The single sign-on key of the account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The email of the user to sign-on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expires",
            "in": "query",
            "description": "Specifies whether the session should expire when inactive.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/license/getcurrent": {
      "get": {
        "tags": [
          "license"
        ],
        "summary": "Gets the current license information",
        "operationId": "licenseGetcurrent",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/license/renew": {
      "get": {
        "tags": [
          "license"
        ],
        "summary": "Contact Engineerica in order to renew the AccuCampus subscription",
        "description": "Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.",
        "operationId": "licenseRenew",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The e-mail of the user sending the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phonenumber",
            "in": "query",
            "description": "The phone number of the user sending the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobtitle",
            "in": "query",
            "description": "The job title of the user sending the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "institution",
            "in": "query",
            "description": "The institution of the user sending the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comments",
            "in": "query",
            "description": "Comments entered by the user sending the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/license/acceptagreement": {
      "get": {
        "tags": [
          "license"
        ],
        "summary": "Accept the license agreement",
        "operationId": "licenseAcceptagreement",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/license/getagreementstatus": {
      "get": {
        "tags": [
          "license"
        ],
        "summary": "Check if license agreement has been accepted",
        "operationId": "licenseGetagreementstatus",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/my/rights": {
      "get": {
        "tags": [
          "my"
        ],
        "summary": "Gets the list of actions the user can execute.",
        "operationId": "myRights",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/my/profile": {
      "get": {
        "tags": [
          "my"
        ],
        "summary": "Gets the logged in user information.",
        "operationId": "myProfile",
        "parameters": [
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/my/saveprofile": {
      "post": {
        "tags": [
          "my"
        ],
        "summary": "Updates logged user's profile information",
        "operationId": "mySaveprofile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "firstname",
                  "lastname",
                  "email"
                ],
                "properties": {
                  "firstname": {
                    "type": "string",
                    "description": "The first name of the user."
                  },
                  "middlename": {
                    "type": "string",
                    "description": "The middle name of the user."
                  },
                  "lastname": {
                    "type": "string",
                    "description": "The last name of the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of the user."
                  },
                  "mobilephonenumber": {
                    "type": "string",
                    "description": "The mobile phone number of the user."
                  },
                  "homephonenumber": {
                    "type": "string",
                    "description": "The home phone number of the user."
                  },
                  "workphonenumber": {
                    "type": "string",
                    "description": "The work phone number of the user."
                  },
                  "streetaddress": {
                    "type": "string",
                    "description": "The street address of the user."
                  },
                  "city": {
                    "type": "string",
                    "description": "The city of the user."
                  },
                  "state": {
                    "type": "string",
                    "description": "The state of the user."
                  },
                  "zipcode": {
                    "type": "string",
                    "description": "The zip code of the user."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the user."
                  },
                  "company": {
                    "type": "string",
                    "description": "The company of the user."
                  },
                  "photoid": {
                    "type": "string",
                    "description": "The ID of a photo uploaded using user.loadphoto.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/my/account": {
      "get": {
        "tags": [
          "my"
        ],
        "summary": "Gets the logged in user account.",
        "operationId": "myAccount",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/user/list": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "View a list of users",
        "description": "Allows the user to view the full list of users and is based on role permissions.",
        "operationId": "userList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "The id of the role to filter users by, or empty to return all users.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "onlywithoutcard",
            "in": "query",
            "description": "If is 1 then only the users without a card are returned, otherwise all users are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Search and view details of a user",
        "description": "Allows the user to search and view a user and their details.",
        "operationId": "userGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create or edit a user",
        "description": "Allows the user to create or edit a user.",
        "operationId": "userSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "firstname",
                  "lastname",
                  "email"
                ],
                "properties": {
                  "firstname": {
                    "type": "string",
                    "description": "The first name of the user."
                  },
                  "middlename": {
                    "type": "string",
                    "description": "The middle name of the user."
                  },
                  "lastname": {
                    "type": "string",
                    "description": "The last name of the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of the user."
                  },
                  "mobilephonenumber": {
                    "type": "string",
                    "description": "The mobile phone number of the user."
                  },
                  "homephonenumber": {
                    "type": "string",
                    "description": "The home phone number of the user."
                  },
                  "workphonenumber": {
                    "type": "string",
                    "description": "The work phone number of the user."
                  },
                  "streetaddress": {
                    "type": "string",
                    "description": "The street address of the user."
                  },
                  "city": {
                    "type": "string",
                    "description": "The city of the user."
                  },
                  "state": {
                    "type": "string",
                    "description": "The state of the user."
                  },
                  "zipcode": {
                    "type": "string",
                    "description": "The zip code of the user."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the user."
                  },
                  "company": {
                    "type": "string",
                    "description": "The company of the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password of the user."
                  },
                  "roles": {
                    "type": "string",
                    "description": "Comma separated list of roles of the user."
                  },
                  "assigncard": {
                    "type": "string",
                    "description": "True if a new card has to be assigned to the user, otherwise false."
                  },
                  "cardnumber": {
                    "type": "string",
                    "description": "The card number that has to be assigned to the user."
                  },
                  "more": {
                    "type": "string",
                    "description": "Custom data of the user"
                  },
                  "photoid": {
                    "type": "string",
                    "description": "The ID of a photo uploaded using user.loadphoto.",
                    "format": "uuid"
                  },
                  "active": {
                    "type": "boolean",
                    "description": "The status of the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user",
        "description": "Allows the user to delete a user.",
        "operationId": "userDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/user/getbycard": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Search user by card number",
        "description": "Allows the user to search for a user by their card number.",
        "operationId": "userGetbycard",
        "parameters": [
          {
            "name": "card",
            "in": "query",
            "description": "The card number of the user to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/user/changepwd": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Change user's own password",
        "description": "Allows the user to change their own password.",
        "operationId": "userChangepwd",
        "parameters": [
          {
            "name": "oldpass",
            "in": "query",
            "description": "The old password of the authenticated user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "newpass",
            "in": "query",
            "description": "The new password of the authenticated user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/user/changepwdbyreq": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Changes the user password using a change password request id",
        "operationId": "userChangepwdbyreq",
        "parameters": [
          {
            "name": "changereq",
            "in": "query",
            "description": "The change password request ID sent by email to the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newpass",
            "in": "query",
            "description": "The new password of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/user/requestpwdchange": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Requests a password change",
        "operationId": "userRequestpwdchange",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "The domain of the account where the user exists.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/user/savepwdchange": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Send email to the specified user(s) to set/change their passwords",
        "description": "Allows the user to trigger an email to another user asking them to set or change their password.",
        "operationId": "userSavepwdchange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "users": {
                    "type": "string",
                    "description": "A JSON array containing the ids of the users whose passwords have to be set."
                  },
                  "role": {
                    "type": "string",
                    "description": "A specific role whose users passwords have to be set.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/user/loadphoto": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Upload a photo for a specific user",
        "description": "Allows the user to upload a photo for a user.",
        "operationId": "userLoadphoto",
        "parameters": [
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The local name of the uploaded file. For later reference.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in 'user.save'.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automatch",
            "in": "query",
            "description": "Set this to true to find the specific user based on the file name. ",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/user/findsimilar": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Finds similar users to prevent duplicates",
        "description": "Allows the user to be warned if a user they are creating has the same card number as another user.",
        "operationId": "userFindsimilar",
        "parameters": [
          {
            "name": "currentid",
            "in": "query",
            "description": "The id of the current user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "phonenumber",
            "in": "query",
            "description": "A phone number to search for similar users.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cardnumber",
            "in": "query",
            "description": "A card number to search for similar users.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/user/movedata": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Move data between users",
        "description": "Allows administrators to move data between users.",
        "operationId": "userMovedata",
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "description": "The id of the user that is the source of the data.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "destination",
            "in": "query",
            "description": "The id of the user that is the destination of the data.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/role/list": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Show a list of roles",
        "operationId": "roleList",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name of the role.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/client/get": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Get client",
        "operationId": "clientGet",
        "parameters": [
          {
            "name": "client",
            "in": "query",
            "description": "The unique id of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientname",
            "in": "query",
            "description": "The custom name of the client.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/client/save": {
      "post": {
        "tags": [
          "client"
        ],
        "summary": "Saves a client",
        "operationId": "clientSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "client",
                  "clientname"
                ],
                "properties": {
                  "client": {
                    "type": "string",
                    "description": "The id of the client to save.",
                    "format": "uuid"
                  },
                  "clientname": {
                    "type": "string",
                    "description": "The name of the client."
                  },
                  "pushtoken": {
                    "type": "string",
                    "description": "The push token of the client."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/client/list": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Gets the clients of the specified conference",
        "operationId": "clientList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/client/sendmessage": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Send a message to a client",
        "operationId": "clientSendmessage",
        "parameters": [
          {
            "name": "uniqueclientid",
            "in": "query",
            "description": "The unique id of the client.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "message",
            "in": "query",
            "description": "The body of the message to send.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/bgjob/getstatus": {
      "get": {
        "tags": [
          "bgjob"
        ],
        "summary": "Get background job status",
        "operationId": "bgjobGetstatus",
        "parameters": [
          {
            "name": "jobid",
            "in": "query",
            "description": "The ID of the job to get the status. 10 most recent will be returned if not specified.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobtype",
            "in": "query",
            "description": "The job type to filter by.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/setting/get": {
      "get": {
        "tags": [
          "setting"
        ],
        "summary": "Get settings for the account or the specified scope",
        "operationId": "settingGet",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "The account domain, in case of reading settings annonymously.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keys",
            "in": "query",
            "description": "The option keys to get values for. Enter multiple separated by comma.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of the settings to get.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/setting/save": {
      "post": {
        "tags": [
          "setting"
        ],
        "summary": "Save settings for the account or the specified scope",
        "description": "Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.",
        "operationId": "settingSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "optionsjson"
                ],
                "properties": {
                  "optionsjson": {
                    "type": "string",
                    "description": "The options to save in the account, in JSON format."
                  },
                  "scope": {
                    "type": "string",
                    "description": "The scope of the settings to save."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/setting/addlogo": {
      "get": {
        "tags": [
          "setting"
        ],
        "summary": "Add a logo to the account",
        "description": "Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.",
        "operationId": "settingAddlogo",
        "parameters": [
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The original filename, needed to process the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/setting/viewgeneral": {
      "get": {
        "tags": [
          "setting"
        ],
        "summary": "View general settings for the account",
        "description": "Allows the user to view the settings' general section.",
        "operationId": "settingViewgeneral",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionlog/list": {
      "get": {
        "tags": [
          "actionlog"
        ],
        "summary": "View a list of users action logs",
        "description": "Allows the user to view the audit logs for the account.",
        "operationId": "actionlogList",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "The id of the user whose action logs have to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the logs.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the logs.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "resource",
            "in": "query",
            "description": "The resource to filter the action logs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionfilter",
            "in": "query",
            "description": "The action to filter the action logs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "argument",
            "in": "query",
            "description": "The id of the entity that was the argument of the executed action.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/version": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get current version information",
        "operationId": "version",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/changelog": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get the application change log",
        "operationId": "changelog",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/easylogin/addbgimage": {
      "get": {
        "tags": [
          "easylogin"
        ],
        "summary": "Adds background image for the login",
        "description": "Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.",
        "operationId": "easyloginAddbgimage",
        "parameters": [
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The original filename, needed to process the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/export": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Export AccuCampus data",
        "description": "Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.",
        "operationId": "export",
        "parameters": [
          {
            "name": "exporttype",
            "in": "query",
            "description": "What to export.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exportformat",
            "in": "query",
            "description": "The format of the resulting file. Valid types are CSV, HTML, XLS.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Pipe separated filters for the export, eg: aaa=val|bbb=val|...",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/export/listtypes": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "Lists available export types",
        "operationId": "exportListtypes",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/location/{id}": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "Search and view details of a location",
        "description": "Allows the user to search and view an individual location and its details.",
        "operationId": "locationGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the location to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "location"
        ],
        "summary": "Delete a location",
        "description": "Allows the user to delete an existing location.",
        "operationId": "locationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the location to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "location"
        ],
        "summary": "Create or edit a location",
        "description": "Allows the user to create or edit a location.",
        "operationId": "locationSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the location save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the location."
                  },
                  "categoryid": {
                    "type": "string",
                    "description": "The id of location's LocationCategory.",
                    "format": "uuid"
                  },
                  "categoryname": {
                    "type": "string",
                    "description": "The name of the location's LocationCategory."
                  },
                  "streetaddress": {
                    "type": "string",
                    "description": "The street address of the location."
                  },
                  "latitude": {
                    "type": "number",
                    "description": "The latitude of the location.",
                    "format": "double"
                  },
                  "longitude": {
                    "type": "number",
                    "description": "The longitude of the location.",
                    "format": "double"
                  },
                  "websiteurl": {
                    "type": "string",
                    "description": "The web site url of the location."
                  },
                  "email": {
                    "type": "string",
                    "description": "The e-mail address of the location."
                  },
                  "moreinformation": {
                    "type": "string",
                    "description": "More information relevant to the location."
                  },
                  "isrestricted": {
                    "type": "boolean",
                    "description": "Whether this location has the access restricted."
                  },
                  "accessroles": {
                    "type": "string",
                    "description": "The roles that can view the info associated to this location, in JSON format."
                  },
                  "order": {
                    "type": "integer",
                    "description": "The order of the location.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/location/list": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "View a list of locations",
        "description": "Allows the user to view the list of all locations to which they are scoped.",
        "operationId": "locationList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locations",
            "in": "query",
            "description": "The comma-separated list containing the ids of the locations to list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortbygroup",
            "in": "query",
            "description": "True to list locations sorted by the 'Located In' property. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/riskmodel/{id}": {
      "delete": {
        "tags": [
          "riskmodel"
        ],
        "summary": "Delete a risk assessment model",
        "description": "Allows the user to delete a previously created risk assessment model.",
        "operationId": "riskmodelDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the risk assessment model to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "riskmodel"
        ],
        "summary": "View details of a risk assessment model",
        "description": "Allows the user to view an individual risk assessment model and its details.",
        "operationId": "riskmodelGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the risk assessment model to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "riskmodel"
        ],
        "summary": "Create or edit a risk assessment model",
        "description": "Allows the user to create or edit a risk assessment model.",
        "operationId": "riskmodelSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the department save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "termprecedences"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the department."
                  },
                  "excludedfeatures": {
                    "type": "string",
                    "description": "The features to exclude from the model."
                  },
                  "excludedusers": {
                    "type": "string",
                    "description": "The criteria to exclude users from the model."
                  },
                  "newfeatures": {
                    "type": "string",
                    "description": "The new features for this model."
                  },
                  "termprecedences": {
                    "type": "string",
                    "description": "The terms precedences for this model."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/riskmodel/list": {
      "get": {
        "tags": [
          "riskmodel"
        ],
        "summary": "View a list of risk assessment models",
        "description": "Allows the user to view the full list of risk assessment models.",
        "operationId": "riskmodelList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/riskmodel/getscore": {
      "get": {
        "tags": [
          "riskmodel"
        ],
        "summary": "View the risk score for a specific user",
        "description": "Allows the user to view the risk score of another user.",
        "operationId": "riskmodelGetscore",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to get the risk score.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/riskmodel/refresh": {
      "get": {
        "tags": [
          "riskmodel"
        ],
        "summary": "Refresh the information used in a risk assessment model",
        "description": "Allows the user to refresh a risk assessment model.",
        "operationId": "riskmodelRefresh",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the risk assessment model whose information has to be refreshed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/riskmodel/process": {
      "get": {
        "tags": [
          "riskmodel"
        ],
        "summary": "Process a risk assessment model",
        "description": "Allows the user to process a risk assessment model once it has been created.",
        "operationId": "riskmodelProcess",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the risk assessment model to process.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/riskmodel/predict": {
      "get": {
        "tags": [
          "riskmodel"
        ],
        "summary": "Predict risk based on an assessment model",
        "description": "Allows a user to process a risk prediction from a risk assessment model that has processed.",
        "operationId": "riskmodelPredict",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the assessment model to use in order to predict risk.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/riskmodel/checkanalysis": {
      "get": {
        "tags": [
          "riskmodel"
        ],
        "summary": "Check the status of the analysis of a specified risk assessment model",
        "description": "Allows the user to check the status of a risk assessment model as it is being processed.",
        "operationId": "riskmodelCheckanalysis",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the risk assessment model whose analysis status has to be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/riskmodel/termprecedences": {
      "get": {
        "tags": [
          "riskmodel"
        ],
        "summary": "View all default term precedences",
        "description": "Allows the user to view the default term precedences used in a model.",
        "operationId": "riskmodelTermprecedences",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/adhocquery/{id}": {
      "delete": {
        "tags": [
          "adhocquery"
        ],
        "summary": "Delete an ad hoc query",
        "description": "Allows the user to delete a previously created ad hoc query.",
        "operationId": "adhocqueryDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ad hoc query to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "adhocquery"
        ],
        "summary": "View details of an ad hoc query",
        "description": "Allows the user to view an individual ad hoc query with its settings.",
        "operationId": "adhocqueryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the query to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "adhocquery"
        ],
        "summary": "Create or edit an ad hoc query",
        "description": "Allows the user to edit an ad hoc query.",
        "operationId": "adhocquerySave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the query to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "text"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the query."
                  },
                  "text": {
                    "type": "string",
                    "description": "The text of the query (the query itself)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/adhocquery/list": {
      "get": {
        "tags": [
          "adhocquery"
        ],
        "summary": "View a list of saved ad hoc queries",
        "description": "Allows the user to view the full list of saved queries.",
        "operationId": "adhocqueryList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/adhocquery/getschema": {
      "get": {
        "tags": [
          "adhocquery"
        ],
        "summary": "View the database schema for making ad hoc queries",
        "description": "Allows the user to view the list of schema for ad hoc queries.",
        "operationId": "adhocqueryGetschema",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/adhocquery/execute": {
      "get": {
        "tags": [
          "adhocquery"
        ],
        "summary": "Execute an ad hoc query",
        "description": "Allows the user to execute an ad hoc query.",
        "operationId": "adhocqueryExecute",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the query to execute.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The query to execute.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/adhocquery/checkexecution": {
      "get": {
        "tags": [
          "adhocquery"
        ],
        "summary": "Check the status of an ad hoc query execution",
        "description": "Allows the user to check whether a query has executed, viewable on the query's execution page.",
        "operationId": "adhocqueryCheckexecution",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the ad hoc query execution to be checked.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/adhocquery/stopexecution": {
      "get": {
        "tags": [
          "adhocquery"
        ],
        "summary": "Stops the execution of an ad hoc query",
        "description": "Allows the user to halt the execution of a query that is currently being executed.",
        "operationId": "adhocqueryStopexecution",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the ad hoc query execution to be stopped.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/adhocquery/listexecutions": {
      "get": {
        "tags": [
          "adhocquery"
        ],
        "summary": "View a list of ad hoc queries executions",
        "description": "Allows the user to view the full list of past query executions.",
        "operationId": "adhocqueryListexecutions",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The first record to return.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/adhocreports/reqaccess": {
      "get": {
        "tags": [
          "adhocreports"
        ],
        "summary": "Request access to the ad-hoc reports",
        "description": "Allows the user to request access to the ad-hoc reports by clicking, 'Request Access' under Institutional Research -> Ad-hoc Reports",
        "operationId": "adhocreportsReqaccess",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/community/invite": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Sends an invitation to everyone to AccuCampus Communities",
        "description": "Allows the user to invite all other users to the AccuCampus Communities.",
        "operationId": "communityInvite",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/community/join": {
      "get": {
        "tags": [
          "community"
        ],
        "summary": "Sends an invitation for myself to AccuCampus Communities",
        "description": "Allows the user to access the AccuCampus Communities.",
        "operationId": "communityJoin",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/template/list": {
      "get": {
        "tags": [
          "template"
        ],
        "summary": "View a list of defined templates",
        "description": "Allows the user to view the full list of created templates.",
        "operationId": "templateList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "description": "The kind of the templates to return. It must be included in (badge, certificate).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "designedonly",
            "in": "query",
            "description": "If true then it only returns the templates that were designed. Otherwise, it returns all.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/template/{id}": {
      "get": {
        "tags": [
          "template"
        ],
        "summary": "View details of a template",
        "description": "Allows the user to view a template and its details.",
        "operationId": "templateGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "template"
        ],
        "summary": "Create or edit a template",
        "description": "Allows the user to create or edit a template.",
        "operationId": "templateSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "kind",
                  "name"
                ],
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "The kind of the templates to return. It must be included in (badge, certificate)."
                  },
                  "name": {
                    "type": "string",
                    "description": "The template's name."
                  },
                  "description": {
                    "type": "string",
                    "description": "The template's description."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "template"
        ],
        "summary": "Delete a template",
        "description": "Allows the user to delete an existing template.",
        "operationId": "templateDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/template/savelayout": {
      "post": {
        "tags": [
          "template"
        ],
        "summary": "Save the layout of a template",
        "description": "Allows the user to edit a template's layout.",
        "operationId": "templateSavelayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "layout"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the template whose layout needs to be saved.",
                    "format": "uuid"
                  },
                  "layout": {
                    "type": "string",
                    "description": "The template's layout (in JSON)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/template/addimage": {
      "get": {
        "tags": [
          "template"
        ],
        "summary": "Add an image to a template",
        "description": "Allows the user to add an image to a badge or certificate template.",
        "operationId": "templateAddimage",
        "parameters": [
          {
            "name": "template",
            "in": "query",
            "description": "The id of the template where the image has to be added",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The local name of the uploaded file. For later reference.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/template/generate": {
      "get": {
        "tags": [
          "template"
        ],
        "summary": "Generate specified templates",
        "description": "Allows the user to generate an existing template as badges or certificates.",
        "operationId": "templateGenerate",
        "parameters": [
          {
            "name": "template",
            "in": "query",
            "description": "The id of the template to generate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "The source key of the selected template data source.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "singlefile",
            "in": "query",
            "description": "True if all the templates should be placed in the same file, false if each one shoud be in its own file.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "Only the template for these users is created (and emailed if 'email' is true), enter multiple separated by commas.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forsending",
            "in": "query",
            "description": "It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Pipe separated filters for the generation, eg: aaa=val|bbb=val|...",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/template/getgenerated": {
      "get": {
        "tags": [
          "template"
        ],
        "summary": "View generated templates",
        "description": "Allows the user to view templates which have been generated as badges or certificates.",
        "operationId": "templateGetgenerated",
        "parameters": [
          {
            "name": "jobid",
            "in": "query",
            "description": "The id of the job that is creating the templates.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/template/email": {
      "get": {
        "tags": [
          "template"
        ],
        "summary": "Send generated templates by email",
        "description": "Allows the user to send generated templates via email through AccuCampus.",
        "operationId": "templateEmail",
        "parameters": [
          {
            "name": "jobid",
            "in": "query",
            "description": "The id of the job that is creating the templates.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templatekind",
            "in": "query",
            "description": "The kind of the template you're sending. It must be included in (badge, certificate).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailfrom",
            "in": "query",
            "description": "The name of the sender to be displayed in the receipients inbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailreplyto",
            "in": "query",
            "description": "The reply-to field for the emails.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailsubject",
            "in": "query",
            "description": "Args depending on the send-to flag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailbody",
            "in": "query",
            "description": "Args depending on the send-to flag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/template/listsources": {
      "get": {
        "tags": [
          "template"
        ],
        "summary": "View a list of templates' data sources",
        "description": "Allows the user to see tokens to be used in the template",
        "operationId": "templateListsources",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "description": "The kind of the templates to return. It must be included in (badge, certificate).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/textcredit/remaining": {
      "get": {
        "tags": [
          "textcredit"
        ],
        "summary": "Gets the remaining text credits for the account",
        "operationId": "textcreditRemaining",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/translation/list": {
      "get": {
        "tags": [
          "translation"
        ],
        "summary": "Lists all the available translations in the system",
        "operationId": "translationList",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Text to search/filter translations.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nondefaultonly",
            "in": "query",
            "description": "If true then it returns only the terms translated. Otherwise, it returns all.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "appdefaultasuniversal",
            "in": "query",
            "description": "If true then it uses the app default translation as the universal term.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/translation/{id}": {
      "post": {
        "tags": [
          "translation"
        ],
        "summary": "Edit a translation",
        "description": "Allows the user to edit a translation for the entire account.",
        "operationId": "translationSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the translation as returned by translation.list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "translation"
                ],
                "properties": {
                  "translation": {
                    "type": "string",
                    "description": "The translated text."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/translation/get": {
      "get": {
        "tags": [
          "translation"
        ],
        "summary": "Gets the translations of the specified values",
        "operationId": "translationGet",
        "parameters": [
          {
            "name": "universal",
            "in": "query",
            "description": "Pipe separated list of universal text to be translated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/translation/getcachefile": {
      "get": {
        "tags": [
          "translation"
        ],
        "summary": "Get the file containing the translations",
        "operationId": "translationGetcachefile",
        "parameters": [
          {
            "name": "account",
            "in": "query",
            "description": "The id of the account whose translations file has to be retrieved.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usersettings/save": {
      "post": {
        "tags": [
          "usersettings"
        ],
        "summary": "Saves a user setting",
        "operationId": "usersettingsSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Setting key to save."
                  },
                  "value": {
                    "type": "string",
                    "description": "Setting value to save."
                  },
                  "user": {
                    "type": "string",
                    "description": "The user id whose settings have to be saved.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usersettings/savemultiple": {
      "post": {
        "tags": [
          "usersettings"
        ],
        "summary": "Save multiple user settings at once",
        "operationId": "usersettingsSavemultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "optionsjson"
                ],
                "properties": {
                  "optionsjson": {
                    "type": "string",
                    "description": "The options to save in the account, in JSON format."
                  },
                  "user": {
                    "type": "string",
                    "description": "The user id whose settings have to be saved.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usersettings/get": {
      "get": {
        "tags": [
          "usersettings"
        ],
        "summary": "Lists available user settings",
        "operationId": "usersettingsGet",
        "parameters": [
          {
            "name": "keys",
            "in": "query",
            "description": "Setting key to get. Can be multiple separated by commas.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The user id whose settings have to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usersettings/getmultiple": {
      "get": {
        "tags": [
          "usersettings"
        ],
        "summary": "Get multiple user settings",
        "operationId": "usersettingsGetmultiple",
        "parameters": [
          {
            "name": "keys",
            "in": "query",
            "description": "Setting key to get. Can be multiple separated by commas.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The user id whose settings have to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/department/{id}": {
      "get": {
        "tags": [
          "department"
        ],
        "summary": "Search and view details of a college department",
        "description": "Allows the user to view an individual college department and its details.",
        "operationId": "departmentGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the department to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "department"
        ],
        "summary": "Delete a college department",
        "description": "Allows the user to delete an existing college department.",
        "operationId": "departmentDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the department to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "department"
        ],
        "summary": "Create or edit a college department",
        "description": "Allows the user to create or edit a college department.",
        "operationId": "departmentSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the department save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the department."
                  },
                  "details": {
                    "type": "string",
                    "description": "The details of the department."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/department/list": {
      "get": {
        "tags": [
          "department"
        ],
        "summary": "View a list of college departments",
        "description": "Allows the user to view the full list of college departments.",
        "operationId": "departmentList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/quickpanel/init": {
      "get": {
        "tags": [
          "quickpanel"
        ],
        "summary": "Returns the initial information required to show the quick panels",
        "operationId": "quickpanelInit",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/quickpanel/fetchwidget": {
      "get": {
        "tags": [
          "quickpanel"
        ],
        "summary": "Fetches the information for a specific widget.",
        "operationId": "quickpanelFetchwidget",
        "parameters": [
          {
            "name": "widgetid",
            "in": "query",
            "description": "The ID of the data to fetch it's data.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/quickpanel/listwidgettypes": {
      "get": {
        "tags": [
          "quickpanel"
        ],
        "summary": "Lists all the widget types available in the system",
        "operationId": "quickpanelListwidgettypes",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/quickpanel/getwidget": {
      "get": {
        "tags": [
          "quickpanel"
        ],
        "summary": "View details of a widget included in the Quick Panel",
        "description": "Allows the user to view a widget added in as Quick Panel.",
        "operationId": "quickpanelGetwidget",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the widget to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/quickpanel/listwidgets": {
      "get": {
        "tags": [
          "quickpanel"
        ],
        "summary": "Lists all the widgets that are added in the Quick Panel",
        "description": "Allows the user to view the widgets that have been added to the Quick Panel.",
        "operationId": "quickpanelListwidgets",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/quickpanel/savewidget": {
      "post": {
        "tags": [
          "quickpanel"
        ],
        "summary": "Saves a widget for the Quick Panel",
        "description": "Allows the user to save a widget to the Quick Panel.",
        "operationId": "quickpanelSavewidget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "sectionname",
                  "sortorder",
                  "title",
                  "type",
                  "data",
                  "roleids"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the widget.",
                    "format": "uuid"
                  },
                  "sectionname": {
                    "type": "string",
                    "description": "The section name where to add the widget."
                  },
                  "sortorder": {
                    "type": "integer",
                    "description": "The sort order of the widget.",
                    "format": "int32"
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the widget."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of the widget."
                  },
                  "data": {
                    "type": "string",
                    "description": "Context data of the widget."
                  },
                  "roleids": {
                    "type": "string",
                    "description": "CSV list of roles that display this widget."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/quickpanel/deletewidget": {
      "delete": {
        "tags": [
          "quickpanel"
        ],
        "summary": "Deletes a widget from the Quick Panel",
        "description": "Allows the user to delete a widget that has been added to the Quick Panel.",
        "operationId": "quickpanelDeletewidget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the widget.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/quickpanel/reorderwidgets": {
      "get": {
        "tags": [
          "quickpanel"
        ],
        "summary": "Reorders the widgets and moves them to a specific column",
        "operationId": "quickpanelReorderwidgets",
        "parameters": [
          {
            "name": "sectionname",
            "in": "query",
            "description": "The section name where to sort the widgets.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderids",
            "in": "query",
            "description": "CSV list of the widgets to reorder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/term/{id}": {
      "get": {
        "tags": [
          "term"
        ],
        "summary": "Search and view details of a term",
        "description": "Allows the user to view a term and its details.",
        "operationId": "termGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the term to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "term"
        ],
        "summary": "Delete a term",
        "description": "Allows the user to delete a term from the existing list.",
        "operationId": "termDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the term to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "term"
        ],
        "summary": "Create and edit terms",
        "description": "Allows the user to create and edit terms.",
        "operationId": "termSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the term to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "start",
                  "end"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the term."
                  },
                  "start": {
                    "type": "string",
                    "description": "The date when the term starts.",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "description": "The date when the term ends.",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/term/list": {
      "get": {
        "tags": [
          "term"
        ],
        "summary": "Search and view details of all terms",
        "description": "Allows the user to view the full list of existing term.",
        "operationId": "termList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "notpast",
            "in": "query",
            "description": "Specifies whether the terms in the past should be returned or not.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/holiday/suggest": {
      "get": {
        "tags": [
          "holiday"
        ],
        "summary": "View the holiday suggestions in the given term",
        "description": "Allows the user to view the holiday suggestions for each term.",
        "operationId": "holidaySuggest",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "The term to get holidays from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/holiday/list": {
      "get": {
        "tags": [
          "holiday"
        ],
        "summary": "View a list of entered holidays",
        "description": "Allows the user to view all holidays entered.",
        "operationId": "holidayList",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "The term to get holidays from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/holiday/save": {
      "post": {
        "tags": [
          "holiday"
        ],
        "summary": "Create or edit a list of holidays",
        "description": "Allows the user to create or edit holidays.",
        "operationId": "holidaySave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "daysoff"
                ],
                "properties": {
                  "daysoff": {
                    "type": "string",
                    "description": "A json list of names and dates."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notificationtopic/{id}": {
      "get": {
        "tags": [
          "notificationtopic"
        ],
        "summary": "Search and view details of a notification topic",
        "description": "Allows the user to view an individual notification topic and its details.",
        "operationId": "notificationtopicGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the notification topic to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "notificationtopic"
        ],
        "summary": "Delete a notification topic",
        "description": "Allows the user to delete an existing notification topic.",
        "operationId": "notificationtopicDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the notification topic to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "notificationtopic"
        ],
        "summary": "Create or edit a notification topic",
        "description": "Allows the user to create and edit a notification topic.",
        "operationId": "notificationtopicSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the topic to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "description"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the topic."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the topic."
                  },
                  "enableonscreendelivery": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic can be sent on-screen or not."
                  },
                  "sendonscreendefault": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic have to have the on-screen delivery enabled by default."
                  },
                  "enableemaildelivery": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic can be sent via e-mail or not."
                  },
                  "sendemaildefault": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic have to have the e-mail delivery enabled by default."
                  },
                  "enablesmsdelivery": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic can be sent via sms or not."
                  },
                  "sendsmsdefault": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic have to have the sms delivery enabled by default."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notificationtopic/list": {
      "get": {
        "tags": [
          "notificationtopic"
        ],
        "summary": "List all the notification topics",
        "description": "Allows the user to view the list of all notification topics.",
        "operationId": "notificationtopicList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notificationtopic/listsubscribe": {
      "get": {
        "tags": [
          "notificationtopic"
        ],
        "summary": "List all the notification topics available to subscribe",
        "operationId": "notificationtopicListsubscribe",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notification/sendonscreen": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Send on-screen notifications",
        "operationId": "notificationSendonscreen",
        "parameters": [
          {
            "name": "notification",
            "in": "query",
            "description": "The ID of the notification to send.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notification/getunreadcount": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Get the number of unread notifications",
        "operationId": "notificationGetunreadcount",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notification/{id}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "View a notification",
        "operationId": "notificationGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the notification to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "notification"
        ],
        "summary": "Delete a notification",
        "description": "Allows the user to delete an existing notification.",
        "operationId": "notificationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the notification to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notification/list": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "View a list of all sent notifications",
        "description": "Allows the user to view the list of all sent notifications.",
        "operationId": "notificationList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recipient",
            "in": "query",
            "description": "The recipient whose notifications have to be listed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of the notifications to list. Read, Unread or All.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sentonscreen",
            "in": "query",
            "description": "Specifies whether to list the notifications that were sent on-screen or not.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sentemail",
            "in": "query",
            "description": "Specifies whether to list the notifications that were sent via e-mail or not.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sentsms",
            "in": "query",
            "description": "Specifies whether to list the notifications that were sent via sms or not.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notification/listmine": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "View all the notifications sent to the current user",
        "operationId": "notificationListmine",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specifies the status of the notifications to list. Read, Unread or All.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notification/markasread": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Mark a notification as read",
        "operationId": "notificationMarkasread",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specifies the status to filter the notifications. Read, Unread or All.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notification/markasunread": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Mark a notification as unread",
        "operationId": "notificationMarkasunread",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specifies the status to filter the notifications. Read, Unread or All.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/notification/send": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Send notifications on screen, via email or text to users",
        "description": "Allows the user to send notifications to other users through the Send Message link.",
        "operationId": "notificationSend",
        "parameters": [
          {
            "name": "tousers",
            "in": "query",
            "description": "Comma-separated Ids of users to send the notification.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "togroups",
            "in": "query",
            "description": "Comma-separated Ids of user groups to send the notification.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailenabled",
            "in": "query",
            "description": "Whether send the notification via email.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onscreenenabled",
            "in": "query",
            "description": "Whether to display the notification on screen.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "smsenabled",
            "in": "query",
            "description": "Whether to send the notification via text message.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Notification title.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenbody",
            "in": "query",
            "description": "Body of the message for on-screen display.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenclick",
            "in": "query",
            "description": "What to do when the notification is clicked. Valid values: hide, view, url.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenurl",
            "in": "query",
            "description": "Url to redirect the user, if onscreenclick=url.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenclass",
            "in": "query",
            "description": "How to display the notification. Valid values: info, success, warning, error",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenduration",
            "in": "query",
            "description": "Time in seconds to display the notification.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "showonstation",
            "in": "query",
            "description": "Whether to show the notification in the sign-in station.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "emailfromname",
            "in": "query",
            "description": "Name of the email sender.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailfrom",
            "in": "query",
            "description": "Reply-to email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailsubject",
            "in": "query",
            "description": "Subject of the email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailbody",
            "in": "query",
            "description": "Body of the email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textmessagebody",
            "in": "query",
            "description": "Message for SMS. Max 160 characters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/push/deregister": {
      "get": {
        "tags": [
          "push"
        ],
        "summary": "Deregisters the current device to receive push notifications",
        "operationId": "pushDeregister",
        "parameters": [
          {
            "name": "devicetoken",
            "in": "query",
            "description": "The device token where to send the notification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "description": "Either ios or android",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/push/register": {
      "get": {
        "tags": [
          "push"
        ],
        "summary": "Registers the current device to receive push notifications",
        "operationId": "pushRegister",
        "parameters": [
          {
            "name": "devicetoken",
            "in": "query",
            "description": "The device token where to send the notification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "description": "Either ios or android",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rule/{id}": {
      "delete": {
        "tags": [
          "rule"
        ],
        "summary": "Delete a rule",
        "description": "Allows the user to delete an existing rule.",
        "operationId": "ruleDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rule to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "rule"
        ],
        "summary": "View details of a rule",
        "description": "Allows the user to view an individual rule and its details.",
        "operationId": "ruleGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rule to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "rule"
        ],
        "summary": "Create or edit a rule",
        "description": "Allows the user to create or edit a rule.",
        "operationId": "ruleSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rule to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "onevent",
                  "conditionsjson",
                  "actionsjson",
                  "active"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the rule."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the rule."
                  },
                  "onevent": {
                    "type": "string",
                    "description": "The event that will trigger this rule."
                  },
                  "conditionsjson": {
                    "type": "string",
                    "description": "The conditions that apply to this rule."
                  },
                  "actionsjson": {
                    "type": "string",
                    "description": "The actions that will be executed when this rule matches."
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Specifies if the action is active or inactive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rule/list": {
      "get": {
        "tags": [
          "rule"
        ],
        "summary": "View a list of user rules",
        "description": "Allows the user to view the list of all rules.",
        "operationId": "ruleList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rule/listactions": {
      "get": {
        "tags": [
          "rule"
        ],
        "summary": "View a list of rule actions available",
        "description": "Allows the user to view all the available rule actions.",
        "operationId": "ruleListactions",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rule/listeventtypes": {
      "get": {
        "tags": [
          "rule"
        ],
        "summary": "View a list of rule event types",
        "description": "Allows the user to view a list of available triggers for rules.",
        "operationId": "ruleListeventtypes",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rule/geteventtype": {
      "get": {
        "tags": [
          "rule"
        ],
        "summary": "View details of a rule event type",
        "description": "Allows the user to view the trigger and its available conditions for the rule.",
        "operationId": "ruleGeteventtype",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "The name of the event to refresh.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rule/listhttprequests": {
      "get": {
        "tags": [
          "rule"
        ],
        "summary": "View all the http requests sent as a result of a rule",
        "operationId": "ruleListhttprequests",
        "parameters": [
          {
            "name": "failed",
            "in": "query",
            "description": "If true only failed requests will be returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The http status to filter the requests",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/interaction/{id}": {
      "delete": {
        "tags": [
          "interaction"
        ],
        "summary": "Delete an interaction",
        "operationId": "interactionDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the interaction to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "interaction"
        ],
        "summary": "View an interaction",
        "operationId": "interactionGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the interaction.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thumbnailmediasize",
            "in": "query",
            "description": "The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "interaction"
        ],
        "summary": "Save an interaction",
        "operationId": "interactionSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the interaction to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "public"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of the interaction"
                  },
                  "body": {
                    "type": "string",
                    "description": "The body of the interaction (encoded in Base64)."
                  },
                  "attachmentname": {
                    "type": "string",
                    "description": "The name of the file to be uploaded."
                  },
                  "public": {
                    "type": "boolean",
                    "description": "Specifies whether this interaction is public or private."
                  },
                  "sourceid": {
                    "type": "string",
                    "description": "Pass-through field used for reference in the client."
                  },
                  "sourcedate": {
                    "type": "string",
                    "description": "The source's date.",
                    "format": "date-time"
                  },
                  "contexttype": {
                    "type": "string",
                    "description": "The type of the context of the interaction."
                  },
                  "contextid": {
                    "type": "string",
                    "description": "The id of the context of the interaction.",
                    "format": "uuid"
                  },
                  "photosize": {
                    "type": "integer",
                    "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
                    "format": "int32"
                  },
                  "showdefaultphoto": {
                    "type": "boolean",
                    "description": "If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned."
                  },
                  "notificationtitle": {
                    "type": "string",
                    "description": "Specifies the value that is sent as the notification title."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/interaction/feed": {
      "get": {
        "tags": [
          "interaction"
        ],
        "summary": "Get the interactions feed",
        "operationId": "interactionFeed",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "If set, only interactions that happened after this date are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "public",
            "in": "query",
            "description": "Specifies whether to return public or private interactions.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "contexttype",
            "in": "query",
            "description": "The type of the context of the interactions to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextid",
            "in": "query",
            "description": "The id of the context of the interactions to return.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The  comma separated types of the interactions to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "showdefaultphoto",
            "in": "query",
            "description": "If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "orderdescending",
            "in": "query",
            "description": "If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/interaction/listprivatesummary": {
      "get": {
        "tags": [
          "interaction"
        ],
        "summary": "Get current user's latest private interactions",
        "operationId": "interactionListprivatesummary",
        "parameters": [
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "showdefaultphoto",
            "in": "query",
            "description": "If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/like/delete": {
      "delete": {
        "tags": [
          "like"
        ],
        "summary": "Delete a like",
        "operationId": "likeDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "interactionid"
                ],
                "properties": {
                  "interactionid": {
                    "type": "string",
                    "description": "The id of the interaction to unlike.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/like/list": {
      "get": {
        "tags": [
          "like"
        ],
        "summary": "View all the likes associated to a target",
        "operationId": "likeList",
        "parameters": [
          {
            "name": "interactionid",
            "in": "query",
            "description": "The id of the interaction to unlike.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/like/save": {
      "post": {
        "tags": [
          "like"
        ],
        "summary": "Save a like",
        "operationId": "likeSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "interactionid"
                ],
                "properties": {
                  "interactionid": {
                    "type": "string",
                    "description": "The id of the interaction to unlike.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/social/contacts": {
      "get": {
        "tags": [
          "social"
        ],
        "summary": "Gets the list of contacts in the network",
        "operationId": "socialContacts",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Text to filter results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showdefaultphoto",
            "in": "query",
            "description": "If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/socialgroup/list": {
      "get": {
        "tags": [
          "socialgroup"
        ],
        "summary": "View all the groups the current user is in",
        "operationId": "socialgroupList",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/socialgroup/{id}": {
      "post": {
        "tags": [
          "socialgroup"
        ],
        "summary": "Saves a new group",
        "operationId": "socialgroupSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group to update. Leave blank to create new.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the group to update/create."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "socialgroup"
        ],
        "summary": "Deletes a group",
        "operationId": "socialgroupDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/socialgroup/addmembers": {
      "get": {
        "tags": [
          "socialgroup"
        ],
        "summary": "Adds new members to a group (which the user must own already)",
        "operationId": "socialgroupAddmembers",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the group to add members to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userids",
            "in": "query",
            "description": "Csv list of user Ids to add.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/socialgroup/listmembers": {
      "get": {
        "tags": [
          "socialgroup"
        ],
        "summary": "Lists the members of a group",
        "operationId": "socialgroupListmembers",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the group to list members.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/socialgroup/removemembers": {
      "get": {
        "tags": [
          "socialgroup"
        ],
        "summary": "Removes members from a group (which the user must own already)",
        "operationId": "socialgroupRemovemembers",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the group to remove members from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userids",
            "in": "query",
            "description": "Csv list of user Ids to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/socialgroup/removemyself": {
      "get": {
        "tags": [
          "socialgroup"
        ],
        "summary": "Removes myself from an existent group",
        "operationId": "socialgroupRemovemyself",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the group to remove me from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/import": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Import data into AccuCampus",
        "description": "Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.",
        "operationId": "import",
        "parameters": [
          {
            "name": "importtype",
            "in": "query",
            "description": "The kind of data that is being uploaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The local name of the uploaded file. For later reference.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "description": "Import parameters, in a key-value pair JSON-serialized object. Eg {'parameter':'value'}.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/import/listtypes": {
      "get": {
        "tags": [
          "import"
        ],
        "summary": "Lists available import types",
        "operationId": "importListtypes",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/event/{id}": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Search and view details of a course",
        "description": "Allows the user to view an individual course and its details.",
        "operationId": "eventGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "event"
        ],
        "summary": "Create or edit a course",
        "description": "Allows the user to create or edit a course.",
        "operationId": "eventSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "code"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event."
                  },
                  "codegroup": {
                    "type": "string",
                    "description": "Optional code to group events."
                  },
                  "code": {
                    "type": "string",
                    "description": "The unique code of the event."
                  },
                  "term": {
                    "type": "string",
                    "description": "The term of the event."
                  },
                  "department": {
                    "type": "string",
                    "description": "The department of the event."
                  },
                  "details": {
                    "type": "string",
                    "description": "The details of the event."
                  },
                  "recurringschedule": {
                    "type": "string",
                    "description": "The recurring schedule of the event, a JSON-formatted array. Each item must contain an action (set/remove) and the schedule properties, as returned by event.get."
                  },
                  "onetimeschedule": {
                    "type": "string",
                    "description": "The one-time schedule of the event, a JSON-formatted array. Each item must contain an action (set/remove) and the schedule properties, as returned by event.get."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "event"
        ],
        "summary": "Delete a course",
        "description": "Allows the user to delete an existing course.",
        "operationId": "eventDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/event/getsessionsbydate": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "View a list of courses by date",
        "description": "Allows the user to view a list of courses by date.",
        "operationId": "eventGetsessionsbydate",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "The location to filter the events.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date to filter the events. Today will be used if this parameter is omitted.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of event to list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/event/list": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "View a list of courses",
        "description": "Allows the user to view the full list of courses.",
        "operationId": "eventList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "summaryonly",
            "in": "query",
            "description": "True to return only the event information and not the associated schedule, dept, etc. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "termid",
            "in": "query",
            "description": "Id of the term to list the events. Null to list all events.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/event/searchgroup": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Searches for the available event groups",
        "operationId": "eventSearchgroup",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to search event groups.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/{id}": {
      "delete": {
        "tags": [
          "usergroup"
        ],
        "summary": "Delete a group",
        "description": "Allows the user to delete a group that they have permission to edit.",
        "operationId": "usergroupDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "Search and view details of a user group",
        "description": "Allows the user to view a user group and its details.",
        "operationId": "usergroupGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user group to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "usergroup"
        ],
        "summary": "Create or edit a group",
        "description": "Allows the user to create a new group or edit a group that they have permission to edit.",
        "operationId": "usergroupSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the group."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the group."
                  },
                  "isprivate": {
                    "type": "boolean",
                    "description": "Whether this group can be seen by others other than the creator."
                  },
                  "viewroles": {
                    "type": "string",
                    "description": "The roles that can view the group, in JSON format."
                  },
                  "editroles": {
                    "type": "string",
                    "description": "The roles that can edit the group, in JSON format."
                  },
                  "scopes": {
                    "type": "string",
                    "description": "The scopes that have access to this group, in JSON format."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/list": {
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "View a list of user groups",
        "description": "Allows the user to view the list of groups that they have permission to view.",
        "operationId": "usergroupList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the groups to return. Either 'user', 'dynamic' or any other type of group.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/addmember": {
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "Add a user to a group",
        "description": "Allows the user to add a user to a group that they have permission to edit.",
        "operationId": "usergroupAddmember",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/getmembers": {
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "View the members of a user group",
        "description": "Allows the user to view the list of users in a group that they have permission to view.",
        "operationId": "usergroupGetmembers",
        "parameters": [
          {
            "name": "groupid",
            "in": "query",
            "description": "The id of the user group to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/getuser": {
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "View the groups which a user is registered to",
        "description": "Allows the user to view the groups an individual user is registered to, based on group and user permissions.",
        "operationId": "usergroupGetuser",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to get his groups.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/removemember": {
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "Remove a user from a group",
        "description": "Allows the user to remove a user from a group that they have permission to edit.",
        "operationId": "usergroupRemovemember",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/mediatype/{id}": {
      "delete": {
        "tags": [
          "mediatype"
        ],
        "summary": "Delete a media type",
        "description": "Allows the user to delete an existing media type.",
        "operationId": "mediatypeDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the media type to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "mediatype"
        ],
        "summary": "Search and view details of a media type",
        "description": "Allows the user to view a media type and its details.",
        "operationId": "mediatypeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the media type to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "mediatype"
        ],
        "summary": "Create or edit a media type",
        "description": "Allows the user to create or edit a media type.",
        "operationId": "mediatypeSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the mediaType save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "checkoutperiodbasis",
                  "checkoutperiodduration"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the mediaType."
                  },
                  "checkoutperiodbasis": {
                    "type": "integer",
                    "description": "The checkout period basis (0 = hours, 1 = days, 2 = weeks).",
                    "format": "int32"
                  },
                  "checkoutperiodduration": {
                    "type": "integer",
                    "description": "Specifies the duration of the default checkout period given the basis.",
                    "format": "int32"
                  },
                  "maxcheckindate": {
                    "type": "string",
                    "description": "Specifies the maximum date when all the media items of this type must be returned.",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/mediatype/list": {
      "get": {
        "tags": [
          "mediatype"
        ],
        "summary": "View a list of media types",
        "description": "Allows the user to view the list of all media types.",
        "operationId": "mediatypeList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/{id}": {
      "delete": {
        "tags": [
          "media"
        ],
        "summary": "Delete a media item",
        "description": "Allows the user to delete an existing media item.",
        "operationId": "mediaDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the media item to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "media"
        ],
        "summary": "Search and view details of a media item",
        "description": "Allows the user to view an individual media item and its details.",
        "operationId": "mediaGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the media item to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "media"
        ],
        "summary": "Create or edit a media item",
        "description": "Allows the user to create or edit a media item.",
        "operationId": "mediaSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the media item save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "title",
                  "mediatype",
                  "checkoutperiodbasis",
                  "checkoutperiodduration",
                  "active"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The code of the media item."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the media item."
                  },
                  "mediatype": {
                    "type": "string",
                    "description": "The type of the media item.",
                    "format": "uuid"
                  },
                  "location": {
                    "type": "string",
                    "description": "The location of the media item.",
                    "format": "uuid"
                  },
                  "checkoutperiodbasis": {
                    "type": "integer",
                    "description": "The checkout period basis (0 = hours, 1 = days, 2 = weeks).",
                    "format": "int32"
                  },
                  "checkoutperiodduration": {
                    "type": "integer",
                    "description": "Specifies the duration of the checkout period given the basis.",
                    "format": "int32"
                  },
                  "staff": {
                    "type": "string",
                    "description": "The staff of the media item.",
                    "format": "uuid"
                  },
                  "shelf": {
                    "type": "string",
                    "description": "The shelf of the media item."
                  },
                  "notes": {
                    "type": "string",
                    "description": "The notes of the media item."
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Specifies whether the media item is active or not."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/getbycode": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "Search media item by unique code",
        "description": "Allows the user to search for media items by their unique code.",
        "operationId": "mediaGetbycode",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The code of the media item to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The location where to look for the media item.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/list": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "View a list of media items",
        "description": "Allows the user to view the list of all media items tied to locations in which the user is scoped.",
        "operationId": "mediaList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Used to filter the media items by their checkout status (0 = CheckedIn, 1 = CheckedOut, Unspecified = All).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "Used to filter the media items that are checked-out by a specific user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/checkout": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "Check out media item",
        "description": "Allows the user to check out a media item.",
        "operationId": "mediaCheckout",
        "parameters": [
          {
            "name": "media",
            "in": "query",
            "description": "The id of the media item to checkout.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The id of the user that is checking the item out.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "staff",
            "in": "query",
            "description": "The id of the staff member related to the checkout.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event related to the checkout.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checkoutdate",
            "in": "query",
            "description": "The checkout date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "duedate",
            "in": "query",
            "description": "The date when the checkout is due.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "description": "The notes of the checkout.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/checkin": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "Check in media item",
        "description": "Allows the user to check in a media item.",
        "operationId": "mediaCheckin",
        "parameters": [
          {
            "name": "media",
            "in": "query",
            "description": "The id of the media item to checkin.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checkindate",
            "in": "query",
            "description": "The checkout date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "description": "The notes of the checkout.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/getcheckout": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "View details of a media item checkout information",
        "description": "Allows the user to view a media item's checkout information.",
        "operationId": "mediaGetcheckout",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the media item whose checkout information has to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/getcheckoutlog": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "View details of a media checkout log",
        "description": "Allows the user to view a media item's checkout history.",
        "operationId": "mediaGetcheckoutlog",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the media item whose checkout information has to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/checkoutlist": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "View a list of past media checkouts",
        "description": "Allows the user to view a list of all past checkouts",
        "operationId": "mediaCheckoutlist",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "media",
            "in": "query",
            "description": "Used to filter the checkouts of a specific media item.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "Used to filter the checkouts made by a specific user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/media/deletecheckoutlog": {
      "delete": {
        "tags": [
          "media"
        ],
        "summary": "Delete a media checkout log",
        "description": "Allows the user to delete a media item's checkout log.",
        "operationId": "mediaDeletecheckoutlog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the checkout log to delete.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/qrlabels/print": {
      "get": {
        "tags": [
          "qrlabels"
        ],
        "summary": "Print and email QR labels",
        "description": "Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.",
        "operationId": "qrlabelsPrint",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "The id of the user whose label needs to be printed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The id of the group whose members' labels need to be printed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/service/{id}": {
      "get": {
        "tags": [
          "service"
        ],
        "summary": "Search and view details of a service",
        "description": "Allows the user to view an individual service and its details.",
        "operationId": "serviceGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "service"
        ],
        "summary": "Delete a service",
        "description": "Allows the user to delete a service from the existing list.",
        "operationId": "serviceDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "service"
        ],
        "summary": "Create or edit a service",
        "description": "Allows the user to create or edit a service.",
        "operationId": "serviceSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the service."
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the service."
                  },
                  "order": {
                    "type": "integer",
                    "description": "The order of the service.",
                    "format": "int32"
                  },
                  "globallyavailable": {
                    "type": "boolean",
                    "description": "Whether the service is available for all the locations."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the service."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/service/list": {
      "get": {
        "tags": [
          "service"
        ],
        "summary": "View a list of services",
        "description": "Allows the user to view the full list of existing services.",
        "operationId": "serviceList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/serviceassignment/addservice": {
      "get": {
        "tags": [
          "serviceassignment"
        ],
        "summary": "Enable a service in a specific location",
        "description": "Allows the user to enable a service in a location to which they are scoped.",
        "operationId": "serviceassignmentAddservice",
        "parameters": [
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/serviceassignment/getlocation": {
      "get": {
        "tags": [
          "serviceassignment"
        ],
        "summary": "View a list of services enabled for a specific location",
        "description": "Allows the user to view a list of services available in a location to which they are scoped.",
        "operationId": "serviceassignmentGetlocation",
        "parameters": [
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the location to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includegloballyavailable",
            "in": "query",
            "description": "Specifies whether the services available globally must be returned or not.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "namefilter",
            "in": "query",
            "description": "Filters the name of the services to return.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of services to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/serviceassignment/getservice": {
      "get": {
        "tags": [
          "serviceassignment"
        ],
        "summary": "View a list of locations where a service is available",
        "description": "Allows the user to view a list of locations in which a service is available.",
        "operationId": "serviceassignmentGetservice",
        "parameters": [
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service to get its locations.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/serviceassignment/removeservice": {
      "get": {
        "tags": [
          "serviceassignment"
        ],
        "summary": "Remove a service from a location",
        "description": "Allows the user to disable a service from a location to which they are scoped.",
        "operationId": "serviceassignmentRemoveservice",
        "parameters": [
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the location to remove the service from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/tag/search": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Search for tags in the account",
        "description": "Allows the user to search for tags.",
        "operationId": "tagSearch",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The query to search tags. Use group:<group> to search in a specific group (mandatory).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowcreatingnew",
            "in": "query",
            "description": "Specifies whether an option to create a new tag should be retrieved.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/tag/{id}": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "View details of a specified tag",
        "description": "Allows the user to click on and view the settings for a tag.",
        "operationId": "tagGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the tag to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "tag"
        ],
        "summary": "Create or edit a tag",
        "description": "Allows the user to create or edit a tag.",
        "operationId": "tagSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the tag save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "group",
                  "name"
                ],
                "properties": {
                  "group": {
                    "type": "string",
                    "description": "The group id of the tag."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the tag."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the tag."
                  },
                  "requestedby": {
                    "type": "string",
                    "description": "The information regarding who requested this tag and who should use it."
                  },
                  "viewroles": {
                    "type": "string",
                    "description": "The roles that can view the answers, in JSON format."
                  },
                  "editroles": {
                    "type": "string",
                    "description": "The roles that can edit the answers, in JSON format."
                  },
                  "scopes": {
                    "type": "string",
                    "description": "The scopes that have access to this questionnaire, in JSON format."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "tag"
        ],
        "summary": "Delete a tag",
        "description": "Allows the user to delete an existing tag.",
        "operationId": "tagDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the tag to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/tag/listgroups": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "View a list of entities that can be tagged",
        "description": "Allows the user to view the list of user roles that can be tagged, according to that tag's settings.",
        "operationId": "tagListgroups",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/tag/list": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "View a list of tags",
        "description": "Allows the user to view the list of tags.",
        "operationId": "tagList",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "The group of the tags to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancelog/{id}": {
      "delete": {
        "tags": [
          "attendancelog"
        ],
        "summary": "Delete an attendance log",
        "description": "Allows the user to delete an existing attendance log.",
        "operationId": "attendancelogDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the attendance log to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "attendancelog"
        ],
        "summary": "Search and view details of an attendance log",
        "description": "Allows the user to view an individual attendance log and its details.",
        "operationId": "attendancelogGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the attendance log to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "attendancelog"
        ],
        "summary": "Create or edit an attendance log",
        "description": "Allows the user to create or edit an attendance log.",
        "operationId": "attendancelogSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the room to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cardnumber": {
                    "type": "string",
                    "description": "The card # of the user (used when the user is unknown).",
                    "format": "uuid"
                  },
                  "user": {
                    "type": "string",
                    "description": "The id of the user, or a CSV list of ids if creating new logs."
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location where the user signed in.",
                    "format": "uuid"
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the event the user signed in to.",
                    "format": "uuid"
                  },
                  "useeventschedule": {
                    "type": "boolean",
                    "description": "Specifies whether the event schedule should be used to set the log status."
                  },
                  "notes": {
                    "type": "string",
                    "description": "The notes of the log."
                  },
                  "publicnotes": {
                    "type": "boolean",
                    "description": "Specifies whether the notes are public to the user or should only be seen by staff or admins"
                  },
                  "logdetails": {
                    "type": "string",
                    "description": "The log details in JSON format",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancelog/list": {
      "get": {
        "tags": [
          "attendancelog"
        ],
        "summary": "View a list of attendance logs",
        "description": "Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.",
        "operationId": "attendancelogList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The user ID of the user to get the logs.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancelog/listmine": {
      "get": {
        "tags": [
          "attendancelog"
        ],
        "summary": "Gets the attendance logs of the current user",
        "operationId": "attendancelogListmine",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancelog/whosin": {
      "get": {
        "tags": [
          "attendancelog"
        ],
        "summary": "View who's in a location",
        "description": "Allows the user to view the Who's In page and view all users who are logged into locations in which the user is scoped.",
        "operationId": "attendancelogWhosin",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location to search for users that are in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event to search for users that are in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Field to sort by. Either first-name, last-name or sign-in-time.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "The comma-separated list of ids of the roles to search for users that are in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extensions",
            "in": "query",
            "description": "A JSON array containing the extension filters (i.e [{name: 'nametofilter', value: 'valuetofilter'}]).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "export",
            "in": "query",
            "description": "True to export the results as CSV",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancelog/signout": {
      "get": {
        "tags": [
          "attendancelog"
        ],
        "summary": "Sign out an attendance log",
        "description": "Allows the user to sign out am attendance log from the Who's In page.",
        "operationId": "attendancelogSignout",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the attendance log to sign-out.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location to filter the users to sign out.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event to filter the users to sign out.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "datetime",
            "in": "query",
            "description": "Specifies the date and time when the specified logs have to be signed out.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancelog/getchangehistory": {
      "get": {
        "tags": [
          "attendancelog"
        ],
        "summary": "Search and view details of an attendance log's swipe history",
        "description": "Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).",
        "operationId": "attendancelogGetchangehistory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the attendance log to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/swipe/{id}": {
      "get": {
        "tags": [
          "swipe"
        ],
        "summary": "Search and view details of a swipe",
        "description": "Allows the user to view an individual attendance swipe.",
        "operationId": "swipeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the swipe to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "swipe"
        ],
        "summary": "Delete a swipe",
        "description": "Allows the user to delete an existing attendance swipe.",
        "operationId": "swipeDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the swipe to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/swipe/list": {
      "get": {
        "tags": [
          "swipe"
        ],
        "summary": "View a list of swipes",
        "description": "Allows the user to view a list of all swipes for the location or locations in which the user is scoped.",
        "operationId": "swipeList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/swipe/save": {
      "post": {
        "tags": [
          "swipe"
        ],
        "summary": "Create or edit a swipe, and if possible, save the related attendance log",
        "description": "Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.",
        "operationId": "swipeSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "time",
                  "cardnumber",
                  "client"
                ],
                "properties": {
                  "time": {
                    "type": "string",
                    "description": "The date and time of the swipe.",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "integer",
                    "description": "Specifies the attendance type (0 = Sign-In, 1 = Sign-Out). If not specified then it's inferred from existing logs.",
                    "format": "int32"
                  },
                  "cardnumber": {
                    "type": "string",
                    "description": "The number of the swipped card."
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the event whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "client": {
                    "type": "string",
                    "description": "The unique id of the client whose swipe has to be saved."
                  },
                  "clientname": {
                    "type": "string",
                    "description": "The name of the client whose swipe has to be saved."
                  },
                  "metadata": {
                    "type": "string",
                    "description": "The swipe's metadata in JSON format."
                  },
                  "photosize": {
                    "type": "integer",
                    "description": "The swiping user's photo size.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancelogcomment/{id}": {
      "delete": {
        "tags": [
          "attendancelogcomment"
        ],
        "summary": "Delete a comment on an attendance log",
        "operationId": "attendancelogcommentDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the attendance log comment to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "attendancelogcomment"
        ],
        "summary": "View a comment on an attendance log",
        "operationId": "attendancelogcommentGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the comment to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "attendancelogcomment"
        ],
        "summary": "Save a comment on an attendance log",
        "operationId": "attendancelogcommentSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the comment to edit (leave empty to create a new one)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "comments"
                ],
                "properties": {
                  "attendancelog": {
                    "type": "string",
                    "description": "The id of the attendance log that has to be commented.",
                    "format": "uuid"
                  },
                  "comments": {
                    "type": "string",
                    "description": "The comments that have to be saved."
                  },
                  "public": {
                    "type": "boolean",
                    "description": "Specifies whether this comment is public to the user or should only be seen by staff or admins"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancelogcomment/list": {
      "get": {
        "tags": [
          "attendancelogcomment"
        ],
        "summary": "View all the comments on a specific attendance log",
        "operationId": "attendancelogcommentList",
        "parameters": [
          {
            "name": "attendancelog",
            "in": "query",
            "description": "The id of the attendance log whose comments have to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/refresh": {
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "Refresh the dynamic group",
        "description": "Allows the user to refresh a dynamic group that they have permission to edit.",
        "operationId": "usergroupRefresh",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "The ID of the group to refresh.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/tagmembers": {
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "Assign tags to the members of a specified group",
        "description": "Allows the user to assign tags to the users of a group that they have permission to edit.",
        "operationId": "usergroupTagmembers",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "The id of the group to save whose members have to be tagged.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The tags to assign to the members of the specified group, in JSON format.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/usergroup/untagmembers": {
      "get": {
        "tags": [
          "usergroup"
        ],
        "summary": "Unassign tags from the members of a specified group",
        "description": "Allows the user to unassign tags to the users of a group that they have permission to edit.",
        "operationId": "usergroupUntagmembers",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "The id of the group to save whose members have to be untagged.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The tags to unassign from the members of the specified group, in JSON format.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/get": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Get rating for one or more entities",
        "operationId": "ratingGet",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The entity type to get the rating.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityids",
            "in": "query",
            "description": "List of ids to get the ratings.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/rate": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Rates one entity",
        "operationId": "ratingRate",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The entity type to rate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Id of the entity to rate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value from 0 to 100 with the rating.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "annonymous",
            "in": "query",
            "description": "Whether to post as annonymous.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment associated with this review. Comment can be updated later on another request too.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatecomment",
            "in": "query",
            "description": "Whether to update the comments. Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/getall": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Gets the full ratings and comments for a specific entity",
        "operationId": "ratingGetall",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The entity type to get the rating.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Id of the entity to get the ratings.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mostrecentfirst",
            "in": "query",
            "description": "True to show most recent first, otherwise most helpful first.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/getcomments": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Gets all the comments for a rating",
        "operationId": "ratingGetcomments",
        "parameters": [
          {
            "name": "ratingid",
            "in": "query",
            "description": "The ID of the rating to get all comments.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/postcomment": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Posts a comments for in a rating",
        "operationId": "ratingPostcomment",
        "parameters": [
          {
            "name": "ratingid",
            "in": "query",
            "description": "The ID of the rating to post the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Text of the comment to post.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "annonymous",
            "in": "query",
            "description": "True to post the comment annonymously.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/vote": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Votes up or down a rating",
        "operationId": "ratingVote",
        "parameters": [
          {
            "name": "ratingid",
            "in": "query",
            "description": "The ID of the rating to vote on.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vote",
            "in": "query",
            "description": "1 to vote up, -1 to vote down.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/flag": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Flags one rating for moderation",
        "operationId": "ratingFlag",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The rating to flag.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment why should this should be removed.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/flagcomment": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Flags one comment for moderation",
        "operationId": "ratingFlagcomment",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The comment to flag.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment why should this should be removed.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/getpendingmoderation": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Shows a list of the ratings and comments that are pending for moderation",
        "description": "Allows the user to view the list of pending ratings and comments.",
        "operationId": "ratingGetpendingmoderation",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/moderate": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Allows the user to accept or reject a comment",
        "description": "Allows the user to approve or reject a comment or rating.",
        "operationId": "ratingModerate",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Either 'rating' or 'comment' depending on what you want to moderate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Id of the rating or comment, as specified in type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "approve",
            "in": "query",
            "description": "True to approve, false to reject.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/rating/getpending": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Gets info of pre-saved and pre-approved ratings",
        "operationId": "ratingGetpending",
        "parameters": [
          {
            "name": "getgroup",
            "in": "query",
            "description": "The ID of the group of pending ratings to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "rateid",
            "in": "query",
            "description": "Rate this before returning.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "rateval",
            "in": "query",
            "description": "The value used to rate the item specified in rateid.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rating/ratepending": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Rates a pre-saved and pre-approved entity",
        "operationId": "ratingRatepending",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "The ID of the group of with pre-approved ratings.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "rateid",
            "in": "query",
            "description": "Rate this before returning.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value from 0 to 100 with the rating.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "annonymous",
            "in": "query",
            "description": "Whether to post as annonymous.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment associated with this review. Comment can be updated later on another request too.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatecomment",
            "in": "query",
            "description": "Whether to update the comments. Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/report/query": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Query and load a specified report",
        "description": "Allows the user to run reports with the exception of attendance analytics reports.",
        "operationId": "reportQuery",
        "parameters": [
          {
            "name": "reportname",
            "in": "query",
            "description": "The name of the report to execute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/report/list": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "View a list of available reports",
        "description": "Allows the user to view the complete list of available, canned reports.",
        "operationId": "reportList",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/report/prepare": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Queries and loads the specified report, in background.",
        "description": "Allows the user to run reports, in background, with the exception of attendance analytics reports.",
        "operationId": "reportPrepare",
        "parameters": [
          {
            "name": "reportname",
            "in": "query",
            "description": "The name of the report to execute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repformat",
            "in": "query",
            "description": "The format of the resulting report. Json, pdf, csv, ...",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fillgroupid",
            "in": "query",
            "description": "If specified, the result is used to fill the group with the given ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupby",
            "in": "query",
            "description": "How to group the records. In the format 'col1+col2|col3+col4",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshgroup",
            "in": "query",
            "description": "The ID of the group to check (and refresh) before processing the report.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filtertext",
            "in": "query",
            "description": "The user friendly text of the applied filters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/memorizedreport/list": {
      "get": {
        "tags": [
          "memorizedreport"
        ],
        "summary": "View a list of all his memorized reports",
        "description": "Allows the user to view the list of all memorized reports that they have created.",
        "operationId": "memorizedreportList",
        "parameters": [
          {
            "name": "customname",
            "in": "query",
            "description": "If specified filters the memorized reports by custom name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/memorizedreport/{id}": {
      "get": {
        "tags": [
          "memorizedreport"
        ],
        "summary": "View details of a memorized report",
        "description": "Allows the user to view an individual memorized report and its details.",
        "operationId": "memorizedreportGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the report configuration to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "memorizedreport"
        ],
        "summary": "Create or edit a memorized report",
        "description": "Allows the user to create or edit a memorized report for themselves.",
        "operationId": "memorizedreportSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the report settings to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "internalname",
                  "name",
                  "customname",
                  "url",
                  "format"
                ],
                "properties": {
                  "internalname": {
                    "type": "string",
                    "description": "The internal name of the report."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the report."
                  },
                  "customname": {
                    "type": "string",
                    "description": "The custom name of the report."
                  },
                  "customdescription": {
                    "type": "string",
                    "description": "The custom name of the report."
                  },
                  "url": {
                    "type": "string",
                    "description": "The url of the report."
                  },
                  "format": {
                    "type": "string",
                    "description": "The default format of the report."
                  },
                  "params": {
                    "type": "string",
                    "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3."
                  },
                  "filters": {
                    "type": "string",
                    "description": "A JSON containing the selected filters."
                  },
                  "filtertext": {
                    "type": "string",
                    "description": "The user friendly text of the applied filters."
                  },
                  "groupby": {
                    "type": "string",
                    "description": "How to group the records. In the format 'col1+col2|col3+col4"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "memorizedreport"
        ],
        "summary": "Delete memorized report",
        "description": "Allows the user to delete a memorized report that they have created.",
        "operationId": "memorizedreportDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the report settings to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/reportschedule/{id}": {
      "delete": {
        "tags": [
          "reportschedule"
        ],
        "summary": "Delete a report schedule",
        "description": "Allows the user to delete a scheduled report that they created.",
        "operationId": "reportscheduleDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the report schedule to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "reportschedule"
        ],
        "summary": "Get a report schedule",
        "description": "Allows the user to view the list of reports that they scheduled.",
        "operationId": "reportscheduleGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the schedule to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "reportschedule"
        ],
        "summary": "Create or edit a report schedule",
        "description": "Allows the user to create or edit a scheduled report.",
        "operationId": "reportscheduleSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the schedule save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "time",
                  "frequency",
                  "active",
                  "reportids",
                  "sendtome"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the schedule."
                  },
                  "details": {
                    "type": "string",
                    "description": "The details of the schedule."
                  },
                  "startdate": {
                    "type": "string",
                    "description": "The start date of the schedule.",
                    "format": "date-time"
                  },
                  "enddate": {
                    "type": "string",
                    "description": "The end date of the schedule."
                  },
                  "time": {
                    "type": "string",
                    "description": "The time of the schedule."
                  },
                  "frequency": {
                    "type": "string",
                    "description": "The frequency of the schedule."
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Specifies whether the schedule is active or not."
                  },
                  "reportids": {
                    "type": "string",
                    "description": "A comma separated list containing the ids of the memorized reports to be scheduled."
                  },
                  "daterangepreset": {
                    "type": "string",
                    "description": "The date range preset for this schedule."
                  },
                  "daterangestart": {
                    "type": "string",
                    "description": "The start of the custom date range.",
                    "format": "date-time"
                  },
                  "daterangeend": {
                    "type": "string",
                    "description": "The end of the custom date range.",
                    "format": "date-time"
                  },
                  "sendtome": {
                    "type": "boolean",
                    "description": "Specifies wheter the reports should be sent to the current user or not."
                  },
                  "sendtoaddress": {
                    "type": "string",
                    "description": "The e-mail address to send the generated reports."
                  },
                  "recipientids": {
                    "type": "string",
                    "description": "A comma separated list containing the ids of the user who should receive the generated reports."
                  },
                  "fromname": {
                    "type": "string",
                    "description": "The sender name for the e-mail."
                  },
                  "replyto": {
                    "type": "string",
                    "description": "The reply to address for the e-mail."
                  },
                  "attachmentpassword": {
                    "type": "string",
                    "description": "The attachments password for the e-mail."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject for the e-mail."
                  },
                  "body": {
                    "type": "string",
                    "description": "The body for the e-mail."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/reportschedule/list": {
      "get": {
        "tags": [
          "reportschedule"
        ],
        "summary": "View a list of the scheduled reports",
        "description": "Allows the user to view a list of the scheduled reports.",
        "operationId": "reportscheduleList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/report/tagresults": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.",
        "description": "Allows the user to use a report to assign or unassign tags.",
        "operationId": "reportTagresults",
        "parameters": [
          {
            "name": "reportname",
            "in": "query",
            "description": "The name of the report to execute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assign",
            "in": "query",
            "description": "Specify whether the specified tags have to be assigned or unassigned.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The tags to assign (or unassign) to the resulting users in the report, in JSON format.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/seminar/{id}": {
      "post": {
        "tags": [
          "seminar"
        ],
        "summary": "Create or edit a event",
        "description": "Allows the user to create or edit a event.",
        "operationId": "seminarSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "code"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event."
                  },
                  "codegroup": {
                    "type": "string",
                    "description": "Optional code to group events."
                  },
                  "code": {
                    "type": "string",
                    "description": "The unique code of the event."
                  },
                  "term": {
                    "type": "string",
                    "description": "The term of the event."
                  },
                  "department": {
                    "type": "string",
                    "description": "The department of the event."
                  },
                  "details": {
                    "type": "string",
                    "description": "The details of the event."
                  },
                  "recurringschedule": {
                    "type": "string",
                    "description": "The recurring schedule of the event, a JSON-formatted array. Each item must contain an action (set/remove) and the schedule properties, as returned by event.get."
                  },
                  "onetimeschedule": {
                    "type": "string",
                    "description": "The one-time schedule of the event, a JSON-formatted array. Each item must contain an action (set/remove) and the schedule properties, as returned by event.get."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "seminar"
        ],
        "summary": "Search and view details of a event",
        "description": "Allows the user to view a event and its details.",
        "operationId": "seminarGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the seminar to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "seminar"
        ],
        "summary": "Delete an event",
        "description": "Allows the user to delete an existing event.",
        "operationId": "seminarDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the seminar to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/seminar/list": {
      "get": {
        "tags": [
          "seminar"
        ],
        "summary": "View a list of events",
        "description": "Allows the user to view the full list of events in the past, present, and future.",
        "operationId": "seminarList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "summaryonly",
            "in": "query",
            "description": "True to return only the event information and not the associated schedule, dept, etc. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "termid",
            "in": "query",
            "description": "Id of the term to list the events. Null to list all events.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/station/list": {
      "get": {
        "tags": [
          "station"
        ],
        "summary": "View a list of sign-in stations",
        "description": "Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.",
        "operationId": "stationList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/station/{id}": {
      "delete": {
        "tags": [
          "station"
        ],
        "summary": "Delete a sign-in station",
        "description": "Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.",
        "operationId": "stationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the sign-in station to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "station"
        ],
        "summary": "View details of a sign-in station",
        "description": "Allows the user to view an individual sign-in station and its details.",
        "operationId": "stationGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "station"
        ],
        "summary": "Create or edit a sign-in station",
        "description": "Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.",
        "operationId": "stationSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the sign-in station to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "mode",
                  "passcode"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The friendly name of the sign-in station."
                  },
                  "mode": {
                    "type": "string",
                    "description": "The mode of the sign-in station."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title to display in the station."
                  },
                  "instructions": {
                    "type": "string",
                    "description": "Instructions to display in the station."
                  },
                  "passcode": {
                    "type": "string",
                    "description": "The passcode used to change settings in the station, empty text to disable security."
                  },
                  "location": {
                    "type": "string",
                    "description": "Id of the location Title to display in the station.",
                    "format": "uuid"
                  },
                  "showids": {
                    "type": "boolean",
                    "description": "Whether to show the visitor ids in the sign-in station."
                  },
                  "shownames": {
                    "type": "boolean",
                    "description": "Whether to show the visitor names in the sign-in station."
                  },
                  "showphotos": {
                    "type": "boolean",
                    "description": "Whether to show the visitor photos in the sign-in station."
                  },
                  "infotimeout": {
                    "type": "integer",
                    "description": "Specifies how much time the success or error message is shown after a swipe.",
                    "format": "int32"
                  },
                  "photopixelwidth": {
                    "type": "integer",
                    "description": "Specifies the pixel width of the photos in the sign-in station.",
                    "format": "int32"
                  },
                  "allowcreatingvisitors": {
                    "type": "boolean",
                    "description": "Whether to allow creating visitors from the sign-in station."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/station/getinfo": {
      "get": {
        "tags": [
          "station"
        ],
        "summary": "Gets a the info to display in the sign-in station by it's ID.",
        "operationId": "stationGetinfo",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event, to override the one by schedule.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/station/unlock": {
      "get": {
        "tags": [
          "station"
        ],
        "summary": "Unlocks the sign-in station.",
        "operationId": "stationUnlock",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the sign-in station to unlock.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "passcode",
            "in": "query",
            "description": "The passcode to unlock the station.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "The authentication method. Valid values are 'token' and 'cookie'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/station/getlicense": {
      "get": {
        "tags": [
          "station"
        ],
        "summary": "Gets the current license information",
        "operationId": "stationGetlicense",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station whose account's license has to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/station/getcurrentterms": {
      "get": {
        "tags": [
          "station"
        ],
        "summary": "Get all the current terms",
        "operationId": "stationGetcurrentterms",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station whose account's current terms have to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/swipe/saveanonym": {
      "post": {
        "tags": [
          "swipe"
        ],
        "summary": "Creates a new swipe from a sign-in station, and if possible, creates the attendance log",
        "operationId": "swipeSaveanonym",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "station",
                  "user"
                ],
                "properties": {
                  "station": {
                    "type": "string",
                    "description": "The id of the sign-in station.",
                    "format": "uuid"
                  },
                  "client": {
                    "type": "string",
                    "description": "The id of the client where this swipe is being generated."
                  },
                  "time": {
                    "type": "string",
                    "description": "The date and time of the swipe. Now is considered if omitted.",
                    "format": "date-time"
                  },
                  "user": {
                    "type": "string",
                    "description": "The user's card number."
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the event whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location where the swipe has to be saved.",
                    "format": "uuid"
                  },
                  "type": {
                    "type": "integer",
                    "description": "Specifies the attendance type (0 = Sign-In, 1 = Sign-Out).",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notification/getforstation": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Gets all public (in station) notifications for the specific user",
        "operationId": "notificationGetforstation",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/actionassignment/{id}": {
      "delete": {
        "tags": [
          "actionassignment"
        ],
        "summary": "Remove an action item from an action plan",
        "description": "Allows a user to remove an action item from a user's action plan.",
        "operationId": "actionassignmentDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action assignment to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "actionassignment"
        ],
        "summary": "Search and view details of an action item assigned to a user",
        "description": "Allows the user to view an individual action item and its details, minus all the action item's updates.",
        "operationId": "actionassignmentGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action assignment to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionassignment/list": {
      "get": {
        "tags": [
          "actionassignment"
        ],
        "summary": "View a list of action items in a user's plan",
        "description": "Allows the user to view the list of all action items for a specified user.",
        "operationId": "actionassignmentList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "assignee",
            "in": "query",
            "description": "The assignee's id to filter the assignments.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status to filter the assignments.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionassignment/listmine": {
      "get": {
        "tags": [
          "actionassignment"
        ],
        "summary": "List public action assignments assigned to the logged user",
        "operationId": "actionassignmentListmine",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status to filter the assignments.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionassignment/listhistory": {
      "get": {
        "tags": [
          "actionassignment"
        ],
        "summary": "View the history of an action item assigned to a user",
        "description": "Allows the user to view an individual action plan and its details, including all the action plan's updates.",
        "operationId": "actionassignmentListhistory",
        "parameters": [
          {
            "name": "actionassignment",
            "in": "query",
            "description": "The action assignment's id whose history the user wants to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionassignment/listpublichistory": {
      "get": {
        "tags": [
          "actionassignment"
        ],
        "summary": "List public action assignment history",
        "operationId": "actionassignmentListpublichistory",
        "parameters": [
          {
            "name": "actionassignment",
            "in": "query",
            "description": "The action assignment's id whose history the user wants to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionassignment/save": {
      "post": {
        "tags": [
          "actionassignment"
        ],
        "summary": "Add an action item to a user's action plan",
        "description": "Allows the user to edit or assign an action item to a user",
        "operationId": "actionassignmentSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "item",
                  "datedue",
                  "completed"
                ],
                "properties": {
                  "assignee": {
                    "type": "string",
                    "description": "The assignee of the item.",
                    "format": "uuid"
                  },
                  "group": {
                    "type": "string",
                    "description": "The group to assing the item.",
                    "format": "uuid"
                  },
                  "item": {
                    "type": "string",
                    "description": "The action item to assign."
                  },
                  "event": {
                    "type": "string",
                    "description": "The event of the assignment."
                  },
                  "datedue": {
                    "type": "string",
                    "description": "The date when the action assignment is due.",
                    "format": "date-time"
                  },
                  "dateexpired": {
                    "type": "string",
                    "description": "The date when the action assignment is expired.",
                    "format": "date-time"
                  },
                  "followers": {
                    "type": "boolean",
                    "description": "A JSON array containing the ids of the users that are followers of this action item"
                  },
                  "notifyassignee": {
                    "type": "boolean",
                    "description": "Specifies if the item's assignee must be notified of it."
                  },
                  "notes": {
                    "type": "string",
                    "description": "The assignment's notes."
                  },
                  "autocomplete": {
                    "type": "boolean",
                    "description": "Specifies if the assignment can be completed automatically or not."
                  },
                  "completed": {
                    "type": "boolean",
                    "description": "Specifies if the assignment is completed or not."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionassignment/savehistory": {
      "post": {
        "tags": [
          "actionassignment"
        ],
        "summary": "Update an action item assigned to a user",
        "description": "Allows the user to update or mark an action item as complete.",
        "operationId": "actionassignmentSavehistory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "actionassignment",
                  "datedue",
                  "completed"
                ],
                "properties": {
                  "actionassignment": {
                    "type": "string",
                    "description": "The action assignment's id whose follow up the user wants to save.",
                    "format": "uuid"
                  },
                  "datedue": {
                    "type": "string",
                    "description": "The date when the action assignment is due.",
                    "format": "date-time"
                  },
                  "dateexpired": {
                    "type": "string",
                    "description": "The date when the action assignment is expired.",
                    "format": "date-time"
                  },
                  "followers": {
                    "type": "string",
                    "description": "A JSON array containing the ids of the users that are followers of this action item"
                  },
                  "notifyassignee": {
                    "type": "boolean",
                    "description": "Specifies if the item's assignee must be notified of it."
                  },
                  "notes": {
                    "type": "string",
                    "description": "The assignment's follow up notes."
                  },
                  "autocomplete": {
                    "type": "boolean",
                    "description": "Specifies if the assignment can be completed automatically or not."
                  },
                  "completed": {
                    "type": "string",
                    "description": "Specifies if the assignment was completed or not."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionassignment/markcomplete": {
      "get": {
        "tags": [
          "actionassignment"
        ],
        "summary": "Bulk complete action items",
        "description": "Allows the user to bulk complete action items.",
        "operationId": "actionassignmentMarkcomplete",
        "parameters": [
          {
            "name": "assignee",
            "in": "query",
            "description": "The assignee of the item.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The group to assing the item.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "item",
            "in": "query",
            "description": "The action item to assign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "description": "The assignment's notes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionitem/{id}": {
      "delete": {
        "tags": [
          "actionitem"
        ],
        "summary": "Delete an action item",
        "description": "Allows the user to delete an action item.",
        "operationId": "actionitemDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action item to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "actionitem"
        ],
        "summary": "Search and view details of an action item",
        "description": "Allows the user to view an individual action item and its details.",
        "operationId": "actionitemGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action item to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "actionitem"
        ],
        "summary": "Create or edit an action item",
        "description": "Allows the user to edit an action item.",
        "operationId": "actionitemSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action item to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "type",
                  "code",
                  "name",
                  "durationbasis",
                  "duration"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The id of the action type of the item to save.",
                    "format": "uuid"
                  },
                  "code": {
                    "type": "string",
                    "description": "The code of the action item."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the action item."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the action item."
                  },
                  "durationbasis": {
                    "type": "integer",
                    "description": "Specifies the duration basis of the action item (0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).",
                    "format": "int32"
                  },
                  "duration": {
                    "type": "integer",
                    "description": "The default duration value of the action item.",
                    "format": "int32"
                  },
                  "expirationbasis": {
                    "type": "integer",
                    "description": "Specifies the expiration basis of the action item (0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).",
                    "format": "int32"
                  },
                  "expiration": {
                    "type": "integer",
                    "description": "The default expiration value of the action item.",
                    "format": "int32"
                  },
                  "service": {
                    "type": "string",
                    "description": "The id of the service of the item to save.",
                    "format": "uuid"
                  },
                  "eventbased": {
                    "type": "boolean",
                    "description": "Specifies if the item is event based."
                  },
                  "multipleassignment": {
                    "type": "boolean",
                    "description": "Specifies if the item can me assigned multiple times to the same user."
                  },
                  "followers": {
                    "type": "boolean",
                    "description": "A JSON array containing the ids of the users that are followers of this action item"
                  },
                  "notifyassignee": {
                    "type": "boolean",
                    "description": "Specifies if the item's assignee must be notified of it."
                  },
                  "isrestricted": {
                    "type": "boolean",
                    "description": "Whether the access to this action item is restricted."
                  },
                  "viewroles": {
                    "type": "string",
                    "description": "The roles that can view the action item, in JSON format."
                  },
                  "editroles": {
                    "type": "string",
                    "description": "The roles that can edit the action item, in JSON format."
                  },
                  "scopes": {
                    "type": "string",
                    "description": "The scopes that have access to this action item, in JSON format."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionitem/list": {
      "get": {
        "tags": [
          "actionitem"
        ],
        "summary": "View a list of action items",
        "description": "Allows the user to view a list of action items",
        "operationId": "actionitemList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionpack/{id}": {
      "delete": {
        "tags": [
          "actionpack"
        ],
        "summary": "Delete an action item pack",
        "description": "Allows the user to delete an action item pack.",
        "operationId": "actionpackDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action pack to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "actionpack"
        ],
        "summary": "View details of an action item pack",
        "description": "Allows the user to view an individual action pack and its details.",
        "operationId": "actionpackGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action pack to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "actionpack"
        ],
        "summary": "Create or edit an action item pack",
        "description": "Allows the user to edit an action item pack.",
        "operationId": "actionpackSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action pack to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "code",
                  "name"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The code of the action pack."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the action pack."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the action pack."
                  },
                  "items": {
                    "type": "boolean",
                    "description": "A JSON array containing the ids of the action items that belong to this pack"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionpack/list": {
      "get": {
        "tags": [
          "actionpack"
        ],
        "summary": "View a list of action item packs",
        "description": "Allows the user to view the full list of action item packs.",
        "operationId": "actionpackList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actionpack/assign": {
      "get": {
        "tags": [
          "actionpack"
        ],
        "summary": "Assign an action item pack to a user",
        "description": "Allows the user to assign an action pack to a user or group of users.",
        "operationId": "actionpackAssign",
        "parameters": [
          {
            "name": "pack",
            "in": "query",
            "description": "The id of the action pack to assign.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "assignee",
            "in": "query",
            "description": "The assignee of the pack.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The group to assign the pack.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemsdata",
            "in": "query",
            "description": "A JSON array containing the action items' data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne).",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "description": "The assignment's notes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actiontype/{id}": {
      "delete": {
        "tags": [
          "actiontype"
        ],
        "summary": "Delete an action item type",
        "description": "Allows the user to delete an action item type.",
        "operationId": "actiontypeDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action type to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "actiontype"
        ],
        "summary": "View details of an action item type",
        "description": "Allows the user to view an individual action item type and its details.",
        "operationId": "actiontypeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action type to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "actiontype"
        ],
        "summary": "Create or edit an action item type",
        "description": "Allows the user to dit an action item type.",
        "operationId": "actiontypeSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the action type to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the action type."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the action type."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/actiontype/list": {
      "get": {
        "tags": [
          "actiontype"
        ],
        "summary": "View a list of action item types",
        "description": "Allows the user to view the full list of action item types.",
        "operationId": "actiontypeList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/userprofile/list": {
      "get": {
        "tags": [
          "userprofile"
        ],
        "summary": "View the list of user profiles",
        "description": "Allows the user to view the full list of profiles that they have permission to view.",
        "operationId": "userprofileList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/userprofile/{id}": {
      "get": {
        "tags": [
          "userprofile"
        ],
        "summary": "View a specific user profile",
        "description": "Allows the user to view individual user profiles and their details, provided they have permission to view that profile.",
        "operationId": "userprofileGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the profile question set.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "userprofile"
        ],
        "summary": "Create or edit user profile questions",
        "description": "Allows the user to create or edit a user profile.",
        "operationId": "userprofileSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the profile question set.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "questions"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the profile."
                  },
                  "questions": {
                    "type": "string",
                    "description": "JSON serialized questions."
                  },
                  "canviewown": {
                    "type": "boolean",
                    "description": "Whether the user can view it's own profile."
                  },
                  "caneditown": {
                    "type": "boolean",
                    "description": "Whether the user can edit it's own profile."
                  },
                  "viewroles": {
                    "type": "string",
                    "description": "The roles that can view the answers, in JSON format."
                  },
                  "editroles": {
                    "type": "string",
                    "description": "The roles that can edit the answers, in JSON format."
                  },
                  "appliestoroles": {
                    "type": "string",
                    "description": "The roles this profile questionnaire can be used for, in JSON format."
                  },
                  "scopes": {
                    "type": "string",
                    "description": "The scopes that have access to this questionnaire, in JSON format."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "userprofile"
        ],
        "summary": "Delete a user profile",
        "description": "Allows the user to delete a profile from the list of profiles that they have permission to edit.",
        "operationId": "userprofileDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user profile to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/userprofile/listquestions": {
      "get": {
        "tags": [
          "userprofile"
        ],
        "summary": "Gets the list of all the available user questions",
        "description": "Allows the user to view the list of questions in a profile that they have permission to view.",
        "operationId": "userprofileListquestions",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/userprofile/getallview": {
      "get": {
        "tags": [
          "userprofile"
        ],
        "summary": "Shows the profile for a specific (or current) user, based on each profile questionnaire questions.",
        "description": "Allows the user to view a profile for a user, provided they have permission to view that user and profile.",
        "operationId": "userprofileGetallview",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the user to view, or empty for current user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/userprofile/saveanswers": {
      "post": {
        "tags": [
          "userprofile"
        ],
        "summary": "Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.",
        "description": "Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.",
        "operationId": "userprofileSaveanswers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "answers"
                ],
                "properties": {
                  "userid": {
                    "type": "string",
                    "description": "The id of the user to update, or empty for current user.",
                    "format": "uuid"
                  },
                  "answers": {
                    "type": "string",
                    "description": "The json object containing the answers, in the format of {key:value, ...}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/userprofile/preparestats": {
      "get": {
        "tags": [
          "userprofile"
        ],
        "summary": "Gets the statistics of a user group",
        "description": "Allows the user to view the demographic statistics of a user group.",
        "operationId": "userprofilePreparestats",
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "The ID of the group, specified as 'group=...'",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/{id}": {
      "get": {
        "tags": [
          "advrole"
        ],
        "summary": "View details of a role",
        "description": "Allows the user to view a role and its details.",
        "operationId": "advroleGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the location to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "advrole"
        ],
        "summary": "Delete a role",
        "description": "Allows the user to delete a role from the list of available roles.",
        "operationId": "advroleDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the location to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "advrole"
        ],
        "summary": "Create or edit a role",
        "description": "Allows the user to create or edit a role's permissions.",
        "operationId": "advroleSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the role to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "description",
                  "policies",
                  "editroles"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the role."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the role, for admin use."
                  },
                  "policies": {
                    "type": "string",
                    "description": "The policies for the role."
                  },
                  "viewroles": {
                    "type": "string",
                    "description": "CSV list of the roles this role can view."
                  },
                  "editroles": {
                    "type": "string",
                    "description": "CSV list of the roles this role can edit."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/list": {
      "get": {
        "tags": [
          "advrole"
        ],
        "summary": "Lists the roles for the current account",
        "operationId": "advroleList",
        "parameters": [
          {
            "name": "includepolicies",
            "in": "query",
            "description": "True to include the policies, defaults to false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeinternal",
            "in": "query",
            "description": "True to include the internal roles too.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name of the role.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/listtemplates": {
      "get": {
        "tags": [
          "advrole"
        ],
        "summary": "View a list of role templates",
        "description": "Allows the user to view the full list of available role templates.",
        "operationId": "advroleListtemplates",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/listmaps": {
      "get": {
        "tags": [
          "advrole"
        ],
        "summary": "Lists the maps a roles is mapped to",
        "operationId": "advroleListmaps",
        "parameters": [
          {
            "name": "roleid",
            "in": "query",
            "description": "The id of the role to list the maps.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/listrolesmapped": {
      "get": {
        "tags": [
          "advrole"
        ],
        "summary": "Lists the roles mappings",
        "operationId": "advroleListrolesmapped",
        "parameters": [
          {
            "name": "map",
            "in": "query",
            "description": "List only the roles in the specified map.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/savemapping": {
      "post": {
        "tags": [
          "advrole"
        ],
        "summary": "Saves a role mapping",
        "description": "Allows the user to add a role to a mapped category on the 'Role Mapping' page.",
        "operationId": "advroleSavemapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "map",
                  "roleid"
                ],
                "properties": {
                  "map": {
                    "type": "string",
                    "description": "The map name to save the role."
                  },
                  "roleid": {
                    "type": "string",
                    "description": "The id of the role.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/deletemapping": {
      "delete": {
        "tags": [
          "advrole"
        ],
        "summary": "Delete a role mapping",
        "description": "Allows the user to delete a role from its mapped categories on the 'Role Mapping' page.",
        "operationId": "advroleDeletemapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "map",
                  "roleid"
                ],
                "properties": {
                  "map": {
                    "type": "string",
                    "description": "The map name to save the role."
                  },
                  "roleid": {
                    "type": "string",
                    "description": "The id of the role.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/checkperm": {
      "get": {
        "tags": [
          "advrole"
        ],
        "summary": "Checks the permissions are assigned for the given roles",
        "operationId": "advroleCheckperm",
        "parameters": [
          {
            "name": "roles",
            "in": "query",
            "description": "CSV list of the role ids to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "description": "CSV list of the permissions to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/addmissing": {
      "get": {
        "tags": [
          "advrole"
        ],
        "summary": "Adds the missing permissions to a role. Requires access to advrole.save",
        "operationId": "advroleAddmissing",
        "parameters": [
          {
            "name": "roles",
            "in": "query",
            "description": "CSV list of the role ids to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "description": "CSV list of the permissions to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advroles/userlist": {
      "get": {
        "tags": [
          "advroles"
        ],
        "summary": "List users. Alias to user.list, use that one instead.",
        "operationId": "advrolesUserlist",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "The id of the role to filter users by, or empty to return all users.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "onlywithoutcard",
            "in": "query",
            "description": "If is 1 then only the users without a card are returned, otherwise all users are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advrole/userupgrade": {
      "get": {
        "tags": [
          "advrole"
        ],
        "summary": "Upgrade a user to another role (requires permission to edit those roles)",
        "description": "Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.",
        "operationId": "advroleUserupgrade",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "Id of the user to upgrade",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "Id of the role to add",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/security/assessuser": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Returns the list of permissions for a specific user",
        "operationId": "securityAssessuser",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "User ID to list the effective permissions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/security/assessrole": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Returns the list of permissions for a specific role",
        "operationId": "securityAssessrole",
        "parameters": [
          {
            "name": "roleid",
            "in": "query",
            "description": "Role ID to list the effective permissions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/security/assesspermission": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Returns the list of users for a specific permission",
        "operationId": "securityAssesspermission",
        "parameters": [
          {
            "name": "commandname",
            "in": "query",
            "description": "Name of the action or command to get the roles.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/security/assessscope": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Returns the list of users for a specific user",
        "operationId": "securityAssessscope",
        "parameters": [
          {
            "name": "locationid",
            "in": "query",
            "description": "Location ID to list the users with that scope.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/report/permissionsbyuser": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Permissions by user report",
        "description": "Lists all the users in the system including their corresponding permissions.",
        "operationId": "reportPermissionsbyuser",
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/report/attanalyticsprepare": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Query and load an attendance analytics report",
        "description": "Allows the user to query and load attendance analytics reports.",
        "operationId": "reportAttanalyticsprepare",
        "parameters": [
          {
            "name": "reportname",
            "in": "query",
            "description": "The name of the report to execute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshgroup",
            "in": "query",
            "description": "The ID of the group to check (and refresh) before processing the report.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/computerlab/getcomputer": {
      "get": {
        "tags": [
          "computerlab"
        ],
        "summary": "Search and view details of a computer",
        "description": "Allows the user to search and view an individual computer and its details.",
        "operationId": "computerlabGetcomputer",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique device id of the computer to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/computerlab/listcomputers": {
      "get": {
        "tags": [
          "computerlab"
        ],
        "summary": "View a list of computers",
        "description": "Allows the user to view the list of all computers.",
        "operationId": "computerlabListcomputers",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location whose computers have to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "freeonly",
            "in": "query",
            "description": "If true, only free computers will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/computerlab/savecomputer": {
      "post": {
        "tags": [
          "computerlab"
        ],
        "summary": "Create or edit a computer",
        "description": "Allows the user to create or edit a computer.",
        "operationId": "computerlabSavecomputer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "location"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the computer save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the computer."
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location where the computer is.",
                    "format": "uuid"
                  },
                  "macaddress": {
                    "type": "string",
                    "description": "The mac address of the computer."
                  },
                  "ipaddress": {
                    "type": "string",
                    "description": "The ip address of the computer."
                  },
                  "details": {
                    "type": "string",
                    "description": "The details of the computer."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/computerlab/deletecomputer": {
      "delete": {
        "tags": [
          "computerlab"
        ],
        "summary": "Delete a computer",
        "description": "Allows the user to delete an existing computer.",
        "operationId": "computerlabDeletecomputer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique device id of the computer to delete."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/computerlab/liststations": {
      "get": {
        "tags": [
          "computerlab"
        ],
        "summary": "View a list of sign-in stations available for computer labs.",
        "description": "Allows the user to view the list of sign-in stations that are available for computer labs.",
        "operationId": "computerlabListstations",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/computerlab/issignedin": {
      "get": {
        "tags": [
          "computerlab"
        ],
        "summary": "Gets whether a user is signed-in or not.",
        "operationId": "computerlabIssignedin",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/computerlab/saveswipe": {
      "post": {
        "tags": [
          "computerlab"
        ],
        "summary": "Save a new swipe from a computer in a computer lab.",
        "operationId": "computerlabSaveswipe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "station",
                  "computer",
                  "location",
                  "user"
                ],
                "properties": {
                  "station": {
                    "type": "string",
                    "description": "The id of the sign-in station.",
                    "format": "uuid"
                  },
                  "computer": {
                    "type": "string",
                    "description": "The id of the computer where the user is swiping.",
                    "format": "uuid"
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location where the swipe has to be saved.",
                    "format": "uuid"
                  },
                  "user": {
                    "type": "string",
                    "description": "The user's card number."
                  },
                  "time": {
                    "type": "string",
                    "description": "The date and time of the swipe. Now is considered if omitted.",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "integer",
                    "description": "Specifies the attendance type (0 = Sign-In, 1 = Sign-Out).",
                    "format": "int32"
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the event whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "usage": {
                    "type": "string",
                    "description": "A JSON array containing the applications used during the session. Objects in array must have the following properties Application, StartTime and EndTime."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/computerlab/listlabs": {
      "get": {
        "tags": [
          "computerlab"
        ],
        "summary": "View a list of the locations that use the Computer Lab add-on",
        "description": "Allows the user to view the list of all labs.",
        "operationId": "computerlabListlabs",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/computerlab/getsettings": {
      "get": {
        "tags": [
          "computerlab"
        ],
        "summary": "Loads the settings for a computer lab",
        "description": "Loads the settings for a computer lab.",
        "operationId": "computerlabGetsettings",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the computer lab/location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/computerlab/savesettings": {
      "post": {
        "tags": [
          "computerlab"
        ],
        "summary": "Saves the settings for a computer lab",
        "description": "Saves the settings for a computer lab.",
        "operationId": "computerlabSavesettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "logoutautomatically",
                  "notallowsigninmultiplestations",
                  "trackapplicationsused"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the computer lab/location.",
                    "format": "uuid"
                  },
                  "logoutautomatically": {
                    "type": "boolean",
                    "description": "Whether to log out automatically if screen saver is off."
                  },
                  "logoutminutesinactivity": {
                    "type": "integer",
                    "description": "Minutes after students are signed out if auto log-out is enabled.",
                    "format": "int32"
                  },
                  "notallowsigninmultiplestations": {
                    "type": "boolean",
                    "description": "Whether to prevent users from logging in in multiple stations."
                  },
                  "trackapplicationsused": {
                    "type": "boolean",
                    "description": "Whether to track applications used during the session."
                  },
                  "warnifminutesexceed": {
                    "type": "integer",
                    "description": "Warn if ",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deadendrecording/list": {
      "get": {
        "tags": [
          "deadendrecording"
        ],
        "summary": "Lists the recorded dead ends, if enabled",
        "description": "Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.",
        "operationId": "deadendrecordingList",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deadendrecording/listcomments": {
      "get": {
        "tags": [
          "deadendrecording"
        ],
        "summary": "Lists the comments for a specific dead end",
        "description": "Allows the user to view the comments made on dead end sessions.",
        "operationId": "deadendrecordingListcomments",
        "parameters": [
          {
            "name": "hierarchykey",
            "in": "query",
            "description": "The hierarchy key of the record to get the feedback.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deadendrecording/delete": {
      "delete": {
        "tags": [
          "deadendrecording"
        ],
        "summary": "Deletes a dead-end record group",
        "description": "Allows the user to delete a dead end record group.",
        "operationId": "deadendrecordingDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "hierarchykey"
                ],
                "properties": {
                  "hierarchykey": {
                    "type": "string",
                    "description": "The hierarchy key of the record to delete."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/deadendrecording/save": {
      "post": {
        "tags": [
          "deadendrecording"
        ],
        "summary": "Saves a dead-end record",
        "operationId": "deadendrecordingSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "station"
                ],
                "properties": {
                  "station": {
                    "type": "string",
                    "description": "The id of the sign-in station to get.",
                    "format": "uuid"
                  },
                  "comment": {
                    "type": "string",
                    "description": "User comment."
                  },
                  "locationid": {
                    "type": "string",
                    "description": "The id of the location.",
                    "format": "uuid"
                  },
                  "locationname": {
                    "type": "string",
                    "description": "The name of the location."
                  },
                  "services": {
                    "type": "string",
                    "description": "JSON array of Id, Name, containing the list of services selected"
                  },
                  "eventid": {
                    "type": "string",
                    "description": "The id of the event selected.",
                    "format": "uuid"
                  },
                  "eventname": {
                    "type": "string",
                    "description": "The name of the event selected."
                  },
                  "staffid": {
                    "type": "string",
                    "description": "The id of the staff member selected.",
                    "format": "uuid"
                  },
                  "staffname": {
                    "type": "string",
                    "description": "The name of the staff member selected."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/eventreg/getusers": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "View course registration",
        "description": "Allows the user to view all users registered for an individual course.",
        "operationId": "eventregGetusers",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The event id to list users.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/adduser": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Register a user to a course for attendance",
        "description": "Allows the user to register a user to a course.",
        "operationId": "eventregAdduser",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user has to be registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/addme": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Register current user to a course",
        "description": "Allows the user to make themselves available for individual courses.",
        "operationId": "eventregAddme",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user has to be registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/removeuser": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Remove a user from a course",
        "description": "Allows the user to remove a user from a course's registration.",
        "operationId": "eventregRemoveuser",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/removeme": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Unregister current user from a course",
        "description": "Allows the user to remove themselves from registration to a course.",
        "operationId": "eventregRemoveme",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/getevents": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "View course registration by user",
        "description": "Allows the user to view all courses a given user is registered to, provided they have permission to view that user.",
        "operationId": "eventregGetevents",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The user id to list events.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "termid",
            "in": "query",
            "description": "The term id to list events.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "namefilter",
            "in": "query",
            "description": "The value used to filter the events by name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/getmyevents": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "View the event registrations of the current user",
        "operationId": "eventregGetmyevents",
        "parameters": [
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "termid",
            "in": "query",
            "description": "The term id to list events.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "namefilter",
            "in": "query",
            "description": "The value used to filter the events by name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/addusertoall": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Register a user to assist with all courses",
        "description": "Allows the user to make a staff member available to assist with all courses.",
        "operationId": "eventregAddusertoall",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user has to be registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/addmetoall": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Register current user to all courses",
        "description": "Allows the user to make themselves available for all courses.",
        "operationId": "eventregAddmetoall",
        "parameters": [
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user has to be registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/removeuserfromall": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Remove a user from the registration to all courses",
        "description": "Allows the user to remove a staff member from availability to all courses.",
        "operationId": "eventregRemoveuserfromall",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/removemefromall": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Remove current user from the registration to all courses",
        "description": "Allows the user to remove themselves from availability to all courses.",
        "operationId": "eventregRemovemefromall",
        "parameters": [
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/getuserstoall": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "View the users that are registered to all courses",
        "description": "Allows the user to view all staff members available for all courses.",
        "operationId": "eventregGetuserstoall",
        "parameters": [
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/getusersfromgroup": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Lists the registrations for a course group",
        "description": "Allows the user the get the staff members registered to a specific course group",
        "operationId": "eventregGetusersfromgroup",
        "parameters": [
          {
            "name": "codegroup",
            "in": "query",
            "description": "The code group to list users.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/addusertogroup": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Register a user to an course group",
        "description": "Allows the user to make a staff member available for a course group.",
        "operationId": "eventregAddusertogroup",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "codegroup",
            "in": "query",
            "description": "The code used to group events.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user has to be registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/addmetogroup": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Register current user to a course group",
        "description": "Allows the user to make themselves available for a course group.",
        "operationId": "eventregAddmetogroup",
        "parameters": [
          {
            "name": "codegroup",
            "in": "query",
            "description": "The code used to group events.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user has to be registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/removeuserfromgroup": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Remove a user from a course group",
        "description": "Allows the user to remove a staff member from availability to a course group.",
        "operationId": "eventregRemoveuserfromgroup",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "codegroup",
            "in": "query",
            "description": "The code group of the events/courses.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/removemefromgroup": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Remove current user from a course group",
        "description": "Allows the user to remove themselves from availability to a course group.",
        "operationId": "eventregRemovemefromgroup",
        "parameters": [
          {
            "name": "codegroup",
            "in": "query",
            "description": "The code group of the events/courses.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/getgroups": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "Lists the course group registrations of a user",
        "description": "Allows the user to view the course groups a staff member is available for.",
        "operationId": "eventregGetgroups",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The user id to list events.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/eventreg/getmygroups": {
      "get": {
        "tags": [
          "eventreg"
        ],
        "summary": "View all current user registrations to course groups",
        "description": "Allows the user to view all his registrations to course groups.",
        "operationId": "eventregGetmygroups",
        "parameters": [
          {
            "name": "listname",
            "in": "query",
            "description": "The name of the list where the user is registered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/event/listregistered": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "View a list of courses I am registered to",
        "description": "Allows the user to view the courses they are registered to.",
        "operationId": "eventListregistered",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "summaryonly",
            "in": "query",
            "description": "True to return only the event information and not the associated schedule, dept, etc. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "termid",
            "in": "query",
            "description": "Id of the term to list the events. Null to list all events.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/session/{id}": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "View details of a session",
        "description": "Allows the user to view a session in order to take attendance.",
        "operationId": "sessionGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the session to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/session/bulkupdate": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "Bulk update event sessions",
        "description": "Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.",
        "operationId": "sessionBulkupdate",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to bulk update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessions",
            "in": "query",
            "description": "A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/session/getschedule": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "Gets the schedule for a location, instructor or attendees",
        "operationId": "sessionGetschedule",
        "parameters": [
          {
            "name": "day",
            "in": "query",
            "description": "The day to return. It will also return the whole week for that day.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "attendee",
            "in": "query",
            "description": "The id of the attendee to get the schedule.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location to get the schedule.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "instructor",
            "in": "query",
            "description": "The id of the instructor to get the schedule.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/session/list": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "Gets all future sessions of the current semester",
        "operationId": "sessionList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date to filter the sessions",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date to filter the sessions.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionattendancelog/listevent": {
      "get": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "View the attendance information of an entire class",
        "description": "Allows the user to view the attendance information for an entire class",
        "operationId": "sessionattendancelogListevent",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event whose attendance has to be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionattendancelog/listsummary": {
      "get": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "View the attendance summary for a class and/or a attendee",
        "description": "Allows the user to view the attendance summary for a given class and/or attendee.",
        "operationId": "sessionattendancelogListsummary",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event whose attendance has to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attendeeid",
            "in": "query",
            "description": "The id of the attendee whose attendance has to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "description": "The id of the group whose attendance has to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start date to filter (beginning of time by default).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The end date to filter (today by default).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionattendancelog/mylistsummary": {
      "get": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "View my attendance summary",
        "description": "Allows the user to view their own attendance summary.",
        "operationId": "sessionattendancelogMylistsummary",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event whose attendance has to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start date to filter (beginning of time by default).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The end date to filter (today by default).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionattendancelog/addnote": {
      "get": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "Add a note to a class attendance log",
        "description": "Allows the user to add a note to a class attendance log.",
        "operationId": "sessionattendancelogAddnote",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the attendance log.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text of the note to add.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionattendancelog/{id}": {
      "get": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "View details of a class attendance log",
        "description": "Allows the user to view an individual class attendance log and its details.",
        "operationId": "sessionattendancelogGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the attendance log to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "Create or edit a class attendance log",
        "description": "Allows the user to create or edit a class attendance log.",
        "operationId": "sessionattendancelogSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the att log to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The sign-in date and time in ISO format, if not specified the session date and time will be used.",
                    "format": "date-time"
                  },
                  "session": {
                    "type": "string",
                    "description": "The id of the session where the user signed in.",
                    "format": "uuid"
                  },
                  "user": {
                    "type": "string",
                    "description": "The id of the attendee. If null then all the event session will be updated.",
                    "format": "uuid"
                  },
                  "status": {
                    "type": "string",
                    "description": "The attendance status of the attendee in this session."
                  },
                  "notes": {
                    "type": "string",
                    "description": "The text of the note to add."
                  },
                  "totalminutes": {
                    "type": "integer",
                    "description": "The total time, in minutes, the attendees was in.",
                    "format": "int32"
                  },
                  "logdetails": {
                    "type": "string",
                    "description": "A JSON-serialized array of details, containing Id, Time and Type."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionattendancelog/getuser": {
      "get": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "View the class session attendance information for a specific user",
        "description": "Allows the user to view the attendance for a specified student.",
        "operationId": "sessionattendancelogGetuser",
        "parameters": [
          {
            "name": "attendee",
            "in": "query",
            "description": "The id of the attendee to get statistic for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event whose attendee statistics have to be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionattendancelog/list": {
      "get": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "View attendance logs of the specified session",
        "description": "Allows the user to view the full list of logs from a specified session",
        "operationId": "sessionattendancelogList",
        "parameters": [
          {
            "name": "session",
            "in": "query",
            "description": "The id of the session whose attendees logs have to be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionattendancelog/saveswipe": {
      "post": {
        "tags": [
          "sessionattendancelog"
        ],
        "summary": "Create or edit a class attendance log swipe",
        "description": "Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.",
        "operationId": "sessionattendancelogSaveswipe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "type"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the att log to update.",
                    "format": "uuid"
                  },
                  "type": {
                    "type": "integer",
                    "description": "Specifies the attendance type (0 = Sign-In, 1 = Sign-Out).",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionswipe/{id}": {
      "get": {
        "tags": [
          "sessionswipe"
        ],
        "summary": "View details of a class attendance swipe",
        "description": "Allows the user to view an individual class attendance swipe.",
        "operationId": "sessionswipeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the swipe to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "sessionswipe"
        ],
        "summary": "Delete a session swipe",
        "description": "Allows the user to delete an existing class attendance swipe.",
        "operationId": "sessionswipeDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the session swipe to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionswipe/listunresolved": {
      "get": {
        "tags": [
          "sessionswipe"
        ],
        "summary": "View a list of unresolved swipes",
        "description": "Allows the user to view all unresolved swipes.",
        "operationId": "sessionswipeListunresolved",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionswipe/resolve": {
      "get": {
        "tags": [
          "sessionswipe"
        ],
        "summary": "Resolve a swipe and create the corresponding attendance log",
        "description": "Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.",
        "operationId": "sessionswipeResolve",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the swipe to resolve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "session",
            "in": "query",
            "description": "The id of the session whose swipe has to be saved.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The id of the user who signed-in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionswipe/save": {
      "post": {
        "tags": [
          "sessionswipe"
        ],
        "summary": "Creates a new swipe, and if possible, creates the attendance log",
        "description": "Allows the user to create a new swipe, which would usually result in an attendance log.",
        "operationId": "sessionswipeSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "type",
                  "client"
                ],
                "properties": {
                  "time": {
                    "type": "string",
                    "description": "The date and time of the swipe. Now is considered if omitted.",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "integer",
                    "description": "Specifies the attendance type (0 = Sign-In, 1 = Sign-Out).",
                    "format": "int32"
                  },
                  "cardnumber": {
                    "type": "string",
                    "description": "The number of the swipped card, used if the id was not specified."
                  },
                  "session": {
                    "type": "string",
                    "description": "The id of the session whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "client": {
                    "type": "string",
                    "description": "The unique id of the client whose swipe has to be saved."
                  },
                  "clientname": {
                    "type": "string",
                    "description": "The name of the client whose swipe has to be saved."
                  },
                  "metadata": {
                    "type": "string",
                    "description": "The swipe's metadata in JSON format."
                  },
                  "photosize": {
                    "type": "integer",
                    "description": "The swiping user's photo size.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/event/checksessions": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Edit an event's sessions according to their schedule",
        "description": "Allows the user to edit event sessions.",
        "operationId": "eventChecksessions",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to check.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "autorepair",
            "in": "query",
            "description": "True to automatically fix the invalid sessions.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/listsessions": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "List the sessions available for a specific event",
        "description": "Allows the user to view all the sessions available for a recurring event.",
        "operationId": "sessionregListsessions",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The event id to list sessions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date of the session to find.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/listupcoming": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "View a list of upcoming event sessions",
        "description": "Allows the user to view the full list of upcoming events.",
        "operationId": "sessionregListupcoming",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Only sessions in the week of the specified date will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/listupcomingevent": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "View a list of upcoming sessions of a particular event",
        "description": "Allows the user to view the upcoming recurring sessions of a specified event.",
        "operationId": "sessionregListupcomingevent",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Start date to filter the returned sessions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event whose sessions will be returned",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/getusers": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "Lists the registrations for a specific session",
        "description": "Allows the user to view the registration for a specified event session.",
        "operationId": "sessionregGetusers",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The event id to list sessions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date of the session to find.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/adduser": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "Register users for events",
        "description": "Allows the user to register another user for an upcoming event.",
        "operationId": "sessionregAdduser",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/addcurrentuser": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "Register current user to an event session",
        "description": "Allows the user to register themselves for an event.",
        "operationId": "sessionregAddcurrentuser",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/removeuser": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "Removes a user from an event session",
        "description": "Allows the user to un-register another user from an event.",
        "operationId": "sessionregRemoveuser",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/removecurrentuser": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "Unregister current user from an event session",
        "description": "Allows the user to un-register themselves from an event.",
        "operationId": "sessionregRemovecurrentuser",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/getsessions": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "Lists the registrations for a specific user",
        "description": "Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.",
        "operationId": "sessionregGetsessions",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The user id to list sessions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/getmysessions": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "View all the sessions the logged user is registered to",
        "operationId": "sessionregGetmysessions",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Start date to filter the sessions.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/getsettings": {
      "get": {
        "tags": [
          "sessionreg"
        ],
        "summary": "Get the settings for session registration",
        "description": "Allows the user to view a event's session registration settings.",
        "operationId": "sessionregGetsettings",
        "parameters": [
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the location to save settings.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to save settings.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "noinherit",
            "in": "query",
            "description": "True to get the location/event/session specific settings without looking for the more global settings.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionreg/savesettings": {
      "post": {
        "tags": [
          "sessionreg"
        ],
        "summary": "Save the settings for an event's session registration",
        "description": "Allows the user to save the settings for an event.",
        "operationId": "sessionregSavesettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "locationid": {
                    "type": "string",
                    "description": "The id of the location to save settings.",
                    "format": "uuid"
                  },
                  "eventid": {
                    "type": "string",
                    "description": "The id of the event to save settings.",
                    "format": "uuid"
                  },
                  "sessiondate": {
                    "type": "string",
                    "description": "The date and time when the session starts.",
                    "format": "date-time"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether the registration is enabled or not."
                  },
                  "capacity": {
                    "type": "integer",
                    "description": "The capacity of the class.",
                    "format": "int32"
                  },
                  "trainerid": {
                    "type": "string",
                    "description": "The trainer ID.",
                    "format": "uuid"
                  },
                  "showupcomingdays": {
                    "type": "integer",
                    "description": "# of days to show upcoming sessions",
                    "format": "int32"
                  },
                  "registernolessdurationbasis": {
                    "type": "integer",
                    "description": "Specifies the time unit of measurement to restrict the period when attendees can register to sessions (no less than 0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).",
                    "format": "int32"
                  },
                  "registernolessduration": {
                    "type": "integer",
                    "description": "Specifies the duration of the period when attendees can register to sessions (no less than the specified magnitude).",
                    "format": "int32"
                  },
                  "registernomoredurationbasis": {
                    "type": "integer",
                    "description": "Specifies the time unit of measurement to restrict the period when attendees can register to sessions (no more than 0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).",
                    "format": "int32"
                  },
                  "registernomoreduration": {
                    "type": "integer",
                    "description": "Specifies the duration of the period when attendees can register to sessions (no more than the specified magnitude).",
                    "format": "int32"
                  },
                  "unregisternolessdurationbasis": {
                    "type": "integer",
                    "description": "Specifies the time unit of measurement to restrict the period when attendees can unregister from sessions (no less than 0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).",
                    "format": "int32"
                  },
                  "unregisternolessduration": {
                    "type": "integer",
                    "description": "Specifies the duration of the period when attendees can unregister from sessions (no less than the specified magnitude).",
                    "format": "int32"
                  },
                  "remindhours": {
                    "type": "integer",
                    "description": "Specifies the hours before the event when the reminder is sent.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/getusersforservice": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "View a list of staff members that are available for a specific service",
        "description": "Allows the user to view all staff members who are available for a service.",
        "operationId": "staffavailGetusersforservice",
        "parameters": [
          {
            "name": "serviceid",
            "in": "query",
            "description": "The service id to list users.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/addusertoservice": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Associate a staff member to a service",
        "description": "Allows the user to make a staff member available for a service.",
        "operationId": "staffavailAddusertoservice",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/addmetoservice": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Associate current user to a service",
        "description": "Allows the user to associate themselves to a service, provided they have a staff role.",
        "operationId": "staffavailAddmetoservice",
        "parameters": [
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/removeuserfromservice": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Remove a staff member from a service",
        "description": "Allows the user to remove a staff member's service availability.",
        "operationId": "staffavailRemoveuserfromservice",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/removemefromservice": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Remove current user from a service",
        "description": "Allows the user to disassociate themselves from a service, provided they have a staff role.",
        "operationId": "staffavailRemovemefromservice",
        "parameters": [
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/getservices": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "View a list of services that a staff member is available for",
        "description": "Allows the user to view the list of services that a staff member is available for.",
        "operationId": "staffavailGetservices",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The user id to list services.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/getmyservices": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "View the services the current user is available for",
        "description": "Allows the user to view a list of services that they are associated with.",
        "operationId": "staffavailGetmyservices",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/listtypes": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "View all the availability types",
        "operationId": "staffavailListtypes",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/setavailability": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Make a staff member available for a specific availability type",
        "description": "Allows the user to set a staff member as available for walk ins, appointments, or both.",
        "operationId": "staffavailSetavailability",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user whose specific availability has to be set.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "availablefor",
            "in": "query",
            "description": "Specific availability to set.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/setmyavailability": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Change current user's availability type",
        "description": "Allows the user to make themselves available for walk ins, appointments, or both.",
        "operationId": "staffavailSetmyavailability",
        "parameters": [
          {
            "name": "availablefor",
            "in": "query",
            "description": "Specific availability to set.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/addusertoallservices": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Associate a staff member to all services",
        "description": "Allows the user to make a staff member available for all services.",
        "operationId": "staffavailAddusertoallservices",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/addmetoallservices": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Associate current user to all services",
        "description": "Allows the user to associate themselves to all services, provided they have a staff role.",
        "operationId": "staffavailAddmetoallservices",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/removeuserfromallservices": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Removes a staff member from the registration to all services",
        "description": "Allows the user to remove a staff member's availability to all services.",
        "operationId": "staffavailRemoveuserfromallservices",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/staffavail/removemefromallservices": {
      "get": {
        "tags": [
          "staffavail"
        ],
        "summary": "Remove current user from all services",
        "description": "Allows the user to disassociate themselves from all services, provided they have a staff role.",
        "operationId": "staffavailRemovemefromallservices",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/getstaff": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "View a list of schedule information of a specified person",
        "description": "Allows the user to view the schedule shifts for user roles that the user has permission to access.",
        "operationId": "scheduleGetstaff",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to get info.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/getstaffmine": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "View current user's schedule information",
        "description": "Allows the user to view their own schedule.",
        "operationId": "scheduleGetstaffmine",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/myofftimes": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "View current user's schedule exceptions",
        "description": "Allows the user to view their own schedule exceptions.",
        "operationId": "scheduleMyofftimes",
        "parameters": [
          {
            "name": "includedeleted",
            "in": "query",
            "description": "If true the deleted offtimes are also returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyupcoming",
            "in": "query",
            "description": "If true then only upcoming offtimes are returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "modifiedafter",
            "in": "query",
            "description": "If specified, only offtimes modified after the specified date will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/get": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Search and view details of a specific schedule slot",
        "description": "Allows the user to view the details of schedule shifts for any user role that the user has permission to view.",
        "operationId": "scheduleGet",
        "parameters": [
          {
            "name": "scheduleid",
            "in": "query",
            "description": "The id of the schedule.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/getmine": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "View details of a specific schedule block, for current user",
        "description": "Allows the user to view the details of their own schedule shifts.",
        "operationId": "scheduleGetmine",
        "parameters": [
          {
            "name": "scheduleid",
            "in": "query",
            "description": "The id of the schedule.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/save": {
      "post": {
        "tags": [
          "schedule"
        ],
        "summary": "Create or edit a schedule slot",
        "description": "Allows the user to create or edit a schedule slot of another user.",
        "operationId": "scheduleSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "userid",
                  "start",
                  "end",
                  "isavailable"
                ],
                "properties": {
                  "scheduleid": {
                    "type": "string",
                    "description": "The id of the schedule.",
                    "format": "uuid"
                  },
                  "userid": {
                    "type": "string",
                    "description": "The id of the user which schedule belongs to.",
                    "format": "uuid"
                  },
                  "dayofweek": {
                    "type": "integer",
                    "description": "The day of the week, for regular schedules.",
                    "format": "int32"
                  },
                  "start": {
                    "type": "string",
                    "description": "Start date and time.",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "description": "End date and time.",
                    "format": "date-time"
                  },
                  "locationid": {
                    "type": "string",
                    "description": "The id of the location where the user will be.",
                    "format": "uuid"
                  },
                  "isavailable": {
                    "type": "boolean",
                    "description": "Whether the user will be available."
                  },
                  "availablefor": {
                    "type": "string",
                    "description": "Specifies what the user is available for."
                  },
                  "maxattendees": {
                    "type": "integer",
                    "description": "The max number of attendees, if available.",
                    "format": "int32"
                  },
                  "allowoverlapping": {
                    "type": "boolean",
                    "description": "Specifies whether the creation of overlapping schedule blocks is allowed"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/savemine": {
      "post": {
        "tags": [
          "schedule"
        ],
        "summary": "Create or edit a block in current user's schedule",
        "description": "Allows the user to create or edit a schedule shift in their own availability.",
        "operationId": "scheduleSavemine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "start",
                  "end",
                  "isavailable"
                ],
                "properties": {
                  "scheduleid": {
                    "type": "string",
                    "description": "The id of the schedule.",
                    "format": "uuid"
                  },
                  "dayofweek": {
                    "type": "integer",
                    "description": "The day of the week, for regular schedules.",
                    "format": "int32"
                  },
                  "start": {
                    "type": "string",
                    "description": "Start date and time.",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "description": "End date and time.",
                    "format": "date-time"
                  },
                  "locationid": {
                    "type": "string",
                    "description": "The id of the location where the user will be.",
                    "format": "uuid"
                  },
                  "isavailable": {
                    "type": "boolean",
                    "description": "Whether the user will be available."
                  },
                  "availablefor": {
                    "type": "string",
                    "description": "Specifies what the user is available for."
                  },
                  "maxattendees": {
                    "type": "integer",
                    "description": "The max number of attendees, if available.",
                    "format": "int32"
                  },
                  "allowoverlapping": {
                    "type": "boolean",
                    "description": "Specifies whether the creation of overlapping schedule blocks is allowed"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/enable": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Enable or disable the schedule for a specific person",
        "description": "Allows the user to enable or disable a schedule for another user.",
        "operationId": "scheduleEnable",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to enable or disable the schedule.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "True to enable schedules, false to disable.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/enablemine": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Enable or disable current user's schedule",
        "description": "Allows the user to enable or disable a schedule for himself.",
        "operationId": "scheduleEnablemine",
        "parameters": [
          {
            "name": "enable",
            "in": "query",
            "description": "True to enable schedules, false to disable.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/delete": {
      "delete": {
        "tags": [
          "schedule"
        ],
        "summary": "Delete a schedule slot",
        "description": "Allows the user to delete a schedule slot from another user.",
        "operationId": "scheduleDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "scheduleid"
                ],
                "properties": {
                  "scheduleid": {
                    "type": "string",
                    "description": "The id of the schedule.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/deletemine": {
      "delete": {
        "tags": [
          "schedule"
        ],
        "summary": "Delete a specific block from a user's own schedule",
        "description": "Allows the user to delete a schedule block from their own availability.",
        "operationId": "scheduleDeletemine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "scheduleid"
                ],
                "properties": {
                  "scheduleid": {
                    "type": "string",
                    "description": "The id of the schedule.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/findslots": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Search available schedule slots by service, event, date and/or staff",
        "description": "Allows users to search available slots when making appointments.",
        "operationId": "scheduleFindslots",
        "parameters": [
          {
            "name": "staffid",
            "in": "query",
            "description": "The id of the staff to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "The start time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "The end time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "serviceids",
            "in": "query",
            "description": "CSV list of the service Ids to filter by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the service to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "availablefor",
            "in": "query",
            "description": "The specific availability type to filter by.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/findallstaffslots": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Search available schedule slots by service, event, date",
        "description": "Allows users to search available slots.",
        "operationId": "scheduleFindallstaffslots",
        "parameters": [
          {
            "name": "starttime",
            "in": "query",
            "description": "The start time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "The end time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "staffid",
            "in": "query",
            "description": "The id of the staff to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "serviceids",
            "in": "query",
            "description": "CSV list of the service Ids to filter by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the location to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "staffroleids",
            "in": "query",
            "description": "CSV list of the staff member role ids to filter by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "availablefor",
            "in": "query",
            "description": "The specific availability type to filter by.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/schedule/findstaffavail": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "Search available staff members slots by service, event, and/or date",
        "description": "Allows users to search available staff.",
        "operationId": "scheduleFindstaffavail",
        "parameters": [
          {
            "name": "serviceids",
            "in": "query",
            "description": "CSV list of the service ids to filter by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "The start time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "The end time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the service to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "staffroleids",
            "in": "query",
            "description": "CSV list of the staff member role ids to filter by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "availablefor",
            "in": "query",
            "description": "Filter slots by a specific availability type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/advancedstation/getinfo": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Gets the info to display in the sign-in station by it's ID.",
        "operationId": "advancedstationGetinfo",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event (or session), to override the scheduled one.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/getlocations": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Gets the locations available in a sign-in station.",
        "operationId": "advancedstationGetlocations",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station whose locations have to be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/getroles": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Gets the user roles of the user trying to sign-in.",
        "operationId": "advancedstationGetroles",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "signinrole",
            "in": "query",
            "description": "Specifies how the user is signing-in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location the user picked.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/getservices": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Gets the services available for a specific location.",
        "operationId": "advancedstationGetservices",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location the student picked.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/getevents": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Gets the courses available for a specific location and a specific student.",
        "operationId": "advancedstationGetevents",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location the student picked.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/issignedin": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Gets whether a user is signed-in or not.",
        "operationId": "advancedstationIssignedin",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The date and time of the swipe.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location the user picked.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/getstaff": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Gets the staff/tutors available for a specific location, course and service.",
        "operationId": "advancedstationGetstaff",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the location the student picked.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "services",
            "in": "query",
            "description": "The list of services selected by the user, in JSON format.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The ID of the event selected.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/getlogstaff": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Gets the staff/tutors available filtered by the location, course and services of the given attendance log.",
        "operationId": "advancedstationGetlogstaff",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attendancelog",
            "in": "query",
            "description": "The id of the attendance log to filter the staff members.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/checkuserrole": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Check whether the user is a staff member, an attendee or both.",
        "operationId": "advancedstationCheckuserrole",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location the user picked.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/checkunknownuser": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Check whether the user is known by the system.",
        "operationId": "advancedstationCheckunknownuser",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location the user picked.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advancedstation/createuser": {
      "get": {
        "tags": [
          "advancedstation"
        ],
        "summary": "Creates a user via a sign-in station.",
        "operationId": "advancedstationCreateuser",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user to create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location the user picked.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "firstname",
            "in": "query",
            "description": "The first name of the user to create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "middlename",
            "in": "query",
            "description": "The middle name of the user to create.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastname",
            "in": "query",
            "description": "The last name of the user to create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email of the user to create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/station/getlocationsettings": {
      "get": {
        "tags": [
          "station"
        ],
        "summary": "View the sign-in station settings of a specified location",
        "description": "Allows the user to view the location settings of a sign-in station.",
        "operationId": "stationGetlocationsettings",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location whose station settings have to be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/station/savemine": {
      "post": {
        "tags": [
          "station"
        ],
        "summary": "Create or edit a class attendance sign-in station for myself",
        "description": "Allows the user to create a class attendance sign-in station for a course for which they are available as staff.",
        "operationId": "stationSavemine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "mode",
                  "passcode"
                ],
                "properties": {
                  "mode": {
                    "type": "string",
                    "description": "The mode of the sign-in station."
                  },
                  "instructions": {
                    "type": "string",
                    "description": "Instructions to display in the station."
                  },
                  "passcode": {
                    "type": "string",
                    "description": "The passcode used to change settings in the station, empty text to disable security."
                  },
                  "shownames": {
                    "type": "boolean",
                    "description": "Whether to show the visitor names in the sign-in station."
                  },
                  "showphotos": {
                    "type": "boolean",
                    "description": "Whether to show the visitor photos in the sign-in station."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/sessionswipe/saveanonym": {
      "post": {
        "tags": [
          "sessionswipe"
        ],
        "summary": "Creates a new swipe from a sign-in station, and if possible, creates the attendance log",
        "operationId": "sessionswipeSaveanonym",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "station",
                  "user"
                ],
                "properties": {
                  "station": {
                    "type": "string",
                    "description": "The id of the sign-in station.",
                    "format": "uuid"
                  },
                  "time": {
                    "type": "string",
                    "description": "The date and time of the swipe. Now is considered if omitted.",
                    "format": "date-time"
                  },
                  "user": {
                    "type": "string",
                    "description": "The user's card number."
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the session whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "type": {
                    "type": "integer",
                    "description": "Specifies the attendance type (0 = Sign-In, 1 = Sign-Out).",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelog/liststaff": {
      "get": {
        "tags": [
          "attendancelog"
        ],
        "summary": "Gets the attendance logs that the current user is involved in as staff",
        "operationId": "attendancelogListstaff",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/{id}": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Search and view details of an appointment",
        "description": "Allows the user to view an individual appointment and its details.",
        "operationId": "appointmentGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the appointment to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "appointment"
        ],
        "summary": "Schedule an appointment",
        "description": "Allows the user to schedule an appointment within the rules of the location and the availability of staff members.",
        "operationId": "appointmentSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the appointment to save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "attendee",
                  "staff",
                  "location",
                  "start",
                  "end"
                ],
                "properties": {
                  "term": {
                    "type": "string",
                    "description": "The id of the term when the appointment takes place.",
                    "format": "uuid"
                  },
                  "attendee": {
                    "type": "string",
                    "description": "The id of the attendee involved in the appointment.",
                    "format": "uuid"
                  },
                  "staff": {
                    "type": "string",
                    "description": "The id of the staff member involved in the appointment.",
                    "format": "uuid"
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location where the appointment will take place.",
                    "format": "uuid"
                  },
                  "start": {
                    "type": "string",
                    "description": "The appointment's start date & time.",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "description": "The appointment's end date & time.",
                    "format": "date-time"
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the event of the appointment.",
                    "format": "uuid"
                  },
                  "services": {
                    "type": "string",
                    "description": "Comma-separated string containing the ids of the services of the appointment."
                  },
                  "notes": {
                    "type": "string",
                    "description": "The notes of the appointment."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/getcurrent": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Get the current appointments for the user that is about to sign-in via the specified sign-in station.",
        "operationId": "appointmentGetcurrent",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location where the user wants to sign-in.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/appointment/list": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "View a list of appointments",
        "description": "Allows the user to view all upcoming appointments for the location or locations they are scoped to.",
        "operationId": "appointmentList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the appointments.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the appointments.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The attendee id to filter the appointments.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/checkisvalid": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Check if an appointment is valid or not",
        "operationId": "appointmentCheckisvalid",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to check.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "editing",
            "in": "query",
            "description": "Specifies whether the check is for a new appointment or an existing one.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/editanyway": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Edit an appointment even if it breaks activated rules",
        "description": "Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.",
        "operationId": "appointmentEditanyway",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to edit.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "The id of the term when the appointment takes place.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attendee",
            "in": "query",
            "description": "The id of the attendee involved in the appointment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "staff",
            "in": "query",
            "description": "The id of the staff member involved in the appointment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location where the appointment will take place.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The appointment's start date & time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The appointment's end date & time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event of the appointment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "services",
            "in": "query",
            "description": "Comma-separated string containing the ids of the services of the appointment.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "description": "The notes of the appointment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/cancel": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Cancel an appointment",
        "description": "Allows the user to cancel an appointment.",
        "operationId": "appointmentCancel",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to cancel.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/void": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Void an appointment",
        "description": "Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student's restrictions.",
        "operationId": "appointmentVoid",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to cancel.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/restore": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Restore an appointment",
        "description": "Allows the user to restore a canceled appointment.",
        "operationId": "appointmentRestore",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to restore.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/setasvalid": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Schedule an appointment even if it breaks activated rules",
        "description": "Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.",
        "operationId": "appointmentSetasvalid",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to set as valid.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/restoreanyway": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Restore an appointment even if it breaks activated rules",
        "description": "Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.",
        "operationId": "appointmentRestoreanyway",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to restore.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/editpresence": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Edit the no-show status of an appointment",
        "description": "Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.",
        "operationId": "appointmentEditpresence",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to edit its presence.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "showedup",
            "in": "query",
            "description": "Specifies whether the attendee was showed-up or not in the appointment.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/suggestlocations": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "View the locations with most appointments",
        "description": "Allows the user to view suggestions for the most popular locations in which to make appointments",
        "operationId": "appointmentSuggestlocations",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/suggestservices": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "View the services with most appointments",
        "description": "Allows the user to view suggestions for the most popular services for which to make appointments.",
        "operationId": "appointmentSuggestservices",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/findstaff": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Finds staff available by service, date, event, etc",
        "description": "Allows the user to view staff availability when creating an appointment.",
        "operationId": "appointmentFindstaff",
        "parameters": [
          {
            "name": "serviceids",
            "in": "query",
            "description": "CSV list of the service ids to filter by.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "The start time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "The end time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the service to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/findslots": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Finds available slots filtered by service, date, staff, etc",
        "description": "Allows the user to view available appointment slots when creating an appointment.",
        "operationId": "appointmentFindslots",
        "parameters": [
          {
            "name": "staffid",
            "in": "query",
            "description": "The id of the staff to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "The start time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "The end time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "serviceids",
            "in": "query",
            "description": "CSV list of the service Ids to filter by.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the service to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/findallstaffslots": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Finds all staff available slots filtered by service, date, etc",
        "description": "Allows the user to view available appointment slots when creating an appointment.",
        "operationId": "appointmentFindallstaffslots",
        "parameters": [
          {
            "name": "starttime",
            "in": "query",
            "description": "The start time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "The end time of the range to look for slots.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "serviceids",
            "in": "query",
            "description": "CSV list of the service Ids to filter by.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to filter by.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the service to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/getlocations": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Find locations where a service is available",
        "description": "Allows the user to search for appointment availability by location or service.",
        "operationId": "appointmentGetlocations",
        "parameters": [
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service to get its locations.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/listupcoming": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Search and view details of all my upcoming appointments",
        "description": "Allows the user to view all of their own upcoming appointments.",
        "operationId": "appointmentListupcoming",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "If specified, only appointments that start after the specified date will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modifiedafter",
            "in": "query",
            "description": "If specified, only appointments modified after the specified date will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/listmine": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "View all my upcoming appointments",
        "operationId": "appointmentListmine",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "If specified, only appointments that start after the specified date will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modifiedafter",
            "in": "query",
            "description": "If specified, only appointments modified after the specified date will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/appointment/rescheduleoutlook": {
      "get": {
        "tags": [
          "appointment"
        ],
        "summary": "Reschedule an appointment from MS Outlook.",
        "description": "Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.",
        "operationId": "appointmentRescheduleoutlook",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the appointment to edit.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The appointment's start date & time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The appointment's end date & time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/scheduleintegration/setid": {
      "get": {
        "tags": [
          "scheduleintegration"
        ],
        "summary": "Set a 3rd party ID on a specific schedule item",
        "operationId": "scheduleintegrationSetid",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the schedule block / appointment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "thirdpartyid",
            "in": "query",
            "description": "The 3rd party ID to set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thirdpartymasterid",
            "in": "query",
            "description": "The 3rd party master ID to set (useful to handle recurring items).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/scheduleintegration/saveitem": {
      "post": {
        "tags": [
          "scheduleintegration"
        ],
        "summary": "Save a schedule item looking up by a third party ID",
        "operationId": "scheduleintegrationSaveitem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "thirdpartyid",
                  "start",
                  "end"
                ],
                "properties": {
                  "thirdpartyid": {
                    "type": "string",
                    "description": "The third party id to search the schedule block / appointment."
                  },
                  "thirdpartymasterid": {
                    "type": "string",
                    "description": "The 3rd party master ID to set (useful to handle recurring items)."
                  },
                  "start": {
                    "type": "string",
                    "description": "The start date and time of the schedule item.",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "description": "The end date and time of the schedule item.",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/scheduleintegration/getitem": {
      "get": {
        "tags": [
          "scheduleintegration"
        ],
        "summary": "Get a schedule item looking up by a third party ID",
        "operationId": "scheduleintegrationGetitem",
        "parameters": [
          {
            "name": "thirdpartyid",
            "in": "query",
            "description": "The third party id to search for the schedule item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/scheduleintegration/deleteitem": {
      "delete": {
        "tags": [
          "scheduleintegration"
        ],
        "summary": "Delete a schedule item looking up by a third party ID",
        "operationId": "scheduleintegrationDeleteitem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "thirdpartyid"
                ],
                "properties": {
                  "thirdpartyid": {
                    "type": "string",
                    "description": "The third party id to search the schedule block / appointment."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/scheduleintegration/deleteitemsbymasterid": {
      "delete": {
        "tags": [
          "scheduleintegration"
        ],
        "summary": "Delete multiple schedule items looking up by a third party master ID",
        "operationId": "scheduleintegrationDeleteitemsbymasterid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "thirdpartymasterid"
                ],
                "properties": {
                  "thirdpartymasterid": {
                    "type": "string",
                    "description": "The third party master id to search the schedule items."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/scheduleintegration/clearids": {
      "get": {
        "tags": [
          "scheduleintegration"
        ],
        "summary": "Clear all third party IDs from specified staff member's schedule items.",
        "operationId": "scheduleintegrationClearids",
        "parameters": [
          {
            "name": "staff",
            "in": "query",
            "description": "The ID of the staff member whose schedule items third party IDs must be cleared.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancerestriction/{id}": {
      "get": {
        "tags": [
          "attendancerestriction"
        ],
        "summary": "View details of an attendance restriction",
        "description": "Allows the user to view an individual attendance restriction and its details.",
        "operationId": "attendancerestrictionGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the restriction to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "attendancerestriction"
        ],
        "summary": "Delete an attendance restriction",
        "description": "Allows the user to delete an existing attendance restriction.",
        "operationId": "attendancerestrictionDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the restriction to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "attendancerestriction"
        ],
        "summary": "Create or edit an attendance restriction",
        "description": "Allows the user to create or edit an attendance restriction.",
        "operationId": "attendancerestrictionSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the restriction save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "basis",
                  "restrictedobjects",
                  "useristagged",
                  "show",
                  "tag"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the restriction."
                  },
                  "details": {
                    "type": "string",
                    "description": "The details of the restriction."
                  },
                  "basis": {
                    "type": "string",
                    "description": "The basis of the restriction (location, service or staff)."
                  },
                  "restrictedobjects": {
                    "type": "string",
                    "description": "A json array containing the ids of the objects to restrict."
                  },
                  "useristagged": {
                    "type": "boolean",
                    "description": "Specifies whether the restriction should be set for users with or without the specified tag."
                  },
                  "show": {
                    "type": "boolean",
                    "description": "Specifies whether the restriction should show or hide the specified objects."
                  },
                  "order": {
                    "type": "integer",
                    "description": "Specifies the order of precedence of the restriction.",
                    "format": "int32"
                  },
                  "tag": {
                    "type": "string",
                    "description": "The id of the tag to restrict",
                    "format": "uuid"
                  },
                  "locations": {
                    "type": "string",
                    "description": "A json array containing the ids of the location where this restriction applies."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/attendancerestriction/list": {
      "get": {
        "tags": [
          "attendancerestriction"
        ],
        "summary": "View a list of attendance restrictions",
        "description": "Allows the user to view the list of all attendance restrictions.",
        "operationId": "attendancerestrictionList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/{id}": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "View details of a beacon profile",
        "description": "Allows the user to view an individual beacon profile and its details.",
        "operationId": "beaconGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the beacon to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "beacon"
        ],
        "summary": "Create or edit a beacon profile",
        "description": "Allows the user to create or edit a beacon profile.",
        "operationId": "beaconSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the beacon save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "usage"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the beacon profile."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the beacon profile."
                  },
                  "usage": {
                    "type": "integer",
                    "description": "The usage for the beacon profile.",
                    "format": "int32"
                  },
                  "region": {
                    "type": "string",
                    "description": "The id that uniquely identifies the region for the beacon profile.",
                    "format": "uuid"
                  },
                  "major": {
                    "type": "integer",
                    "description": "The major value of the beacon profile.",
                    "format": "int32"
                  },
                  "minor": {
                    "type": "integer",
                    "description": "The minor value of the beacon profile.",
                    "format": "int32"
                  },
                  "transmissionpower": {
                    "type": "integer",
                    "description": "The transmission power of the beacon profile.",
                    "format": "int32"
                  },
                  "broadcastinginterval": {
                    "type": "integer",
                    "description": "The broadcasting interval of the beacon profile.",
                    "format": "int32"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of the beacon profile."
                  },
                  "active": {
                    "type": "boolean",
                    "description": "The status of the beacon profile."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "beacon"
        ],
        "summary": "Delete a beacon profile",
        "description": "Allows the user to delete an existing beacon profile.",
        "operationId": "beaconDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the beacon to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/list": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "View a list of beacon profiles",
        "description": "Allows the user to view the list of all beacon profiles without their basic details.",
        "operationId": "beaconList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/getuuid": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "View the identifier for the account's beacon region (for sign-in stations).",
        "operationId": "beaconGetuuid",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/disable": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "Disable beacon support account wide",
        "description": "Allows the user to enable or disable beacon usage account wide.",
        "operationId": "beaconDisable",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/setuuid": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "Set the identifier for the account's beacon region (for sign-in stations).",
        "description": "Allows the user to set the identifier for the account's beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.",
        "operationId": "beaconSetuuid",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The custom region UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/resetuuid": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "Generate or reset the identifier for the account's beacon region.",
        "description": "Allows the user to reset the identifier for the beacon region, generally not necessary.",
        "operationId": "beaconResetuuid",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/scanlocations": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "Check if there's location available to sign-in / out.",
        "operationId": "beaconScanlocations",
        "parameters": [
          {
            "name": "beacons",
            "in": "query",
            "description": "A JSON array containg the beacons data (region, minor and major) values.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/getlocations": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "Get the sign-in stations assigned to specific beacons.",
        "operationId": "beaconGetlocations",
        "parameters": [
          {
            "name": "beacons",
            "in": "query",
            "description": "A JSON array containg the beacons data (region, minor and major) values.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/getstationlocation": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "Get the location settings in the specified sign-in station.",
        "operationId": "beaconGetstationlocation",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station whose location information has to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location whose information has to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/listprofiles": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "View a list of beacon profiles with their characteristics",
        "description": "Allows the user to view the list of all beacon profiles with their basic details.",
        "operationId": "beaconListprofiles",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/silentregions": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "View all the beacon regions defined for silent tracking",
        "operationId": "beaconSilentregions",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/silentsignin": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "Sign-in silently from the location specified by a beacon",
        "operationId": "beaconSilentsignin",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "The id of the region the user is in.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/beacon/silentsignout": {
      "get": {
        "tags": [
          "beacon"
        ],
        "summary": "Sign-out silently from the location specified by a beacon",
        "operationId": "beaconSilentsignout",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "The id of the region the user has left.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/compasscategory/{id}": {
      "delete": {
        "tags": [
          "compasscategory"
        ],
        "summary": "Delete a compass category",
        "description": "Allows the user to delete an existing compass category.",
        "operationId": "compasscategoryDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the category to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "compasscategory"
        ],
        "summary": "View details of a compass category",
        "description": "Allows the user to view an indvidiaul compass category and its details.",
        "operationId": "compasscategoryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the category to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "compasscategory"
        ],
        "summary": "Create or edit a compass category",
        "description": "Allows the user to create or edit a compass category.",
        "operationId": "compasscategorySave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the category save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the category."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the category."
                  },
                  "icon": {
                    "type": "string",
                    "description": "The icon name of the category."
                  },
                  "order": {
                    "type": "integer",
                    "description": "The order of the service.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/compasscategory/list": {
      "get": {
        "tags": [
          "compasscategory"
        ],
        "summary": "View a list of compass categories",
        "description": "Allows the user to view the full list of compass categories.",
        "operationId": "compasscategoryList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onlywithservices",
            "in": "query",
            "description": "Specified whether only categories with services are returned or all.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/compassservice/list": {
      "get": {
        "tags": [
          "compassservice"
        ],
        "summary": "View all the services added to the compass",
        "operationId": "compassserviceList",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "The id of the category to filter the services.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/compassservice/listlocations": {
      "get": {
        "tags": [
          "compassservice"
        ],
        "summary": "View all the locations where a service added to the compass is available",
        "operationId": "compassserviceListlocations",
        "parameters": [
          {
            "name": "serviceid",
            "in": "query",
            "description": "The id of the service to get its locations.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/waitingline/{id}": {
      "delete": {
        "tags": [
          "waitingline"
        ],
        "summary": "Delete a waiting line",
        "description": "Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.",
        "operationId": "waitinglineDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the line to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "waitingline"
        ],
        "summary": "View details of a waiting line",
        "description": "Allows the user to view the details of a waiting line in a location to which they are scoped.",
        "operationId": "waitinglineGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the waiting line to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "waitingline"
        ],
        "summary": "Create or edit a waiting line",
        "description": "Allows the user to create or edit a waiting line in a location to which they are scoped.",
        "operationId": "waitinglineSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the waiting line save (leave empty to create a new one).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "location"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the waiting line."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the waiting line."
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location of the waiting line.",
                    "format": "uuid"
                  },
                  "service": {
                    "type": "string",
                    "description": "Specifies the id of the service which persons that are waiting in this line have selected.",
                    "format": "uuid"
                  },
                  "event": {
                    "type": "string",
                    "description": "Specifies the id of the event which persons that are waiting in this line have selected.",
                    "format": "uuid"
                  },
                  "staff": {
                    "type": "string",
                    "description": "Specifies the id of the staff member which persons that are waiting in this line have selected.",
                    "format": "uuid"
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Whether the line is enabled."
                  },
                  "virtual.enabled": {
                    "type": "boolean",
                    "description": "Whether to enable remote access."
                  },
                  "virtual.name": {
                    "type": "string",
                    "description": "The display name of the waiting line when joining remotely."
                  },
                  "virtual.joinmessage": {
                    "type": "string",
                    "description": "Message send "
                  },
                  "virtual.positionmessage": {
                    "type": "string",
                    "description": "Specifies the id of the staff member which persons that are waiting in this line have selected."
                  },
                  "virtual.positionnumber": {
                    "type": "integer",
                    "description": "Specifies the id of the staff member which persons that are waiting in this line have selected.",
                    "format": "int32"
                  },
                  "virtual.signedinmessage": {
                    "type": "string",
                    "description": "Specifies the id of the staff member which persons that are waiting in this line have selected."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/waitingline/list": {
      "get": {
        "tags": [
          "waitingline"
        ],
        "summary": "View a list of waiting lines",
        "description": "Allows the user to view the list of waiting lines in locations to which they are scoped.",
        "operationId": "waitinglineList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/waitingline/isuserin": {
      "get": {
        "tags": [
          "waitingline"
        ],
        "summary": "Check whether a user is in a waiting line, signed-in or is not in the area",
        "operationId": "waitinglineIsuserin",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The date and time of the swipe.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card number of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location the user picked.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/waitingline/adduser": {
      "get": {
        "tags": [
          "waitingline"
        ],
        "summary": "Put user in a waiting line",
        "operationId": "waitinglineAdduser",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The location's id where the swipe must be saved.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The date and time of the swipe.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The user's card number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signinrole",
            "in": "query",
            "description": "Specifies if the sign-in is for an attendee or a staff member",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "Specifies the role the user has selected in order to sign-in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "services",
            "in": "query",
            "description": "The services ids the user has selected.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event the user selected.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "staff",
            "in": "query",
            "description": "The id of the staff member the user selected.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The swiping user's photo size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/waitingline/removeuser": {
      "get": {
        "tags": [
          "waitingline"
        ],
        "summary": "Remove a user from a waiting line",
        "description": "Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.",
        "operationId": "waitinglineRemoveuser",
        "parameters": [
          {
            "name": "waitingline",
            "in": "query",
            "description": "The id of the waiting line whose item has to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemid",
            "in": "query",
            "description": "The ID of the item that has to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/waitingline/signinuser": {
      "get": {
        "tags": [
          "waitingline"
        ],
        "summary": "Sign a user in from a waiting line",
        "description": "Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.",
        "operationId": "waitinglineSigninuser",
        "parameters": [
          {
            "name": "waitingline",
            "in": "query",
            "description": "The id of the waiting line whose item needs to be signed-in.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemid",
            "in": "query",
            "description": "The ID of the item that has to be signed-in.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "staff",
            "in": "query",
            "description": "The id of the staff member selected to sign-in.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The swiping user's photo size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/virtualline/list": {
      "get": {
        "tags": [
          "virtualline"
        ],
        "summary": "Lists waiting lines that have remote access enabled",
        "operationId": "virtuallineList",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/virtualline/addmyself": {
      "get": {
        "tags": [
          "virtualline"
        ],
        "summary": "Add myself to a waiting line",
        "description": "Allows the user to add themselves to a waiting line from the AccuCampus mobile app.",
        "operationId": "virtuallineAddmyself",
        "parameters": [
          {
            "name": "waitinglineid",
            "in": "query",
            "description": "ID of the waiting line to join.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    },
    "/virtualline/removemyself": {
      "get": {
        "tags": [
          "virtualline"
        ],
        "summary": "Remove myself from a waiting line",
        "description": "Allows the user to remove themselves from a waiting line in the AccuCampus mobile app.",
        "operationId": "virtuallineRemovemyself",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActionResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Specifies if the execution of the action was successful"
          },
          "results": {
            "type": "array",
            "items": {
              "properties": {
                "prop1": {
                  "type": "object",
                  "description": "A result property..."
                },
                "prop2": {
                  "type": "object",
                  "description": "Another result property..."
                }
              }
            },
            "description": "Objects returned by the action"
          },
          "message": {
            "type": "string",
            "description": "Message with context information about the response"
          }
        },
        "description": "Default action result"
      },
      "ErrorActionResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Specifies if the execution of the action was successful"
          },
          "message": {
            "type": "string",
            "description": "Message with context information about the response"
          },
          "error_flag": {
            "type": "string",
            "description": "Error flag that describes the error in the execution"
          },
          "domain": {
            "type": "string",
            "description": "Contains the domain of the account where the action was applied on"
          },
          "redirect_url": {
            "type": "string",
            "description": "Contains the url to redirect to when an error is found during the execution of the action"
          }
        },
        "description": "Object returned when the action execution failed"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "Authorization header using the Bearer scheme. \r\n\r\nEnter 'Bearer' [space] and then the token returned by the 'login' endpoint.\r\n\r\nExample: \"Authorization: Bearer xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "scheme": "bearer",
        "bearerFormat": "string"
      }
    }
  },
  "tags": [
    {
      "name": "General",
      "description": "General application actions"
    },
    {
      "name": "feature",
      "description": "Actions related to the feature module"
    },
    {
      "name": "search",
      "description": "Actions related to the search module"
    },
    {
      "name": "my",
      "description": "Actions related to the my module"
    },
    {
      "name": "captcha",
      "description": "Actions related to the captcha module"
    },
    {
      "name": "menu",
      "description": "Actions related to the menu module"
    },
    {
      "name": "qrlogin",
      "description": "Actions related to the qrlogin module"
    },
    {
      "name": "appshare",
      "description": "Actions related to the appshare module"
    },
    {
      "name": "sso",
      "description": "Actions related to the sso module"
    },
    {
      "name": "license",
      "description": "Actions related to the license module"
    },
    {
      "name": "user",
      "description": "Actions related to the user module"
    },
    {
      "name": "role",
      "description": "Actions related to the role module"
    },
    {
      "name": "client",
      "description": "Actions related to the client module"
    },
    {
      "name": "bgjob",
      "description": "Actions related to the bgjob module"
    },
    {
      "name": "setting",
      "description": "Actions related to the setting module"
    },
    {
      "name": "actionlog",
      "description": "Actions related to the actionlog module"
    },
    {
      "name": "easylogin",
      "description": "Actions related to the easylogin module"
    },
    {
      "name": "export",
      "description": "Actions related to the export module"
    },
    {
      "name": "location",
      "description": "Actions related to the location module"
    },
    {
      "name": "riskmodel",
      "description": "Actions related to the riskmodel module"
    },
    {
      "name": "adhocquery",
      "description": "Actions related to the adhocquery module"
    },
    {
      "name": "adhocreports",
      "description": "Actions related to the adhocreports module"
    },
    {
      "name": "community",
      "description": "Actions related to the community module"
    },
    {
      "name": "template",
      "description": "Actions related to the template module"
    },
    {
      "name": "textcredit",
      "description": "Actions related to the textcredit module"
    },
    {
      "name": "translation",
      "description": "Actions related to the translation module"
    },
    {
      "name": "usersettings",
      "description": "Actions related to the usersettings module"
    },
    {
      "name": "department",
      "description": "Actions related to the department module"
    },
    {
      "name": "quickpanel",
      "description": "Actions related to the quickpanel module"
    },
    {
      "name": "term",
      "description": "Actions related to the term module"
    },
    {
      "name": "holiday",
      "description": "Actions related to the holiday module"
    },
    {
      "name": "notificationtopic",
      "description": "Actions related to the notificationtopic module"
    },
    {
      "name": "notification",
      "description": "Actions related to the notification module"
    },
    {
      "name": "push",
      "description": "Actions related to the push module"
    },
    {
      "name": "rule",
      "description": "Actions related to the rule module"
    },
    {
      "name": "interaction",
      "description": "Actions related to the interaction module"
    },
    {
      "name": "like",
      "description": "Actions related to the like module"
    },
    {
      "name": "social",
      "description": "Actions related to the social module"
    },
    {
      "name": "socialgroup",
      "description": "Actions related to the socialgroup module"
    },
    {
      "name": "import",
      "description": "Actions related to the import module"
    },
    {
      "name": "event",
      "description": "Actions related to the event module"
    },
    {
      "name": "usergroup",
      "description": "Actions related to the usergroup module"
    },
    {
      "name": "mediatype",
      "description": "Actions related to the mediatype module"
    },
    {
      "name": "media",
      "description": "Actions related to the media module"
    },
    {
      "name": "qrlabels",
      "description": "Actions related to the qrlabels module"
    },
    {
      "name": "service",
      "description": "Actions related to the service module"
    },
    {
      "name": "serviceassignment",
      "description": "Actions related to the serviceassignment module"
    },
    {
      "name": "tag",
      "description": "Actions related to the tag module"
    },
    {
      "name": "attendancelog",
      "description": "Actions related to the attendancelog module"
    },
    {
      "name": "swipe",
      "description": "Actions related to the swipe module"
    },
    {
      "name": "attendancelogcomment",
      "description": "Actions related to the attendancelogcomment module"
    },
    {
      "name": "rating",
      "description": "Actions related to the rating module"
    },
    {
      "name": "report",
      "description": "Actions related to the report module"
    },
    {
      "name": "memorizedreport",
      "description": "Actions related to the memorizedreport module"
    },
    {
      "name": "reportschedule",
      "description": "Actions related to the reportschedule module"
    },
    {
      "name": "seminar",
      "description": "Actions related to the seminar module"
    },
    {
      "name": "station",
      "description": "Actions related to the station module"
    },
    {
      "name": "actionassignment",
      "description": "Actions related to the actionassignment module"
    },
    {
      "name": "actionitem",
      "description": "Actions related to the actionitem module"
    },
    {
      "name": "actionpack",
      "description": "Actions related to the actionpack module"
    },
    {
      "name": "actiontype",
      "description": "Actions related to the actiontype module"
    },
    {
      "name": "userprofile",
      "description": "Actions related to the userprofile module"
    },
    {
      "name": "advrole",
      "description": "Actions related to the advrole module"
    },
    {
      "name": "advroles",
      "description": "Actions related to the advroles module"
    },
    {
      "name": "security",
      "description": "Actions related to the security module"
    },
    {
      "name": "computerlab",
      "description": "Actions related to the computerlab module"
    },
    {
      "name": "deadendrecording",
      "description": "Actions related to the deadendrecording module"
    },
    {
      "name": "eventreg",
      "description": "Actions related to the eventreg module"
    },
    {
      "name": "session",
      "description": "Actions related to the session module"
    },
    {
      "name": "sessionattendancelog",
      "description": "Actions related to the sessionattendancelog module"
    },
    {
      "name": "sessionswipe",
      "description": "Actions related to the sessionswipe module"
    },
    {
      "name": "sessionreg",
      "description": "Actions related to the sessionreg module"
    },
    {
      "name": "staffavail",
      "description": "Actions related to the staffavail module"
    },
    {
      "name": "schedule",
      "description": "Actions related to the schedule module"
    },
    {
      "name": "advancedstation",
      "description": "Actions related to the advancedstation module"
    },
    {
      "name": "appointment",
      "description": "Actions related to the appointment module"
    },
    {
      "name": "scheduleintegration",
      "description": "Actions related to the scheduleintegration module"
    },
    {
      "name": "attendancerestriction",
      "description": "Actions related to the attendancerestriction module"
    },
    {
      "name": "beacon",
      "description": "Actions related to the beacon module"
    },
    {
      "name": "compasscategory",
      "description": "Actions related to the compasscategory module"
    },
    {
      "name": "compassservice",
      "description": "Actions related to the compassservice module"
    },
    {
      "name": "waitingline",
      "description": "Actions related to the waitingline module"
    },
    {
      "name": "virtualline",
      "description": "Actions related to the virtualline module"
    }
  ]
}