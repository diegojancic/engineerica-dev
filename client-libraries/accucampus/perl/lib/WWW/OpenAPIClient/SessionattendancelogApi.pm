=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::SessionattendancelogApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# sessionattendancelog_addnote
#
# Add a note to a class attendance log
# 
# @param string $id The id of the attendance log. (required)
# @param string $text The text of the note to add. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log.',
        required => '1',
    },
    'text' => {
        data_type => 'string',
        description => 'The text of the note to add.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_addnote' } = { 
        summary => 'Add a note to a class attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_addnote {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionattendancelog_addnote");
    }

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling sessionattendancelog_addnote");
    }

    # parse inputs
    my $_resource_path = '/sessionattendancelog/addnote';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelog_get
#
# View details of a class attendance log
# 
# @param string $id The id of the attendance log to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_get' } = { 
        summary => 'View details of a class attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionattendancelog_get");
    }

    # parse inputs
    my $_resource_path = '/sessionattendancelog/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelog_getuser
#
# View the class session attendance information for a specific user
# 
# @param string $attendee The id of the attendee to get statistic for. (required)
# @param string $eventid The id of the event whose attendee statistics have to be returned. (required)
{
    my $params = {
    'attendee' => {
        data_type => 'string',
        description => 'The id of the attendee to get statistic for.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event whose attendee statistics have to be returned.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_getuser' } = { 
        summary => 'View the class session attendance information for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_getuser {
    my ($self, %args) = @_;

    # verify the required parameter 'attendee' is set
    unless (exists $args{'attendee'}) {
      croak("Missing the required parameter 'attendee' when calling sessionattendancelog_getuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionattendancelog_getuser");
    }

    # parse inputs
    my $_resource_path = '/sessionattendancelog/getuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'attendee'}) {
        $query_params->{'attendee'} = $self->{api_client}->to_query_value($args{'attendee'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelog_list
#
# View attendance logs of the specified session
# 
# @param string $session The id of the session whose attendees logs have to be returned. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'session' => {
        data_type => 'string',
        description => 'The id of the session whose attendees logs have to be returned.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_list' } = { 
        summary => 'View attendance logs of the specified session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_list {
    my ($self, %args) = @_;

    # verify the required parameter 'session' is set
    unless (exists $args{'session'}) {
      croak("Missing the required parameter 'session' when calling sessionattendancelog_list");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling sessionattendancelog_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling sessionattendancelog_list");
    }

    # parse inputs
    my $_resource_path = '/sessionattendancelog/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'session'}) {
        $query_params->{'session'} = $self->{api_client}->to_query_value($args{'session'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelog_listevent
#
# View the attendance information of an entire class
# 
# @param string $eventid The id of the event whose attendance has to be returned. (required)
{
    my $params = {
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event whose attendance has to be returned.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_listevent' } = { 
        summary => 'View the attendance information of an entire class',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_listevent {
    my ($self, %args) = @_;

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionattendancelog_listevent");
    }

    # parse inputs
    my $_resource_path = '/sessionattendancelog/listevent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelog_listsummary
#
# View the attendance summary for a class and/or a attendee
# 
# @param string $eventid The id of the event whose attendance has to be returned. (optional)
# @param string $attendeeid The id of the attendee whose attendance has to be returned. (optional)
# @param string $groupid The id of the group whose attendance has to be returned. (optional)
# @param string $start The start date to filter (beginning of time by default). (optional)
# @param string $end The end date to filter (today by default). (optional)
{
    my $params = {
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event whose attendance has to be returned.',
        required => '0',
    },
    'attendeeid' => {
        data_type => 'string',
        description => 'The id of the attendee whose attendance has to be returned.',
        required => '0',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the group whose attendance has to be returned.',
        required => '0',
    },
    'start' => {
        data_type => 'string',
        description => 'The start date to filter (beginning of time by default).',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => 'The end date to filter (today by default).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_listsummary' } = { 
        summary => 'View the attendance summary for a class and/or a attendee',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_listsummary {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionattendancelog/listsummary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'attendeeid'}) {
        $query_params->{'attendeeid'} = $self->{api_client}->to_query_value($args{'attendeeid'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelog_mylistsummary
#
# View my attendance summary
# 
# @param string $eventid The id of the event whose attendance has to be returned. (optional)
# @param string $start The start date to filter (beginning of time by default). (optional)
# @param string $end The end date to filter (today by default). (optional)
{
    my $params = {
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event whose attendance has to be returned.',
        required => '0',
    },
    'start' => {
        data_type => 'string',
        description => 'The start date to filter (beginning of time by default).',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => 'The end date to filter (today by default).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_mylistsummary' } = { 
        summary => 'View my attendance summary',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_mylistsummary {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionattendancelog/mylistsummary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelog_save
#
# Create or edit a class attendance log
# 
# @param string $id The id of the att log to save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the att log to save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_save' } = { 
        summary => 'Create or edit a class attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionattendancelog_save");
    }

    # parse inputs
    my $_resource_path = '/sessionattendancelog/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelog_saveswipe
#
# Create or edit a class attendance log swipe
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelog_saveswipe' } = { 
        summary => 'Create or edit a class attendance log swipe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelog_saveswipe {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionattendancelog/saveswipe';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
