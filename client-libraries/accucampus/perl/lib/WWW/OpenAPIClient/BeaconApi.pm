=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::BeaconApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# beacon_delete
#
# Delete a beacon profile
# 
# @param string $id The id of the beacon to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the beacon to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_delete' } = { 
        summary => 'Delete a beacon profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling beacon_delete");
    }

    # parse inputs
    my $_resource_path = '/beacon/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_disable
#
# Disable beacon support account wide
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'beacon_disable' } = { 
        summary => 'Disable beacon support account wide',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_disable {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/beacon/disable';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_get
#
# View details of a beacon profile
# 
# @param string $id The id of the beacon to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the beacon to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_get' } = { 
        summary => 'View details of a beacon profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling beacon_get");
    }

    # parse inputs
    my $_resource_path = '/beacon/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_getlocations
#
# Get the sign-in stations assigned to specific beacons.
# 
# @param string $beacons A JSON array containg the beacons data (region, minor and major) values. (required)
{
    my $params = {
    'beacons' => {
        data_type => 'string',
        description => 'A JSON array containg the beacons data (region, minor and major) values.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_getlocations' } = { 
        summary => 'Get the sign-in stations assigned to specific beacons.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_getlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'beacons' is set
    unless (exists $args{'beacons'}) {
      croak("Missing the required parameter 'beacons' when calling beacon_getlocations");
    }

    # parse inputs
    my $_resource_path = '/beacon/getlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'beacons'}) {
        $query_params->{'beacons'} = $self->{api_client}->to_query_value($args{'beacons'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_getstationlocation
#
# Get the location settings in the specified sign-in station.
# 
# @param string $station The id of the sign-in station whose location information has to be retrieved. (required)
# @param string $location The id of the location whose information has to be retrieved. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station whose location information has to be retrieved.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location whose information has to be retrieved.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_getstationlocation' } = { 
        summary => 'Get the location settings in the specified sign-in station.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_getstationlocation {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling beacon_getstationlocation");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling beacon_getstationlocation");
    }

    # parse inputs
    my $_resource_path = '/beacon/getstationlocation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_getuuid
#
# View the identifier for the account's beacon region (for sign-in stations).
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'beacon_getuuid' } = { 
        summary => 'View the identifier for the account&#39;s beacon region (for sign-in stations).',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_getuuid {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/beacon/getuuid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_list
#
# View a list of beacon profiles
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_list' } = { 
        summary => 'View a list of beacon profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_list {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling beacon_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling beacon_list");
    }

    # parse inputs
    my $_resource_path = '/beacon/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_listprofiles
#
# View a list of beacon profiles with their characteristics
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'beacon_listprofiles' } = { 
        summary => 'View a list of beacon profiles with their characteristics',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_listprofiles {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/beacon/listprofiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_resetuuid
#
# Generate or reset the identifier for the account's beacon region.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'beacon_resetuuid' } = { 
        summary => 'Generate or reset the identifier for the account&#39;s beacon region.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_resetuuid {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/beacon/resetuuid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_save
#
# Create or edit a beacon profile
# 
# @param string $id The id of the beacon save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the beacon save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_save' } = { 
        summary => 'Create or edit a beacon profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling beacon_save");
    }

    # parse inputs
    my $_resource_path = '/beacon/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_scanlocations
#
# Check if there's location available to sign-in / out.
# 
# @param string $beacons A JSON array containg the beacons data (region, minor and major) values. (required)
{
    my $params = {
    'beacons' => {
        data_type => 'string',
        description => 'A JSON array containg the beacons data (region, minor and major) values.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_scanlocations' } = { 
        summary => 'Check if there&#39;s location available to sign-in / out.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_scanlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'beacons' is set
    unless (exists $args{'beacons'}) {
      croak("Missing the required parameter 'beacons' when calling beacon_scanlocations");
    }

    # parse inputs
    my $_resource_path = '/beacon/scanlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'beacons'}) {
        $query_params->{'beacons'} = $self->{api_client}->to_query_value($args{'beacons'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_setuuid
#
# Set the identifier for the account's beacon region (for sign-in stations).
# 
# @param string $id The custom region UUID. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The custom region UUID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_setuuid' } = { 
        summary => 'Set the identifier for the account&#39;s beacon region (for sign-in stations).',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_setuuid {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling beacon_setuuid");
    }

    # parse inputs
    my $_resource_path = '/beacon/setuuid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_silentregions
#
# View all the beacon regions defined for silent tracking
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'beacon_silentregions' } = { 
        summary => 'View all the beacon regions defined for silent tracking',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_silentregions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/beacon/silentregions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_silentsignin
#
# Sign-in silently from the location specified by a beacon
# 
# @param string $uuid The id of the region the user is in. (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'The id of the region the user is in.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_silentsignin' } = { 
        summary => 'Sign-in silently from the location specified by a beacon',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_silentsignin {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling beacon_silentsignin");
    }

    # parse inputs
    my $_resource_path = '/beacon/silentsignin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'uuid'}) {
        $query_params->{'uuid'} = $self->{api_client}->to_query_value($args{'uuid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacon_silentsignout
#
# Sign-out silently from the location specified by a beacon
# 
# @param string $uuid The id of the region the user has left. (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'The id of the region the user has left.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacon_silentsignout' } = { 
        summary => 'Sign-out silently from the location specified by a beacon',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacon_silentsignout {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling beacon_silentsignout");
    }

    # parse inputs
    my $_resource_path = '/beacon/silentsignout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'uuid'}) {
        $query_params->{'uuid'} = $self->{api_client}->to_query_value($args{'uuid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
