=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::EventregApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# eventreg_addme
#
# Register current user to a course
# 
# @param string $eventid The id of the event. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_addme' } = { 
        summary => 'Register current user to a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_addme {
    my ($self, %args) = @_;

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventreg_addme");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_addme");
    }

    # parse inputs
    my $_resource_path = '/eventreg/addme';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_addmetoall
#
# Register current user to all courses
# 
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_addmetoall' } = { 
        summary => 'Register current user to all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_addmetoall {
    my ($self, %args) = @_;

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_addmetoall");
    }

    # parse inputs
    my $_resource_path = '/eventreg/addmetoall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_addmetogroup
#
# Register current user to a course group
# 
# @param string $codegroup The code used to group events. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'codegroup' => {
        data_type => 'string',
        description => 'The code used to group events.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_addmetogroup' } = { 
        summary => 'Register current user to a course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_addmetogroup {
    my ($self, %args) = @_;

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventreg_addmetogroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_addmetogroup");
    }

    # parse inputs
    my $_resource_path = '/eventreg/addmetogroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_adduser
#
# Register a user to a course for attendance
# 
# @param string $userid The id of the user to add. (required)
# @param string $eventid The id of the event. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_adduser' } = { 
        summary => 'Register a user to a course for attendance',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_adduser {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreg_adduser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventreg_adduser");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_adduser");
    }

    # parse inputs
    my $_resource_path = '/eventreg/adduser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_addusertoall
#
# Register a user to assist with all courses
# 
# @param string $userid The id of the user to add. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_addusertoall' } = { 
        summary => 'Register a user to assist with all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_addusertoall {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreg_addusertoall");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_addusertoall");
    }

    # parse inputs
    my $_resource_path = '/eventreg/addusertoall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_addusertogroup
#
# Register a user to an course group
# 
# @param string $userid The id of the user to add. (required)
# @param string $codegroup The code used to group events. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'codegroup' => {
        data_type => 'string',
        description => 'The code used to group events.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_addusertogroup' } = { 
        summary => 'Register a user to an course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_addusertogroup {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreg_addusertogroup");
    }

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventreg_addusertogroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_addusertogroup");
    }

    # parse inputs
    my $_resource_path = '/eventreg/addusertogroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_getevents
#
# View course registration by user
# 
# @param string $userid The user id to list events. (required)
# @param string $listname The name of the list where the user is registered. (required)
# @param string $termid The term id to list events. (optional)
# @param string $namefilter The value used to filter the events by name. (optional)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The user id to list events.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    'termid' => {
        data_type => 'string',
        description => 'The term id to list events.',
        required => '0',
    },
    'namefilter' => {
        data_type => 'string',
        description => 'The value used to filter the events by name.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_getevents' } = { 
        summary => 'View course registration by user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_getevents {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreg_getevents");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_getevents");
    }

    # parse inputs
    my $_resource_path = '/eventreg/getevents';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    # query params
    if ( exists $args{'termid'}) {
        $query_params->{'termid'} = $self->{api_client}->to_query_value($args{'termid'});
    }

    # query params
    if ( exists $args{'namefilter'}) {
        $query_params->{'namefilter'} = $self->{api_client}->to_query_value($args{'namefilter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_getgroups
#
# Lists the course group registrations of a user
# 
# @param string $userid The user id to list events. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The user id to list events.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_getgroups' } = { 
        summary => 'Lists the course group registrations of a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_getgroups {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreg_getgroups");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_getgroups");
    }

    # parse inputs
    my $_resource_path = '/eventreg/getgroups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_getmyevents
#
# View the event registrations of the current user
# 
# @param string $listname The name of the list where the user is registered. (required)
# @param string $termid The term id to list events. (optional)
# @param string $namefilter The value used to filter the events by name. (optional)
{
    my $params = {
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    'termid' => {
        data_type => 'string',
        description => 'The term id to list events.',
        required => '0',
    },
    'namefilter' => {
        data_type => 'string',
        description => 'The value used to filter the events by name.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_getmyevents' } = { 
        summary => 'View the event registrations of the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_getmyevents {
    my ($self, %args) = @_;

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_getmyevents");
    }

    # parse inputs
    my $_resource_path = '/eventreg/getmyevents';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    # query params
    if ( exists $args{'termid'}) {
        $query_params->{'termid'} = $self->{api_client}->to_query_value($args{'termid'});
    }

    # query params
    if ( exists $args{'namefilter'}) {
        $query_params->{'namefilter'} = $self->{api_client}->to_query_value($args{'namefilter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_getmygroups
#
# View all current user registrations to course groups
# 
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_getmygroups' } = { 
        summary => 'View all current user registrations to course groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_getmygroups {
    my ($self, %args) = @_;

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_getmygroups");
    }

    # parse inputs
    my $_resource_path = '/eventreg/getmygroups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_getusers
#
# View course registration
# 
# @param string $eventid The event id to list users. (required)
# @param string $listname The name of the list to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'eventid' => {
        data_type => 'string',
        description => 'The event id to list users.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_getusers' } = { 
        summary => 'View course registration',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_getusers {
    my ($self, %args) = @_;

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventreg_getusers");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_getusers");
    }

    # parse inputs
    my $_resource_path = '/eventreg/getusers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_getusersfromgroup
#
# Lists the registrations for a course group
# 
# @param string $codegroup The code group to list users. (required)
# @param string $listname The name of the list to get. (required)
{
    my $params = {
    'codegroup' => {
        data_type => 'string',
        description => 'The code group to list users.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_getusersfromgroup' } = { 
        summary => 'Lists the registrations for a course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_getusersfromgroup {
    my ($self, %args) = @_;

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventreg_getusersfromgroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_getusersfromgroup");
    }

    # parse inputs
    my $_resource_path = '/eventreg/getusersfromgroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_getuserstoall
#
# View the users that are registered to all courses
# 
# @param string $listname The name of the list to get. (required)
{
    my $params = {
    'listname' => {
        data_type => 'string',
        description => 'The name of the list to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_getuserstoall' } = { 
        summary => 'View the users that are registered to all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_getuserstoall {
    my ($self, %args) = @_;

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_getuserstoall");
    }

    # parse inputs
    my $_resource_path = '/eventreg/getuserstoall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_removeme
#
# Unregister current user from a course
# 
# @param string $eventid The id of the event. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_removeme' } = { 
        summary => 'Unregister current user from a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_removeme {
    my ($self, %args) = @_;

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventreg_removeme");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_removeme");
    }

    # parse inputs
    my $_resource_path = '/eventreg/removeme';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_removemefromall
#
# Remove current user from the registration to all courses
# 
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_removemefromall' } = { 
        summary => 'Remove current user from the registration to all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_removemefromall {
    my ($self, %args) = @_;

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_removemefromall");
    }

    # parse inputs
    my $_resource_path = '/eventreg/removemefromall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_removemefromgroup
#
# Remove current user from a course group
# 
# @param string $codegroup The code group of the events/courses. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'codegroup' => {
        data_type => 'string',
        description => 'The code group of the events/courses.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_removemefromgroup' } = { 
        summary => 'Remove current user from a course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_removemefromgroup {
    my ($self, %args) = @_;

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventreg_removemefromgroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_removemefromgroup");
    }

    # parse inputs
    my $_resource_path = '/eventreg/removemefromgroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_removeuser
#
# Remove a user from a course
# 
# @param string $userid The id of the user to remove. (required)
# @param string $eventid The id of the event. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_removeuser' } = { 
        summary => 'Remove a user from a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_removeuser {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreg_removeuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventreg_removeuser");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_removeuser");
    }

    # parse inputs
    my $_resource_path = '/eventreg/removeuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_removeuserfromall
#
# Remove a user from the registration to all courses
# 
# @param string $userid The id of the user to remove. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_removeuserfromall' } = { 
        summary => 'Remove a user from the registration to all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_removeuserfromall {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreg_removeuserfromall");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_removeuserfromall");
    }

    # parse inputs
    my $_resource_path = '/eventreg/removeuserfromall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreg_removeuserfromgroup
#
# Remove a user from a course group
# 
# @param string $userid The id of the user to remove. (required)
# @param string $codegroup The code group of the events/courses. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'codegroup' => {
        data_type => 'string',
        description => 'The code group of the events/courses.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreg_removeuserfromgroup' } = { 
        summary => 'Remove a user from a course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreg_removeuserfromgroup {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreg_removeuserfromgroup");
    }

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventreg_removeuserfromgroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreg_removeuserfromgroup");
    }

    # parse inputs
    my $_resource_path = '/eventreg/removeuserfromgroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
