=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::InteractionApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# interaction_delete
#
# Delete an interaction
# 
# @param string $id The id of the interaction to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the interaction to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interaction_delete' } = { 
        summary => 'Delete an interaction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interaction_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling interaction_delete");
    }

    # parse inputs
    my $_resource_path = '/interaction/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interaction_feed
#
# Get the interactions feed
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param DateTime $startdate If set, only interactions that happened after this date are returned. (optional)
# @param boolean $public Specifies whether to return public or private interactions. (optional)
# @param string $contexttype The type of the context of the interactions to return. (optional)
# @param string $contextid The id of the context of the interactions to return. (optional)
# @param string $types The  comma separated types of the interactions to return. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
# @param boolean $showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
# @param boolean $orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'If set, only interactions that happened after this date are returned.',
        required => '0',
    },
    'public' => {
        data_type => 'boolean',
        description => 'Specifies whether to return public or private interactions.',
        required => '0',
    },
    'contexttype' => {
        data_type => 'string',
        description => 'The type of the context of the interactions to return.',
        required => '0',
    },
    'contextid' => {
        data_type => 'string',
        description => 'The id of the context of the interactions to return.',
        required => '0',
    },
    'types' => {
        data_type => 'string',
        description => 'The  comma separated types of the interactions to return.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'showdefaultphoto' => {
        data_type => 'boolean',
        description => 'If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.',
        required => '0',
    },
    'orderdescending' => {
        data_type => 'boolean',
        description => 'If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interaction_feed' } = { 
        summary => 'Get the interactions feed',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interaction_feed {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling interaction_feed");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling interaction_feed");
    }

    # parse inputs
    my $_resource_path = '/interaction/feed';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'public'}) {
        $query_params->{'public'} = $self->{api_client}->to_query_value($args{'public'});
    }

    # query params
    if ( exists $args{'contexttype'}) {
        $query_params->{'contexttype'} = $self->{api_client}->to_query_value($args{'contexttype'});
    }

    # query params
    if ( exists $args{'contextid'}) {
        $query_params->{'contextid'} = $self->{api_client}->to_query_value($args{'contextid'});
    }

    # query params
    if ( exists $args{'types'}) {
        $query_params->{'types'} = $self->{api_client}->to_query_value($args{'types'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # query params
    if ( exists $args{'showdefaultphoto'}) {
        $query_params->{'showdefaultphoto'} = $self->{api_client}->to_query_value($args{'showdefaultphoto'});
    }

    # query params
    if ( exists $args{'orderdescending'}) {
        $query_params->{'orderdescending'} = $self->{api_client}->to_query_value($args{'orderdescending'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interaction_get
#
# View an interaction
# 
# @param string $id The id of the interaction. (required)
# @param int $thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the interaction.',
        required => '1',
    },
    'thumbnailmediasize' => {
        data_type => 'int',
        description => 'The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interaction_get' } = { 
        summary => 'View an interaction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interaction_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling interaction_get");
    }

    # parse inputs
    my $_resource_path = '/interaction/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'thumbnailmediasize'}) {
        $query_params->{'thumbnailmediasize'} = $self->{api_client}->to_query_value($args{'thumbnailmediasize'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interaction_listprivatesummary
#
# Get current user's latest private interactions
# 
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
# @param boolean $showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
{
    my $params = {
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'showdefaultphoto' => {
        data_type => 'boolean',
        description => 'If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interaction_listprivatesummary' } = { 
        summary => 'Get current user&#39;s latest private interactions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interaction_listprivatesummary {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/interaction/listprivatesummary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # query params
    if ( exists $args{'showdefaultphoto'}) {
        $query_params->{'showdefaultphoto'} = $self->{api_client}->to_query_value($args{'showdefaultphoto'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interaction_save
#
# Save an interaction
# 
# @param string $id The id of the interaction to save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the interaction to save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interaction_save' } = { 
        summary => 'Save an interaction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interaction_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling interaction_save");
    }

    # parse inputs
    my $_resource_path = '/interaction/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
