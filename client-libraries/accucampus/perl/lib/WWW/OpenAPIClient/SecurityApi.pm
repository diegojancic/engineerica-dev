=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::SecurityApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# security_assesspermission
#
# Returns the list of users for a specific permission
# 
# @param string $commandname Name of the action or command to get the roles. (required)
{
    my $params = {
    'commandname' => {
        data_type => 'string',
        description => 'Name of the action or command to get the roles.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_assesspermission' } = { 
        summary => 'Returns the list of users for a specific permission',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub security_assesspermission {
    my ($self, %args) = @_;

    # verify the required parameter 'commandname' is set
    unless (exists $args{'commandname'}) {
      croak("Missing the required parameter 'commandname' when calling security_assesspermission");
    }

    # parse inputs
    my $_resource_path = '/security/assesspermission';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'commandname'}) {
        $query_params->{'commandname'} = $self->{api_client}->to_query_value($args{'commandname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# security_assessrole
#
# Returns the list of permissions for a specific role
# 
# @param string $roleid Role ID to list the effective permissions. (required)
{
    my $params = {
    'roleid' => {
        data_type => 'string',
        description => 'Role ID to list the effective permissions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_assessrole' } = { 
        summary => 'Returns the list of permissions for a specific role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub security_assessrole {
    my ($self, %args) = @_;

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling security_assessrole");
    }

    # parse inputs
    my $_resource_path = '/security/assessrole';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# security_assessscope
#
# Returns the list of users for a specific user
# 
# @param string $locationid Location ID to list the users with that scope. (optional)
{
    my $params = {
    'locationid' => {
        data_type => 'string',
        description => 'Location ID to list the users with that scope.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_assessscope' } = { 
        summary => 'Returns the list of users for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub security_assessscope {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/security/assessscope';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# security_assessuser
#
# Returns the list of permissions for a specific user
# 
# @param string $userid User ID to list the effective permissions. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'User ID to list the effective permissions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_assessuser' } = { 
        summary => 'Returns the list of permissions for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub security_assessuser {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling security_assessuser");
    }

    # parse inputs
    my $_resource_path = '/security/assessuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
