=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ScheduleApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# schedule_delete
#
# Delete a schedule slot
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_delete' } = { 
        summary => 'Delete a schedule slot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/schedule/delete';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_deletemine
#
# Delete a specific block from a user's own schedule
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_deletemine' } = { 
        summary => 'Delete a specific block from a user&#39;s own schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_deletemine {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/schedule/deletemine';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_enable
#
# Enable or disable the schedule for a specific person
# 
# @param string $userid The id of the user to enable or disable the schedule. (required)
# @param boolean $enable True to enable schedules, false to disable. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to enable or disable the schedule.',
        required => '1',
    },
    'enable' => {
        data_type => 'boolean',
        description => 'True to enable schedules, false to disable.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_enable' } = { 
        summary => 'Enable or disable the schedule for a specific person',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_enable {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling schedule_enable");
    }

    # verify the required parameter 'enable' is set
    unless (exists $args{'enable'}) {
      croak("Missing the required parameter 'enable' when calling schedule_enable");
    }

    # parse inputs
    my $_resource_path = '/schedule/enable';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'enable'}) {
        $query_params->{'enable'} = $self->{api_client}->to_query_value($args{'enable'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_enablemine
#
# Enable or disable current user's schedule
# 
# @param boolean $enable True to enable schedules, false to disable. (required)
{
    my $params = {
    'enable' => {
        data_type => 'boolean',
        description => 'True to enable schedules, false to disable.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_enablemine' } = { 
        summary => 'Enable or disable current user&#39;s schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_enablemine {
    my ($self, %args) = @_;

    # verify the required parameter 'enable' is set
    unless (exists $args{'enable'}) {
      croak("Missing the required parameter 'enable' when calling schedule_enablemine");
    }

    # parse inputs
    my $_resource_path = '/schedule/enablemine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'enable'}) {
        $query_params->{'enable'} = $self->{api_client}->to_query_value($args{'enable'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_findallstaffslots
#
# Search available schedule slots by service, event, date
# 
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $staffid The id of the staff to filter by. (optional)
# @param string $serviceids CSV list of the service Ids to filter by. (optional)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the location to filter by. (optional)
# @param string $staffroleids CSV list of the staff member role ids to filter by. (optional)
# @param string $availablefor The specific availability type to filter by. (optional)
{
    my $params = {
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'staffid' => {
        data_type => 'string',
        description => 'The id of the staff to filter by.',
        required => '0',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service Ids to filter by.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location to filter by.',
        required => '0',
    },
    'staffroleids' => {
        data_type => 'string',
        description => 'CSV list of the staff member role ids to filter by.',
        required => '0',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'The specific availability type to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_findallstaffslots' } = { 
        summary => 'Search available schedule slots by service, event, date',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_findallstaffslots {
    my ($self, %args) = @_;

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling schedule_findallstaffslots");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling schedule_findallstaffslots");
    }

    # parse inputs
    my $_resource_path = '/schedule/findallstaffslots';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'staffid'}) {
        $query_params->{'staffid'} = $self->{api_client}->to_query_value($args{'staffid'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'staffroleids'}) {
        $query_params->{'staffroleids'} = $self->{api_client}->to_query_value($args{'staffroleids'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_findslots
#
# Search available schedule slots by service, event, date and/or staff
# 
# @param string $staffid The id of the staff to filter by. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $serviceids CSV list of the service Ids to filter by. (optional)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the service to filter by. (optional)
# @param string $availablefor The specific availability type to filter by. (optional)
{
    my $params = {
    'staffid' => {
        data_type => 'string',
        description => 'The id of the staff to filter by.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service Ids to filter by.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '0',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'The specific availability type to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_findslots' } = { 
        summary => 'Search available schedule slots by service, event, date and/or staff',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_findslots {
    my ($self, %args) = @_;

    # verify the required parameter 'staffid' is set
    unless (exists $args{'staffid'}) {
      croak("Missing the required parameter 'staffid' when calling schedule_findslots");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling schedule_findslots");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling schedule_findslots");
    }

    # parse inputs
    my $_resource_path = '/schedule/findslots';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'staffid'}) {
        $query_params->{'staffid'} = $self->{api_client}->to_query_value($args{'staffid'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_findstaffavail
#
# Search available staff members slots by service, event, and/or date
# 
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $serviceids CSV list of the service ids to filter by. (optional)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the service to filter by. (optional)
# @param string $staffroleids CSV list of the staff member role ids to filter by. (optional)
# @param string $availablefor Filter slots by a specific availability type. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service ids to filter by.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '0',
    },
    'staffroleids' => {
        data_type => 'string',
        description => 'CSV list of the staff member role ids to filter by.',
        required => '0',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'Filter slots by a specific availability type.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_findstaffavail' } = { 
        summary => 'Search available staff members slots by service, event, and/or date',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_findstaffavail {
    my ($self, %args) = @_;

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling schedule_findstaffavail");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling schedule_findstaffavail");
    }

    # parse inputs
    my $_resource_path = '/schedule/findstaffavail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'staffroleids'}) {
        $query_params->{'staffroleids'} = $self->{api_client}->to_query_value($args{'staffroleids'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_get
#
# Search and view details of a specific schedule slot
# 
# @param string $scheduleid The id of the schedule. (required)
{
    my $params = {
    'scheduleid' => {
        data_type => 'string',
        description => 'The id of the schedule.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_get' } = { 
        summary => 'Search and view details of a specific schedule slot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_get {
    my ($self, %args) = @_;

    # verify the required parameter 'scheduleid' is set
    unless (exists $args{'scheduleid'}) {
      croak("Missing the required parameter 'scheduleid' when calling schedule_get");
    }

    # parse inputs
    my $_resource_path = '/schedule/get';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'scheduleid'}) {
        $query_params->{'scheduleid'} = $self->{api_client}->to_query_value($args{'scheduleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_getmine
#
# View details of a specific schedule block, for current user
# 
# @param string $scheduleid The id of the schedule. (required)
{
    my $params = {
    'scheduleid' => {
        data_type => 'string',
        description => 'The id of the schedule.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_getmine' } = { 
        summary => 'View details of a specific schedule block, for current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_getmine {
    my ($self, %args) = @_;

    # verify the required parameter 'scheduleid' is set
    unless (exists $args{'scheduleid'}) {
      croak("Missing the required parameter 'scheduleid' when calling schedule_getmine");
    }

    # parse inputs
    my $_resource_path = '/schedule/getmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'scheduleid'}) {
        $query_params->{'scheduleid'} = $self->{api_client}->to_query_value($args{'scheduleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_getstaff
#
# View a list of schedule information of a specified person
# 
# @param string $userid The id of the user to get info. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to get info.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_getstaff' } = { 
        summary => 'View a list of schedule information of a specified person',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_getstaff {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling schedule_getstaff");
    }

    # parse inputs
    my $_resource_path = '/schedule/getstaff';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_getstaffmine
#
# View current user's schedule information
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'schedule_getstaffmine' } = { 
        summary => 'View current user&#39;s schedule information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_getstaffmine {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/schedule/getstaffmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_myofftimes
#
# View current user's schedule exceptions
# 
# @param boolean $includedeleted If true the deleted offtimes are also returned. (optional)
# @param boolean $onlyupcoming If true then only upcoming offtimes are returned. (optional)
# @param DateTime $modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
{
    my $params = {
    'includedeleted' => {
        data_type => 'boolean',
        description => 'If true the deleted offtimes are also returned.',
        required => '0',
    },
    'onlyupcoming' => {
        data_type => 'boolean',
        description => 'If true then only upcoming offtimes are returned.',
        required => '0',
    },
    'modifiedafter' => {
        data_type => 'DateTime',
        description => 'If specified, only offtimes modified after the specified date will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_myofftimes' } = { 
        summary => 'View current user&#39;s schedule exceptions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_myofftimes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/schedule/myofftimes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'includedeleted'}) {
        $query_params->{'includedeleted'} = $self->{api_client}->to_query_value($args{'includedeleted'});
    }

    # query params
    if ( exists $args{'onlyupcoming'}) {
        $query_params->{'onlyupcoming'} = $self->{api_client}->to_query_value($args{'onlyupcoming'});
    }

    # query params
    if ( exists $args{'modifiedafter'}) {
        $query_params->{'modifiedafter'} = $self->{api_client}->to_query_value($args{'modifiedafter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_save
#
# Create or edit a schedule slot
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_save' } = { 
        summary => 'Create or edit a schedule slot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_save {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/schedule/save';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedule_savemine
#
# Create or edit a block in current user's schedule
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_savemine' } = { 
        summary => 'Create or edit a block in current user&#39;s schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedule_savemine {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/schedule/savemine';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
