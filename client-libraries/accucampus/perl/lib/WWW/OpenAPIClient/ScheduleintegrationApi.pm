=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ScheduleintegrationApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# scheduleintegration_clearids
#
# Clear all third party IDs from specified staff member's schedule items.
# 
# @param string $staff The ID of the staff member whose schedule items third party IDs must be cleared. (required)
{
    my $params = {
    'staff' => {
        data_type => 'string',
        description => 'The ID of the staff member whose schedule items third party IDs must be cleared.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegration_clearids' } = { 
        summary => 'Clear all third party IDs from specified staff member&#39;s schedule items.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegration_clearids {
    my ($self, %args) = @_;

    # verify the required parameter 'staff' is set
    unless (exists $args{'staff'}) {
      croak("Missing the required parameter 'staff' when calling scheduleintegration_clearids");
    }

    # parse inputs
    my $_resource_path = '/scheduleintegration/clearids';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'staff'}) {
        $query_params->{'staff'} = $self->{api_client}->to_query_value($args{'staff'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegration_deleteitem
#
# Delete a schedule item looking up by a third party ID
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegration_deleteitem' } = { 
        summary => 'Delete a schedule item looking up by a third party ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegration_deleteitem {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scheduleintegration/deleteitem';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegration_deleteitemsbymasterid
#
# Delete multiple schedule items looking up by a third party master ID
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegration_deleteitemsbymasterid' } = { 
        summary => 'Delete multiple schedule items looking up by a third party master ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegration_deleteitemsbymasterid {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scheduleintegration/deleteitemsbymasterid';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegration_getitem
#
# Get a schedule item looking up by a third party ID
# 
# @param string $thirdpartyid The third party id to search for the schedule item. (required)
{
    my $params = {
    'thirdpartyid' => {
        data_type => 'string',
        description => 'The third party id to search for the schedule item.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegration_getitem' } = { 
        summary => 'Get a schedule item looking up by a third party ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegration_getitem {
    my ($self, %args) = @_;

    # verify the required parameter 'thirdpartyid' is set
    unless (exists $args{'thirdpartyid'}) {
      croak("Missing the required parameter 'thirdpartyid' when calling scheduleintegration_getitem");
    }

    # parse inputs
    my $_resource_path = '/scheduleintegration/getitem';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'thirdpartyid'}) {
        $query_params->{'thirdpartyid'} = $self->{api_client}->to_query_value($args{'thirdpartyid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegration_saveitem
#
# Save a schedule item looking up by a third party ID
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegration_saveitem' } = { 
        summary => 'Save a schedule item looking up by a third party ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegration_saveitem {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scheduleintegration/saveitem';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegration_setid
#
# Set a 3rd party ID on a specific schedule item
# 
# @param string $id The id of the schedule block / appointment. (required)
# @param string $thirdpartyid The 3rd party ID to set. (required)
# @param string $thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items). (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the schedule block / appointment.',
        required => '1',
    },
    'thirdpartyid' => {
        data_type => 'string',
        description => 'The 3rd party ID to set.',
        required => '1',
    },
    'thirdpartymasterid' => {
        data_type => 'string',
        description => 'The 3rd party master ID to set (useful to handle recurring items).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegration_setid' } = { 
        summary => 'Set a 3rd party ID on a specific schedule item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegration_setid {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling scheduleintegration_setid");
    }

    # verify the required parameter 'thirdpartyid' is set
    unless (exists $args{'thirdpartyid'}) {
      croak("Missing the required parameter 'thirdpartyid' when calling scheduleintegration_setid");
    }

    # parse inputs
    my $_resource_path = '/scheduleintegration/setid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'thirdpartyid'}) {
        $query_params->{'thirdpartyid'} = $self->{api_client}->to_query_value($args{'thirdpartyid'});
    }

    # query params
    if ( exists $args{'thirdpartymasterid'}) {
        $query_params->{'thirdpartymasterid'} = $self->{api_client}->to_query_value($args{'thirdpartymasterid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
