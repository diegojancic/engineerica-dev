=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ServiceassignmentApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# serviceassignment_addservice
#
# Enable a service in a specific location
# 
# @param string $serviceid The id of the service to add. (required)
# @param string $locationid The id of the location. (required)
{
    my $params = {
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to add.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceassignment_addservice' } = { 
        summary => 'Enable a service in a specific location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceassignment_addservice {
    my ($self, %args) = @_;

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling serviceassignment_addservice");
    }

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling serviceassignment_addservice");
    }

    # parse inputs
    my $_resource_path = '/serviceassignment/addservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# serviceassignment_getlocation
#
# View a list of services enabled for a specific location
# 
# @param string $locationid The id of the location to get. (required)
# @param boolean $includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
# @param boolean $namefilter Filters the name of the services to return. (optional)
# @param int $count The max number of services to return. (optional)
{
    my $params = {
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location to get.',
        required => '1',
    },
    'includegloballyavailable' => {
        data_type => 'boolean',
        description => 'Specifies whether the services available globally must be returned or not.',
        required => '0',
    },
    'namefilter' => {
        data_type => 'boolean',
        description => 'Filters the name of the services to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of services to return.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceassignment_getlocation' } = { 
        summary => 'View a list of services enabled for a specific location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceassignment_getlocation {
    my ($self, %args) = @_;

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling serviceassignment_getlocation");
    }

    # parse inputs
    my $_resource_path = '/serviceassignment/getlocation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'includegloballyavailable'}) {
        $query_params->{'includegloballyavailable'} = $self->{api_client}->to_query_value($args{'includegloballyavailable'});
    }

    # query params
    if ( exists $args{'namefilter'}) {
        $query_params->{'namefilter'} = $self->{api_client}->to_query_value($args{'namefilter'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# serviceassignment_getservice
#
# View a list of locations where a service is available
# 
# @param string $serviceid The id of the service to get its locations. (required)
{
    my $params = {
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to get its locations.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceassignment_getservice' } = { 
        summary => 'View a list of locations where a service is available',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceassignment_getservice {
    my ($self, %args) = @_;

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling serviceassignment_getservice");
    }

    # parse inputs
    my $_resource_path = '/serviceassignment/getservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# serviceassignment_removeservice
#
# Remove a service from a location
# 
# @param string $serviceid The id of the service to remove. (required)
# @param string $locationid The id of the location to remove the service from. (required)
{
    my $params = {
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to remove.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location to remove the service from.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceassignment_removeservice' } = { 
        summary => 'Remove a service from a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceassignment_removeservice {
    my ($self, %args) = @_;

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling serviceassignment_removeservice");
    }

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling serviceassignment_removeservice");
    }

    # parse inputs
    my $_resource_path = '/serviceassignment/removeservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
