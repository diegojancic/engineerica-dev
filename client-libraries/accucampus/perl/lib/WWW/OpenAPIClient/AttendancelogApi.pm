=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::AttendancelogApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# attendancelog_delete
#
# Delete an attendance log
# 
# @param string $id The id of the attendance log to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_delete' } = { 
        summary => 'Delete an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelog_delete");
    }

    # parse inputs
    my $_resource_path = '/attendancelog/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelog_get
#
# Search and view details of an attendance log
# 
# @param string $id The id of the attendance log to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_get' } = { 
        summary => 'Search and view details of an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelog_get");
    }

    # parse inputs
    my $_resource_path = '/attendancelog/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelog_getchangehistory
#
# Search and view details of an attendance log's swipe history
# 
# @param string $id The id of the attendance log to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_getchangehistory' } = { 
        summary => 'Search and view details of an attendance log&#39;s swipe history',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_getchangehistory {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelog_getchangehistory");
    }

    # parse inputs
    my $_resource_path = '/attendancelog/getchangehistory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelog_list
#
# View a list of attendance logs
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
# @param string $userid The user ID of the user to get the logs. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.',
        required => '0',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user ID of the user to get the logs.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_list' } = { 
        summary => 'View a list of attendance logs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_list {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendancelog_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendancelog_list");
    }

    # parse inputs
    my $_resource_path = '/attendancelog/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelog_listmine
#
# Gets the attendance logs of the current user
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_listmine' } = { 
        summary => 'Gets the attendance logs of the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_listmine {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendancelog_listmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendancelog_listmine");
    }

    # parse inputs
    my $_resource_path = '/attendancelog/listmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelog_liststaff
#
# Gets the attendance logs that the current user is involved in as staff
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_liststaff' } = { 
        summary => 'Gets the attendance logs that the current user is involved in as staff',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_liststaff {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendancelog_liststaff");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendancelog_liststaff");
    }

    # parse inputs
    my $_resource_path = '/attendancelog/liststaff';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelog_save
#
# Create or edit an attendance log
# 
# @param string $id The id of the room to save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the room to save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_save' } = { 
        summary => 'Create or edit an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelog_save");
    }

    # parse inputs
    my $_resource_path = '/attendancelog/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelog_signout
#
# Sign out an attendance log
# 
# @param string $id The id of the attendance log to sign-out. (optional)
# @param string $location The id of the location to filter the users to sign out. (optional)
# @param string $event The id of the event to filter the users to sign out. (optional)
# @param DateTime $datetime Specifies the date and time when the specified logs have to be signed out. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to sign-out.',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location to filter the users to sign out.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event to filter the users to sign out.',
        required => '0',
    },
    'datetime' => {
        data_type => 'DateTime',
        description => 'Specifies the date and time when the specified logs have to be signed out.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_signout' } = { 
        summary => 'Sign out an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_signout {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attendancelog/signout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'datetime'}) {
        $query_params->{'datetime'} = $self->{api_client}->to_query_value($args{'datetime'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelog_whosin
#
# View who's in a location
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $location The id of the location to search for users that are in. (optional)
# @param string $event The id of the event to search for users that are in. (optional)
# @param string $sorting Field to sort by. Either first-name, last-name or sign-in-time. (optional)
# @param string $roles The comma-separated list of ids of the roles to search for users that are in. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
# @param string $extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]). (optional)
# @param boolean $export True to export the results as CSV (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location to search for users that are in.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event to search for users that are in.',
        required => '0',
    },
    'sorting' => {
        data_type => 'string',
        description => 'Field to sort by. Either first-name, last-name or sign-in-time.',
        required => '0',
    },
    'roles' => {
        data_type => 'string',
        description => 'The comma-separated list of ids of the roles to search for users that are in.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'extensions' => {
        data_type => 'string',
        description => 'A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'True to export the results as CSV',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelog_whosin' } = { 
        summary => 'View who&#39;s in a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelog_whosin {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendancelog_whosin");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendancelog_whosin");
    }

    # parse inputs
    my $_resource_path = '/attendancelog/whosin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'sorting'}) {
        $query_params->{'sorting'} = $self->{api_client}->to_query_value($args{'sorting'});
    }

    # query params
    if ( exists $args{'roles'}) {
        $query_params->{'roles'} = $self->{api_client}->to_query_value($args{'roles'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # query params
    if ( exists $args{'extensions'}) {
        $query_params->{'extensions'} = $self->{api_client}->to_query_value($args{'extensions'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
