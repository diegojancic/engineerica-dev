=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::WaitinglineApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# waitingline_adduser
#
# Put user in a waiting line
# 
# @param string $station The id of the sign-in station. (required)
# @param string $user The user&#39;s card number. (required)
# @param string $locationid The location&#39;s id where the swipe must be saved. (optional)
# @param DateTime $time The date and time of the swipe. (optional)
# @param string $signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
# @param string $roleid Specifies the role the user has selected in order to sign-in (optional)
# @param string $services The services ids the user has selected. (optional)
# @param string $eventid The id of the event the user selected. (optional)
# @param string $staff The id of the staff member the user selected. (optional)
# @param int $photosize The swiping user&#39;s photo size. (optional)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The user&#39;s card number.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The location&#39;s id where the swipe must be saved.',
        required => '0',
    },
    'time' => {
        data_type => 'DateTime',
        description => 'The date and time of the swipe.',
        required => '0',
    },
    'signinrole' => {
        data_type => 'string',
        description => 'Specifies if the sign-in is for an attendee or a staff member',
        required => '0',
    },
    'roleid' => {
        data_type => 'string',
        description => 'Specifies the role the user has selected in order to sign-in',
        required => '0',
    },
    'services' => {
        data_type => 'string',
        description => 'The services ids the user has selected.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event the user selected.',
        required => '0',
    },
    'staff' => {
        data_type => 'string',
        description => 'The id of the staff member the user selected.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The swiping user&#39;s photo size.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitingline_adduser' } = { 
        summary => 'Put user in a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitingline_adduser {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling waitingline_adduser");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling waitingline_adduser");
    }

    # parse inputs
    my $_resource_path = '/waitingline/adduser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'time'}) {
        $query_params->{'time'} = $self->{api_client}->to_query_value($args{'time'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'signinrole'}) {
        $query_params->{'signinrole'} = $self->{api_client}->to_query_value($args{'signinrole'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    # query params
    if ( exists $args{'services'}) {
        $query_params->{'services'} = $self->{api_client}->to_query_value($args{'services'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'staff'}) {
        $query_params->{'staff'} = $self->{api_client}->to_query_value($args{'staff'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitingline_delete
#
# Delete a waiting line
# 
# @param string $id The id of the line to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the line to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitingline_delete' } = { 
        summary => 'Delete a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitingline_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling waitingline_delete");
    }

    # parse inputs
    my $_resource_path = '/waitingline/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitingline_get
#
# View details of a waiting line
# 
# @param string $id The id of the waiting line to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the waiting line to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitingline_get' } = { 
        summary => 'View details of a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitingline_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling waitingline_get");
    }

    # parse inputs
    my $_resource_path = '/waitingline/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitingline_isuserin
#
# Check whether a user is in a waiting line, signed-in or is not in the area
# 
# @param string $station The id of the sign-in station. (required)
# @param DateTime $time The date and time of the swipe. (required)
# @param string $user The card number of the user. (required)
# @param string $location The id of the location the user picked. (optional)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station.',
        required => '1',
    },
    'time' => {
        data_type => 'DateTime',
        description => 'The date and time of the swipe.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card number of the user.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the user picked.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitingline_isuserin' } = { 
        summary => 'Check whether a user is in a waiting line, signed-in or is not in the area',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitingline_isuserin {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling waitingline_isuserin");
    }

    # verify the required parameter 'time' is set
    unless (exists $args{'time'}) {
      croak("Missing the required parameter 'time' when calling waitingline_isuserin");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling waitingline_isuserin");
    }

    # parse inputs
    my $_resource_path = '/waitingline/isuserin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'time'}) {
        $query_params->{'time'} = $self->{api_client}->to_query_value($args{'time'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitingline_list
#
# View a list of waiting lines
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitingline_list' } = { 
        summary => 'View a list of waiting lines',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitingline_list {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling waitingline_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling waitingline_list");
    }

    # parse inputs
    my $_resource_path = '/waitingline/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitingline_removeuser
#
# Remove a user from a waiting line
# 
# @param string $waitingline The id of the waiting line whose item has to be removed. (required)
# @param string $itemid The ID of the item that has to be removed. (required)
{
    my $params = {
    'waitingline' => {
        data_type => 'string',
        description => 'The id of the waiting line whose item has to be removed.',
        required => '1',
    },
    'itemid' => {
        data_type => 'string',
        description => 'The ID of the item that has to be removed.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitingline_removeuser' } = { 
        summary => 'Remove a user from a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitingline_removeuser {
    my ($self, %args) = @_;

    # verify the required parameter 'waitingline' is set
    unless (exists $args{'waitingline'}) {
      croak("Missing the required parameter 'waitingline' when calling waitingline_removeuser");
    }

    # verify the required parameter 'itemid' is set
    unless (exists $args{'itemid'}) {
      croak("Missing the required parameter 'itemid' when calling waitingline_removeuser");
    }

    # parse inputs
    my $_resource_path = '/waitingline/removeuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'waitingline'}) {
        $query_params->{'waitingline'} = $self->{api_client}->to_query_value($args{'waitingline'});
    }

    # query params
    if ( exists $args{'itemid'}) {
        $query_params->{'itemid'} = $self->{api_client}->to_query_value($args{'itemid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitingline_save
#
# Create or edit a waiting line
# 
# @param string $id The id of the waiting line save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the waiting line save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitingline_save' } = { 
        summary => 'Create or edit a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitingline_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling waitingline_save");
    }

    # parse inputs
    my $_resource_path = '/waitingline/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitingline_signinuser
#
# Sign a user in from a waiting line
# 
# @param string $waitingline The id of the waiting line whose item needs to be signed-in. (required)
# @param string $itemid The ID of the item that has to be signed-in. (required)
# @param string $staff The id of the staff member selected to sign-in. (required)
# @param int $photosize The swiping user&#39;s photo size. (optional)
{
    my $params = {
    'waitingline' => {
        data_type => 'string',
        description => 'The id of the waiting line whose item needs to be signed-in.',
        required => '1',
    },
    'itemid' => {
        data_type => 'string',
        description => 'The ID of the item that has to be signed-in.',
        required => '1',
    },
    'staff' => {
        data_type => 'string',
        description => 'The id of the staff member selected to sign-in.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The swiping user&#39;s photo size.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitingline_signinuser' } = { 
        summary => 'Sign a user in from a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitingline_signinuser {
    my ($self, %args) = @_;

    # verify the required parameter 'waitingline' is set
    unless (exists $args{'waitingline'}) {
      croak("Missing the required parameter 'waitingline' when calling waitingline_signinuser");
    }

    # verify the required parameter 'itemid' is set
    unless (exists $args{'itemid'}) {
      croak("Missing the required parameter 'itemid' when calling waitingline_signinuser");
    }

    # verify the required parameter 'staff' is set
    unless (exists $args{'staff'}) {
      croak("Missing the required parameter 'staff' when calling waitingline_signinuser");
    }

    # parse inputs
    my $_resource_path = '/waitingline/signinuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'waitingline'}) {
        $query_params->{'waitingline'} = $self->{api_client}->to_query_value($args{'waitingline'});
    }

    # query params
    if ( exists $args{'itemid'}) {
        $query_params->{'itemid'} = $self->{api_client}->to_query_value($args{'itemid'});
    }

    # query params
    if ( exists $args{'staff'}) {
        $query_params->{'staff'} = $self->{api_client}->to_query_value($args{'staff'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
