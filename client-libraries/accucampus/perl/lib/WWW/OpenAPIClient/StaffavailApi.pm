=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::StaffavailApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# staffavail_addmetoallservices
#
# Associate current user to all services
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'staffavail_addmetoallservices' } = { 
        summary => 'Associate current user to all services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_addmetoallservices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/staffavail/addmetoallservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_addmetoservice
#
# Associate current user to a service
# 
# @param string $serviceid The id of the service. (required)
{
    my $params = {
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_addmetoservice' } = { 
        summary => 'Associate current user to a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_addmetoservice {
    my ($self, %args) = @_;

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavail_addmetoservice");
    }

    # parse inputs
    my $_resource_path = '/staffavail/addmetoservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_addusertoallservices
#
# Associate a staff member to all services
# 
# @param string $userid The id of the user to add. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_addusertoallservices' } = { 
        summary => 'Associate a staff member to all services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_addusertoallservices {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavail_addusertoallservices");
    }

    # parse inputs
    my $_resource_path = '/staffavail/addusertoallservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_addusertoservice
#
# Associate a staff member to a service
# 
# @param string $userid The id of the user to add. (required)
# @param string $serviceid The id of the service. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_addusertoservice' } = { 
        summary => 'Associate a staff member to a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_addusertoservice {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavail_addusertoservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavail_addusertoservice");
    }

    # parse inputs
    my $_resource_path = '/staffavail/addusertoservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_getmyservices
#
# View the services the current user is available for
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'staffavail_getmyservices' } = { 
        summary => 'View the services the current user is available for',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_getmyservices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/staffavail/getmyservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_getservices
#
# View a list of services that a staff member is available for
# 
# @param string $userid The user id to list services. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The user id to list services.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_getservices' } = { 
        summary => 'View a list of services that a staff member is available for',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_getservices {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavail_getservices");
    }

    # parse inputs
    my $_resource_path = '/staffavail/getservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_getusersforservice
#
# View a list of staff members that are available for a specific service
# 
# @param string $serviceid The service id to list users. (required)
{
    my $params = {
    'serviceid' => {
        data_type => 'string',
        description => 'The service id to list users.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_getusersforservice' } = { 
        summary => 'View a list of staff members that are available for a specific service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_getusersforservice {
    my ($self, %args) = @_;

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavail_getusersforservice");
    }

    # parse inputs
    my $_resource_path = '/staffavail/getusersforservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_listtypes
#
# View all the availability types
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'staffavail_listtypes' } = { 
        summary => 'View all the availability types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_listtypes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/staffavail/listtypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_removemefromallservices
#
# Remove current user from all services
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'staffavail_removemefromallservices' } = { 
        summary => 'Remove current user from all services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_removemefromallservices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/staffavail/removemefromallservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_removemefromservice
#
# Remove current user from a service
# 
# @param string $serviceid The id of the service. (required)
{
    my $params = {
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_removemefromservice' } = { 
        summary => 'Remove current user from a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_removemefromservice {
    my ($self, %args) = @_;

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavail_removemefromservice");
    }

    # parse inputs
    my $_resource_path = '/staffavail/removemefromservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_removeuserfromallservices
#
# Removes a staff member from the registration to all services
# 
# @param string $userid The id of the user to remove. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_removeuserfromallservices' } = { 
        summary => 'Removes a staff member from the registration to all services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_removeuserfromallservices {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavail_removeuserfromallservices");
    }

    # parse inputs
    my $_resource_path = '/staffavail/removeuserfromallservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_removeuserfromservice
#
# Remove a staff member from a service
# 
# @param string $userid The id of the user to remove. (required)
# @param string $serviceid The id of the service. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_removeuserfromservice' } = { 
        summary => 'Remove a staff member from a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_removeuserfromservice {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavail_removeuserfromservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavail_removeuserfromservice");
    }

    # parse inputs
    my $_resource_path = '/staffavail/removeuserfromservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_setavailability
#
# Make a staff member available for a specific availability type
# 
# @param string $userid The id of the user whose specific availability has to be set. (required)
# @param string $availablefor Specific availability to set. (optional)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user whose specific availability has to be set.',
        required => '1',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'Specific availability to set.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_setavailability' } = { 
        summary => 'Make a staff member available for a specific availability type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_setavailability {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavail_setavailability");
    }

    # parse inputs
    my $_resource_path = '/staffavail/setavailability';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavail_setmyavailability
#
# Change current user's availability type
# 
# @param string $availablefor Specific availability to set. (optional)
{
    my $params = {
    'availablefor' => {
        data_type => 'string',
        description => 'Specific availability to set.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavail_setmyavailability' } = { 
        summary => 'Change current user&#39;s availability type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavail_setmyavailability {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/staffavail/setmyavailability';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
