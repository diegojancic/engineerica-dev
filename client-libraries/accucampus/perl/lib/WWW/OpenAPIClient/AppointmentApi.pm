=begin comment

AccuCampus OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::AppointmentApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# appointment_cancel
#
# Cancel an appointment
# 
# @param string $id The id of the appointment to cancel. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to cancel.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_cancel' } = { 
        summary => 'Cancel an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_cancel {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_cancel");
    }

    # parse inputs
    my $_resource_path = '/appointment/cancel';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_checkisvalid
#
# Check if an appointment is valid or not
# 
# @param string $id The id of the appointment to check. (required)
# @param boolean $editing Specifies whether the check is for a new appointment or an existing one. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to check.',
        required => '1',
    },
    'editing' => {
        data_type => 'boolean',
        description => 'Specifies whether the check is for a new appointment or an existing one.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_checkisvalid' } = { 
        summary => 'Check if an appointment is valid or not',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_checkisvalid {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_checkisvalid");
    }

    # parse inputs
    my $_resource_path = '/appointment/checkisvalid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'editing'}) {
        $query_params->{'editing'} = $self->{api_client}->to_query_value($args{'editing'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_editanyway
#
# Edit an appointment even if it breaks activated rules
# 
# @param string $id The id of the appointment to edit. (required)
# @param string $attendee The id of the attendee involved in the appointment. (required)
# @param string $staff The id of the staff member involved in the appointment. (required)
# @param string $location The id of the location where the appointment will take place. (required)
# @param DateTime $start The appointment&#39;s start date &amp; time. (required)
# @param DateTime $end The appointment&#39;s end date &amp; time. (required)
# @param string $term The id of the term when the appointment takes place. (optional)
# @param string $event The id of the event of the appointment. (optional)
# @param string $services Comma-separated string containing the ids of the services of the appointment. (optional)
# @param string $notes The notes of the appointment. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to edit.',
        required => '1',
    },
    'attendee' => {
        data_type => 'string',
        description => 'The id of the attendee involved in the appointment.',
        required => '1',
    },
    'staff' => {
        data_type => 'string',
        description => 'The id of the staff member involved in the appointment.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location where the appointment will take place.',
        required => '1',
    },
    'start' => {
        data_type => 'DateTime',
        description => 'The appointment&#39;s start date &amp; time.',
        required => '1',
    },
    'end' => {
        data_type => 'DateTime',
        description => 'The appointment&#39;s end date &amp; time.',
        required => '1',
    },
    'term' => {
        data_type => 'string',
        description => 'The id of the term when the appointment takes place.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event of the appointment.',
        required => '0',
    },
    'services' => {
        data_type => 'string',
        description => 'Comma-separated string containing the ids of the services of the appointment.',
        required => '0',
    },
    'notes' => {
        data_type => 'string',
        description => 'The notes of the appointment.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_editanyway' } = { 
        summary => 'Edit an appointment even if it breaks activated rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_editanyway {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_editanyway");
    }

    # verify the required parameter 'attendee' is set
    unless (exists $args{'attendee'}) {
      croak("Missing the required parameter 'attendee' when calling appointment_editanyway");
    }

    # verify the required parameter 'staff' is set
    unless (exists $args{'staff'}) {
      croak("Missing the required parameter 'staff' when calling appointment_editanyway");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling appointment_editanyway");
    }

    # verify the required parameter 'start' is set
    unless (exists $args{'start'}) {
      croak("Missing the required parameter 'start' when calling appointment_editanyway");
    }

    # verify the required parameter 'end' is set
    unless (exists $args{'end'}) {
      croak("Missing the required parameter 'end' when calling appointment_editanyway");
    }

    # parse inputs
    my $_resource_path = '/appointment/editanyway';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'term'}) {
        $query_params->{'term'} = $self->{api_client}->to_query_value($args{'term'});
    }

    # query params
    if ( exists $args{'attendee'}) {
        $query_params->{'attendee'} = $self->{api_client}->to_query_value($args{'attendee'});
    }

    # query params
    if ( exists $args{'staff'}) {
        $query_params->{'staff'} = $self->{api_client}->to_query_value($args{'staff'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'services'}) {
        $query_params->{'services'} = $self->{api_client}->to_query_value($args{'services'});
    }

    # query params
    if ( exists $args{'notes'}) {
        $query_params->{'notes'} = $self->{api_client}->to_query_value($args{'notes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_editpresence
#
# Edit the no-show status of an appointment
# 
# @param string $id The id of the appointment to edit its presence. (required)
# @param boolean $showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to edit its presence.',
        required => '1',
    },
    'showedup' => {
        data_type => 'boolean',
        description => 'Specifies whether the attendee was showed-up or not in the appointment.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_editpresence' } = { 
        summary => 'Edit the no-show status of an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_editpresence {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_editpresence");
    }

    # verify the required parameter 'showedup' is set
    unless (exists $args{'showedup'}) {
      croak("Missing the required parameter 'showedup' when calling appointment_editpresence");
    }

    # parse inputs
    my $_resource_path = '/appointment/editpresence';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'showedup'}) {
        $query_params->{'showedup'} = $self->{api_client}->to_query_value($args{'showedup'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_findallstaffslots
#
# Finds all staff available slots filtered by service, date, etc
# 
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $serviceids CSV list of the service Ids to filter by. (required)
# @param string $locationid The id of the service to filter by. (required)
# @param string $eventid The id of the event to filter by. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service Ids to filter by.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_findallstaffslots' } = { 
        summary => 'Finds all staff available slots filtered by service, date, etc',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_findallstaffslots {
    my ($self, %args) = @_;

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling appointment_findallstaffslots");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling appointment_findallstaffslots");
    }

    # verify the required parameter 'serviceids' is set
    unless (exists $args{'serviceids'}) {
      croak("Missing the required parameter 'serviceids' when calling appointment_findallstaffslots");
    }

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling appointment_findallstaffslots");
    }

    # parse inputs
    my $_resource_path = '/appointment/findallstaffslots';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_findslots
#
# Finds available slots filtered by service, date, staff, etc
# 
# @param string $staffid The id of the staff to filter by. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $serviceids CSV list of the service Ids to filter by. (required)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the service to filter by. (optional)
{
    my $params = {
    'staffid' => {
        data_type => 'string',
        description => 'The id of the staff to filter by.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service Ids to filter by.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_findslots' } = { 
        summary => 'Finds available slots filtered by service, date, staff, etc',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_findslots {
    my ($self, %args) = @_;

    # verify the required parameter 'staffid' is set
    unless (exists $args{'staffid'}) {
      croak("Missing the required parameter 'staffid' when calling appointment_findslots");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling appointment_findslots");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling appointment_findslots");
    }

    # verify the required parameter 'serviceids' is set
    unless (exists $args{'serviceids'}) {
      croak("Missing the required parameter 'serviceids' when calling appointment_findslots");
    }

    # parse inputs
    my $_resource_path = '/appointment/findslots';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'staffid'}) {
        $query_params->{'staffid'} = $self->{api_client}->to_query_value($args{'staffid'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_findstaff
#
# Finds staff available by service, date, event, etc
# 
# @param string $serviceids CSV list of the service ids to filter by. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the service to filter by. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service ids to filter by.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_findstaff' } = { 
        summary => 'Finds staff available by service, date, event, etc',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_findstaff {
    my ($self, %args) = @_;

    # verify the required parameter 'serviceids' is set
    unless (exists $args{'serviceids'}) {
      croak("Missing the required parameter 'serviceids' when calling appointment_findstaff");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling appointment_findstaff");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling appointment_findstaff");
    }

    # parse inputs
    my $_resource_path = '/appointment/findstaff';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_get
#
# Search and view details of an appointment
# 
# @param string $id The id of the appointment to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_get' } = { 
        summary => 'Search and view details of an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_get");
    }

    # parse inputs
    my $_resource_path = '/appointment/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_getcurrent
#
# Get the current appointments for the user that is about to sign-in via the specified sign-in station.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user. (required)
# @param string $location The id of the location where the user wants to sign-in. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location where the user wants to sign-in.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_getcurrent' } = { 
        summary => 'Get the current appointments for the user that is about to sign-in via the specified sign-in station.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_getcurrent {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling appointment_getcurrent");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling appointment_getcurrent");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling appointment_getcurrent");
    }

    # parse inputs
    my $_resource_path = '/appointment/getcurrent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_getlocations
#
# Find locations where a service is available
# 
# @param string $serviceid The id of the service to get its locations. (required)
{
    my $params = {
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to get its locations.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_getlocations' } = { 
        summary => 'Find locations where a service is available',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_getlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling appointment_getlocations");
    }

    # parse inputs
    my $_resource_path = '/appointment/getlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_list
#
# View a list of appointments
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param DateTime $startdate The start date of the period to filter the appointments. (optional)
# @param DateTime $enddate The end date of the period to filter the appointments. (optional)
# @param string $userid The attendee id to filter the appointments. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the appointments.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the appointments.',
        required => '0',
    },
    'userid' => {
        data_type => 'string',
        description => 'The attendee id to filter the appointments.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_list' } = { 
        summary => 'View a list of appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_list {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling appointment_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling appointment_list");
    }

    # parse inputs
    my $_resource_path = '/appointment/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_listmine
#
# View all my upcoming appointments
# 
# @param DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
# @param DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
{
    my $params = {
    'start' => {
        data_type => 'DateTime',
        description => 'If specified, only appointments that start after the specified date will be returned.',
        required => '0',
    },
    'modifiedafter' => {
        data_type => 'DateTime',
        description => 'If specified, only appointments modified after the specified date will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_listmine' } = { 
        summary => 'View all my upcoming appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_listmine {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/appointment/listmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'modifiedafter'}) {
        $query_params->{'modifiedafter'} = $self->{api_client}->to_query_value($args{'modifiedafter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_listupcoming
#
# Search and view details of all my upcoming appointments
# 
# @param DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
# @param DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
{
    my $params = {
    'start' => {
        data_type => 'DateTime',
        description => 'If specified, only appointments that start after the specified date will be returned.',
        required => '0',
    },
    'modifiedafter' => {
        data_type => 'DateTime',
        description => 'If specified, only appointments modified after the specified date will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_listupcoming' } = { 
        summary => 'Search and view details of all my upcoming appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_listupcoming {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/appointment/listupcoming';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'modifiedafter'}) {
        $query_params->{'modifiedafter'} = $self->{api_client}->to_query_value($args{'modifiedafter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_rescheduleoutlook
#
# Reschedule an appointment from MS Outlook.
# 
# @param string $id The id of the appointment to edit. (required)
# @param DateTime $start The appointment&#39;s start date &amp; time. (required)
# @param DateTime $end The appointment&#39;s end date &amp; time. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to edit.',
        required => '1',
    },
    'start' => {
        data_type => 'DateTime',
        description => 'The appointment&#39;s start date &amp; time.',
        required => '1',
    },
    'end' => {
        data_type => 'DateTime',
        description => 'The appointment&#39;s end date &amp; time.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_rescheduleoutlook' } = { 
        summary => 'Reschedule an appointment from MS Outlook.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_rescheduleoutlook {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_rescheduleoutlook");
    }

    # verify the required parameter 'start' is set
    unless (exists $args{'start'}) {
      croak("Missing the required parameter 'start' when calling appointment_rescheduleoutlook");
    }

    # verify the required parameter 'end' is set
    unless (exists $args{'end'}) {
      croak("Missing the required parameter 'end' when calling appointment_rescheduleoutlook");
    }

    # parse inputs
    my $_resource_path = '/appointment/rescheduleoutlook';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_restore
#
# Restore an appointment
# 
# @param string $id The id of the appointment to restore. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to restore.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_restore' } = { 
        summary => 'Restore an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_restore {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_restore");
    }

    # parse inputs
    my $_resource_path = '/appointment/restore';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_restoreanyway
#
# Restore an appointment even if it breaks activated rules
# 
# @param string $id The id of the appointment to restore. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to restore.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_restoreanyway' } = { 
        summary => 'Restore an appointment even if it breaks activated rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_restoreanyway {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_restoreanyway");
    }

    # parse inputs
    my $_resource_path = '/appointment/restoreanyway';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_save
#
# Schedule an appointment
# 
# @param string $id The id of the appointment to save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_save' } = { 
        summary => 'Schedule an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_save");
    }

    # parse inputs
    my $_resource_path = '/appointment/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_setasvalid
#
# Schedule an appointment even if it breaks activated rules
# 
# @param string $id The id of the appointment to set as valid. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to set as valid.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_setasvalid' } = { 
        summary => 'Schedule an appointment even if it breaks activated rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_setasvalid {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_setasvalid");
    }

    # parse inputs
    my $_resource_path = '/appointment/setasvalid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_suggestlocations
#
# View the locations with most appointments
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'appointment_suggestlocations' } = { 
        summary => 'View the locations with most appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_suggestlocations {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/appointment/suggestlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_suggestservices
#
# View the services with most appointments
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'appointment_suggestservices' } = { 
        summary => 'View the services with most appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_suggestservices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/appointment/suggestservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointment_void
#
# Void an appointment
# 
# @param string $id The id of the appointment to cancel. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to cancel.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointment_void' } = { 
        summary => 'Void an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointment_void {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointment_void");
    }

    # parse inputs
    my $_resource_path = '/appointment/void';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
