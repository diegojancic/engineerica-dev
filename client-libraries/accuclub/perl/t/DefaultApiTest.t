=begin comment

AccuCampus OpenAPI 3 Documentation

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('WWW::OpenAPIClient::DefaultApi');

my $api = WWW::OpenAPIClient::DefaultApi->new();
isa_ok($api, 'WWW::OpenAPIClient::DefaultApi');

#
# actionloglist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $user = undef; # replace NULL with a proper value
    my $startdate = undef; # replace NULL with a proper value
    my $enddate = undef; # replace NULL with a proper value
    my $resource = undef; # replace NULL with a proper value
    my $actionfilter = undef; # replace NULL with a proper value
    my $argument = undef; # replace NULL with a proper value
    my $result = $api->actionloglist(token => $token, from => $from, count => $count, user => $user, startdate => $startdate, enddate => $enddate, resource => $resource, actionfilter => $actionfilter, argument => $argument);
}

#
# advroleaddmissing test
#
{
    my $token = undef; # replace NULL with a proper value
    my $roles = undef; # replace NULL with a proper value
    my $permissions = undef; # replace NULL with a proper value
    my $result = $api->advroleaddmissing(token => $token, roles => $roles, permissions => $permissions);
}

#
# advrolecheckperm test
#
{
    my $token = undef; # replace NULL with a proper value
    my $roles = undef; # replace NULL with a proper value
    my $permissions = undef; # replace NULL with a proper value
    my $result = $api->advrolecheckperm(token => $token, roles => $roles, permissions => $permissions);
}

#
# advroledelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->advroledelete(token => $token, id => $id);
}

#
# advroledeletemapping test
#
{
    my $token = undef; # replace NULL with a proper value
    my $map = undef; # replace NULL with a proper value
    my $roleid = undef; # replace NULL with a proper value
    my $result = $api->advroledeletemapping(token => $token, map => $map, roleid => $roleid);
}

#
# advroleget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->advroleget(token => $token, id => $id);
}

#
# advrolelist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $includepolicies = undef; # replace NULL with a proper value
    my $includeinternal = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $result = $api->advrolelist(token => $token, includepolicies => $includepolicies, includeinternal => $includeinternal, name => $name);
}

#
# advrolelistmaps test
#
{
    my $token = undef; # replace NULL with a proper value
    my $roleid = undef; # replace NULL with a proper value
    my $result = $api->advrolelistmaps(token => $token, roleid => $roleid);
}

#
# advrolelistrolesmapped test
#
{
    my $token = undef; # replace NULL with a proper value
    my $map = undef; # replace NULL with a proper value
    my $result = $api->advrolelistrolesmapped(token => $token, map => $map);
}

#
# advrolelisttemplates test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->advrolelisttemplates(token => $token);
}

#
# advrolesave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->advrolesave(unknown_base_type => $unknown_base_type);
}

#
# advrolesavemapping test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->advrolesavemapping(unknown_base_type => $unknown_base_type);
}

#
# advrolesuserlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $roleid = undef; # replace NULL with a proper value
    my $onlywithoutcard = undef; # replace NULL with a proper value
    my $photosize = undef; # replace NULL with a proper value
    my $result = $api->advrolesuserlist(token => $token, from => $from, count => $count, roleid => $roleid, onlywithoutcard => $onlywithoutcard, photosize => $photosize);
}

#
# advroleuserupgrade test
#
{
    my $token = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $roleid = undef; # replace NULL with a proper value
    my $result = $api->advroleuserupgrade(token => $token, userid => $userid, roleid => $roleid);
}

#
# appsharegetphone test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->appsharegetphone(token => $token);
}

#
# appsharesendtext test
#
{
    my $token = undef; # replace NULL with a proper value
    my $phonenumber = undef; # replace NULL with a proper value
    my $result = $api->appsharesendtext(token => $token, phonenumber => $phonenumber);
}

#
# attendancelogcommentdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->attendancelogcommentdelete(token => $token, id => $id);
}

#
# attendancelogcommentget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->attendancelogcommentget(token => $token, id => $id);
}

#
# attendancelogcommentlist test
#
{
    my $attendancelog = undef; # replace NULL with a proper value
    my $token = undef; # replace NULL with a proper value
    my $result = $api->attendancelogcommentlist(attendancelog => $attendancelog, token => $token);
}

#
# attendancelogcommentsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->attendancelogcommentsave(unknown_base_type => $unknown_base_type);
}

#
# attendancelogdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->attendancelogdelete(token => $token, id => $id);
}

#
# attendancelogget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->attendancelogget(token => $token, id => $id);
}

#
# attendanceloggetchangehistory test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->attendanceloggetchangehistory(token => $token, id => $id);
}

#
# attendanceloglist test
#
{
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $token = undef; # replace NULL with a proper value
    my $filter = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $result = $api->attendanceloglist(from => $from, count => $count, token => $token, filter => $filter, userid => $userid);
}

#
# attendanceloglistmine test
#
{
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $token = undef; # replace NULL with a proper value
    my $filter = undef; # replace NULL with a proper value
    my $result = $api->attendanceloglistmine(from => $from, count => $count, token => $token, filter => $filter);
}

#
# attendancelogsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->attendancelogsave(unknown_base_type => $unknown_base_type);
}

#
# attendancelogsignout test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $location = undef; # replace NULL with a proper value
    my $event = undef; # replace NULL with a proper value
    my $datetime = undef; # replace NULL with a proper value
    my $result = $api->attendancelogsignout(token => $token, id => $id, location => $location, event => $event, datetime => $datetime);
}

#
# attendancelogwhosin test
#
{
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $token = undef; # replace NULL with a proper value
    my $location = undef; # replace NULL with a proper value
    my $event = undef; # replace NULL with a proper value
    my $sorting = undef; # replace NULL with a proper value
    my $roles = undef; # replace NULL with a proper value
    my $photosize = undef; # replace NULL with a proper value
    my $extensions = undef; # replace NULL with a proper value
    my $export = undef; # replace NULL with a proper value
    my $result = $api->attendancelogwhosin(from => $from, count => $count, token => $token, location => $location, event => $event, sorting => $sorting, roles => $roles, photosize => $photosize, extensions => $extensions, export => $export);
}

#
# bgjobgetstatus test
#
{
    my $token = undef; # replace NULL with a proper value
    my $jobid = undef; # replace NULL with a proper value
    my $jobtype = undef; # replace NULL with a proper value
    my $result = $api->bgjobgetstatus(token => $token, jobid => $jobid, jobtype => $jobtype);
}

#
# captchagetchallenge test
#
{
    my $result = $api->captchagetchallenge();
}

#
# captchagetimage test
#
{
    my $captchatoken = undef; # replace NULL with a proper value
    my $result = $api->captchagetimage(captchatoken => $captchatoken);
}

#
# changelog test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->changelog(token => $token);
}

#
# clientget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $client = undef; # replace NULL with a proper value
    my $clientname = undef; # replace NULL with a proper value
    my $result = $api->clientget(token => $token, client => $client, clientname => $clientname);
}

#
# clientlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->clientlist(token => $token, from => $from, count => $count);
}

#
# clientsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->clientsave(unknown_base_type => $unknown_base_type);
}

#
# clientsendmessage test
#
{
    my $token = undef; # replace NULL with a proper value
    my $uniqueclientid = undef; # replace NULL with a proper value
    my $message = undef; # replace NULL with a proper value
    my $result = $api->clientsendmessage(token => $token, uniqueclientid => $uniqueclientid, message => $message);
}

#
# creditdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->creditdelete(token => $token, id => $id);
}

#
# creditdiscountmethods test
#
{
    my $result = $api->creditdiscountmethods();
}

#
# creditget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->creditget(token => $token, id => $id);
}

#
# creditgetuserbalance test
#
{
    my $token = undef; # replace NULL with a proper value
    my $user = undef; # replace NULL with a proper value
    my $result = $api->creditgetuserbalance(token => $token, user => $user);
}

#
# creditlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $user = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->creditlist(token => $token, user => $user, from => $from, count => $count);
}

#
# creditlistdetails test
#
{
    my $token = undef; # replace NULL with a proper value
    my $credit = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->creditlistdetails(token => $token, credit => $credit, from => $from, count => $count);
}

#
# creditlistmine test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->creditlistmine(token => $token, from => $from, count => $count);
}

#
# creditplandelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->creditplandelete(token => $token, id => $id);
}

#
# creditplanget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->creditplanget(token => $token, id => $id);
}

#
# creditplanlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->creditplanlist(token => $token, from => $from, count => $count);
}

#
# creditplansave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->creditplansave(unknown_base_type => $unknown_base_type);
}

#
# creditsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->creditsave(unknown_base_type => $unknown_base_type);
}

#
# creditsavedetails test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->creditsavedetails(unknown_base_type => $unknown_base_type);
}

#
# doc test
#
{
    my $excludeanonymous = undef; # replace NULL with a proper value
    my $result = $api->doc(excludeanonymous => $excludeanonymous);
}

#
# easyloginaddbgimage test
#
{
    my $token = undef; # replace NULL with a proper value
    my $upload = undef; # replace NULL with a proper value
    my $filename = undef; # replace NULL with a proper value
    my $result = $api->easyloginaddbgimage(token => $token, upload => $upload, filename => $filename);
}

#
# eventdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->eventdelete(token => $token, id => $id);
}

#
# eventget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->eventget(token => $token, id => $id);
}

#
# eventgetsessionsbydate test
#
{
    my $token = undef; # replace NULL with a proper value
    my $location = undef; # replace NULL with a proper value
    my $date = undef; # replace NULL with a proper value
    my $type = undef; # replace NULL with a proper value
    my $result = $api->eventgetsessionsbydate(token => $token, location => $location, date => $date, type => $type);
}

#
# eventlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $summaryonly = undef; # replace NULL with a proper value
    my $termid = undef; # replace NULL with a proper value
    my $result = $api->eventlist(token => $token, from => $from, count => $count, summaryonly => $summaryonly, termid => $termid);
}

#
# eventsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->eventsave(unknown_base_type => $unknown_base_type);
}

#
# eventsearchgroup test
#
{
    my $token = undef; # replace NULL with a proper value
    my $query = undef; # replace NULL with a proper value
    my $result = $api->eventsearchgroup(token => $token, query => $query);
}

#
# export test
#
{
    my $token = undef; # replace NULL with a proper value
    my $exporttype = undef; # replace NULL with a proper value
    my $exportformat = undef; # replace NULL with a proper value
    my $filters = undef; # replace NULL with a proper value
    my $result = $api->export(token => $token, exporttype => $exporttype, exportformat => $exportformat, filters => $filters);
}

#
# exportlisttypes test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->exportlisttypes(token => $token);
}

#
# featurelist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->featurelist(token => $token);
}

#
# holidaylist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $term = undef; # replace NULL with a proper value
    my $result = $api->holidaylist(token => $token, term => $term);
}

#
# holidaysave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->holidaysave(unknown_base_type => $unknown_base_type);
}

#
# holidaysuggest test
#
{
    my $token = undef; # replace NULL with a proper value
    my $term = undef; # replace NULL with a proper value
    my $result = $api->holidaysuggest(token => $token, term => $term);
}

#
# import test
#
{
    my $token = undef; # replace NULL with a proper value
    my $importtype = undef; # replace NULL with a proper value
    my $upload = undef; # replace NULL with a proper value
    my $filename = undef; # replace NULL with a proper value
    my $parameters = undef; # replace NULL with a proper value
    my $result = $api->import(token => $token, importtype => $importtype, upload => $upload, filename => $filename, parameters => $parameters);
}

#
# importlisttypes test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->importlisttypes(token => $token);
}

#
# licenseacceptagreement test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->licenseacceptagreement(token => $token);
}

#
# licensegetagreementstatus test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->licensegetagreementstatus(token => $token);
}

#
# licensegetcurrent test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->licensegetcurrent(token => $token);
}

#
# licenserenew test
#
{
    my $token = undef; # replace NULL with a proper value
    my $email = undef; # replace NULL with a proper value
    my $phonenumber = undef; # replace NULL with a proper value
    my $jobtitle = undef; # replace NULL with a proper value
    my $institution = undef; # replace NULL with a proper value
    my $comments = undef; # replace NULL with a proper value
    my $result = $api->licenserenew(token => $token, email => $email, phonenumber => $phonenumber, jobtitle => $jobtitle, institution => $institution, comments => $comments);
}

#
# listtimezones test
#
{
    my $result = $api->listtimezones();
}

#
# locationdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->locationdelete(token => $token, id => $id);
}

#
# locationget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->locationget(token => $token, id => $id);
}

#
# locationlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $locations = undef; # replace NULL with a proper value
    my $sortbygroup = undef; # replace NULL with a proper value
    my $result = $api->locationlist(token => $token, from => $from, count => $count, locations => $locations, sortbygroup => $sortbygroup);
}

#
# locationsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->locationsave(unknown_base_type => $unknown_base_type);
}

#
# login test
#
{
    my $domain = undef; # replace NULL with a proper value
    my $username = undef; # replace NULL with a proper value
    my $password = undef; # replace NULL with a proper value
    my $method = undef; # replace NULL with a proper value
    my $rememberme = undef; # replace NULL with a proper value
    my $result = $api->login(domain => $domain, username => $username, password => $password, method => $method, rememberme => $rememberme);
}

#
# logout test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->logout(token => $token);
}

#
# memorizedreportdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->memorizedreportdelete(token => $token, id => $id);
}

#
# memorizedreportget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->memorizedreportget(token => $token, id => $id);
}

#
# memorizedreportlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $customname = undef; # replace NULL with a proper value
    my $result = $api->memorizedreportlist(token => $token, from => $from, count => $count, customname => $customname);
}

#
# memorizedreportsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->memorizedreportsave(unknown_base_type => $unknown_base_type);
}

#
# menugetitems test
#
{
    my $menuid = undef; # replace NULL with a proper value
    my $result = $api->menugetitems(menuid => $menuid);
}

#
# myaccount test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->myaccount(token => $token);
}

#
# myianatimezone test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->myianatimezone(token => $token);
}

#
# myprofile test
#
{
    my $token = undef; # replace NULL with a proper value
    my $photosize = undef; # replace NULL with a proper value
    my $result = $api->myprofile(token => $token, photosize => $photosize);
}

#
# myrights test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->myrights(token => $token);
}

#
# mysaveprofile test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->mysaveprofile(unknown_base_type => $unknown_base_type);
}

#
# notificationdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->notificationdelete(token => $token, id => $id);
}

#
# notificationget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->notificationget(token => $token, id => $id);
}

#
# notificationgetforstation test
#
{
    my $station = undef; # replace NULL with a proper value
    my $user = undef; # replace NULL with a proper value
    my $result = $api->notificationgetforstation(station => $station, user => $user);
}

#
# notificationgetunreadcount test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->notificationgetunreadcount(token => $token);
}

#
# notificationlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $recipient = undef; # replace NULL with a proper value
    my $status = undef; # replace NULL with a proper value
    my $startdate = undef; # replace NULL with a proper value
    my $enddate = undef; # replace NULL with a proper value
    my $sentonscreen = undef; # replace NULL with a proper value
    my $sentemail = undef; # replace NULL with a proper value
    my $sentsms = undef; # replace NULL with a proper value
    my $result = $api->notificationlist(token => $token, from => $from, count => $count, recipient => $recipient, status => $status, startdate => $startdate, enddate => $enddate, sentonscreen => $sentonscreen, sentemail => $sentemail, sentsms => $sentsms);
}

#
# notificationlistmine test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $status = undef; # replace NULL with a proper value
    my $startdate = undef; # replace NULL with a proper value
    my $enddate = undef; # replace NULL with a proper value
    my $result = $api->notificationlistmine(token => $token, from => $from, count => $count, status => $status, startdate => $startdate, enddate => $enddate);
}

#
# notificationmarkasread test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $status = undef; # replace NULL with a proper value
    my $startdate = undef; # replace NULL with a proper value
    my $enddate = undef; # replace NULL with a proper value
    my $result = $api->notificationmarkasread(token => $token, id => $id, status => $status, startdate => $startdate, enddate => $enddate);
}

#
# notificationmarkasunread test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $status = undef; # replace NULL with a proper value
    my $startdate = undef; # replace NULL with a proper value
    my $enddate = undef; # replace NULL with a proper value
    my $result = $api->notificationmarkasunread(token => $token, id => $id, status => $status, startdate => $startdate, enddate => $enddate);
}

#
# notificationsend test
#
{
    my $token = undef; # replace NULL with a proper value
    my $emailenabled = undef; # replace NULL with a proper value
    my $onscreenenabled = undef; # replace NULL with a proper value
    my $smsenabled = undef; # replace NULL with a proper value
    my $title = undef; # replace NULL with a proper value
    my $tousers = undef; # replace NULL with a proper value
    my $togroups = undef; # replace NULL with a proper value
    my $onscreenbody = undef; # replace NULL with a proper value
    my $onscreenclick = undef; # replace NULL with a proper value
    my $onscreenurl = undef; # replace NULL with a proper value
    my $onscreenclass = undef; # replace NULL with a proper value
    my $onscreenduration = undef; # replace NULL with a proper value
    my $showonstation = undef; # replace NULL with a proper value
    my $emailfromname = undef; # replace NULL with a proper value
    my $emailfrom = undef; # replace NULL with a proper value
    my $emailsubject = undef; # replace NULL with a proper value
    my $emailbody = undef; # replace NULL with a proper value
    my $textmessagebody = undef; # replace NULL with a proper value
    my $result = $api->notificationsend(token => $token, emailenabled => $emailenabled, onscreenenabled => $onscreenenabled, smsenabled => $smsenabled, title => $title, tousers => $tousers, togroups => $togroups, onscreenbody => $onscreenbody, onscreenclick => $onscreenclick, onscreenurl => $onscreenurl, onscreenclass => $onscreenclass, onscreenduration => $onscreenduration, showonstation => $showonstation, emailfromname => $emailfromname, emailfrom => $emailfrom, emailsubject => $emailsubject, emailbody => $emailbody, textmessagebody => $textmessagebody);
}

#
# notificationsendonscreen test
#
{
    my $token = undef; # replace NULL with a proper value
    my $notification = undef; # replace NULL with a proper value
    my $result = $api->notificationsendonscreen(token => $token, notification => $notification);
}

#
# notificationtopicdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->notificationtopicdelete(token => $token, id => $id);
}

#
# notificationtopicget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->notificationtopicget(token => $token, id => $id);
}

#
# notificationtopiclist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->notificationtopiclist(token => $token, from => $from, count => $count);
}

#
# notificationtopiclistsubscribe test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->notificationtopiclistsubscribe(token => $token);
}

#
# notificationtopicsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->notificationtopicsave(unknown_base_type => $unknown_base_type);
}

#
# pushderegister test
#
{
    my $devicetoken = undef; # replace NULL with a proper value
    my $platform = undef; # replace NULL with a proper value
    my $result = $api->pushderegister(devicetoken => $devicetoken, platform => $platform);
}

#
# pushregister test
#
{
    my $devicetoken = undef; # replace NULL with a proper value
    my $platform = undef; # replace NULL with a proper value
    my $result = $api->pushregister(devicetoken => $devicetoken, platform => $platform);
}

#
# qrlabelsprint test
#
{
    my $token = undef; # replace NULL with a proper value
    my $user = undef; # replace NULL with a proper value
    my $group = undef; # replace NULL with a proper value
    my $result = $api->qrlabelsprint(token => $token, user => $user, group => $group);
}

#
# qrloginget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->qrloginget(token => $token);
}

#
# qrloginlogin test
#
{
    my $onetimetoken = undef; # replace NULL with a proper value
    my $result = $api->qrloginlogin(onetimetoken => $onetimetoken);
}

#
# quickpaneldeletewidget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->quickpaneldeletewidget(token => $token, id => $id);
}

#
# quickpanelfetchwidget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $widgetid = undef; # replace NULL with a proper value
    my $result = $api->quickpanelfetchwidget(token => $token, widgetid => $widgetid);
}

#
# quickpanelgetwidget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->quickpanelgetwidget(token => $token, id => $id);
}

#
# quickpanelinit test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->quickpanelinit(token => $token);
}

#
# quickpanellistwidgets test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->quickpanellistwidgets(token => $token);
}

#
# quickpanellistwidgettypes test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->quickpanellistwidgettypes(token => $token);
}

#
# quickpanelreorderwidgets test
#
{
    my $token = undef; # replace NULL with a proper value
    my $sectionname = undef; # replace NULL with a proper value
    my $orderids = undef; # replace NULL with a proper value
    my $result = $api->quickpanelreorderwidgets(token => $token, sectionname => $sectionname, orderids => $orderids);
}

#
# quickpanelsavewidget test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->quickpanelsavewidget(unknown_base_type => $unknown_base_type);
}

#
# reportlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->reportlist(token => $token);
}

#
# reportpermissionsbyuser test
#
{
    my $token = undef; # replace NULL with a proper value
    my $params = undef; # replace NULL with a proper value
    my $result = $api->reportpermissionsbyuser(token => $token, params => $params);
}

#
# reportprepare test
#
{
    my $token = undef; # replace NULL with a proper value
    my $reportname = undef; # replace NULL with a proper value
    my $params = undef; # replace NULL with a proper value
    my $repformat = undef; # replace NULL with a proper value
    my $fillgroupid = undef; # replace NULL with a proper value
    my $groupby = undef; # replace NULL with a proper value
    my $refreshgroup = undef; # replace NULL with a proper value
    my $filtertext = undef; # replace NULL with a proper value
    my $result = $api->reportprepare(token => $token, reportname => $reportname, params => $params, repformat => $repformat, fillgroupid => $fillgroupid, groupby => $groupby, refreshgroup => $refreshgroup, filtertext => $filtertext);
}

#
# reportquery test
#
{
    my $token = undef; # replace NULL with a proper value
    my $reportname = undef; # replace NULL with a proper value
    my $params = undef; # replace NULL with a proper value
    my $result = $api->reportquery(token => $token, reportname => $reportname, params => $params);
}

#
# rolelist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $result = $api->rolelist(token => $token, name => $name);
}

#
# ruledelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->ruledelete(token => $token, id => $id);
}

#
# ruleget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->ruleget(token => $token, id => $id);
}

#
# rulegeteventtype test
#
{
    my $token = undef; # replace NULL with a proper value
    my $event = undef; # replace NULL with a proper value
    my $result = $api->rulegeteventtype(token => $token, event => $event);
}

#
# rulelist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->rulelist(token => $token, from => $from, count => $count);
}

#
# rulelistactions test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->rulelistactions(token => $token);
}

#
# rulelisteventtypes test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->rulelisteventtypes(token => $token);
}

#
# rulelisthttprequests test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $failed = undef; # replace NULL with a proper value
    my $status = undef; # replace NULL with a proper value
    my $result = $api->rulelisthttprequests(token => $token, from => $from, count => $count, failed => $failed, status => $status);
}

#
# rulesave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->rulesave(unknown_base_type => $unknown_base_type);
}

#
# search test
#
{
    my $token = undef; # replace NULL with a proper value
    my $query = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $result = $api->search(token => $token, query => $query, page => $page);
}

#
# searchgetentities test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->searchgetentities(token => $token);
}

#
# securityassesspermission test
#
{
    my $token = undef; # replace NULL with a proper value
    my $commandname = undef; # replace NULL with a proper value
    my $result = $api->securityassesspermission(token => $token, commandname => $commandname);
}

#
# securityassessrole test
#
{
    my $token = undef; # replace NULL with a proper value
    my $roleid = undef; # replace NULL with a proper value
    my $result = $api->securityassessrole(token => $token, roleid => $roleid);
}

#
# securityassessscope test
#
{
    my $token = undef; # replace NULL with a proper value
    my $locationid = undef; # replace NULL with a proper value
    my $result = $api->securityassessscope(token => $token, locationid => $locationid);
}

#
# securityassessuser test
#
{
    my $token = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $result = $api->securityassessuser(token => $token, userid => $userid);
}

#
# sessionregaddcurrentuser test
#
{
    my $token = undef; # replace NULL with a proper value
    my $eventid = undef; # replace NULL with a proper value
    my $sessiondate = undef; # replace NULL with a proper value
    my $result = $api->sessionregaddcurrentuser(token => $token, eventid => $eventid, sessiondate => $sessiondate);
}

#
# sessionregadduser test
#
{
    my $token = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $eventid = undef; # replace NULL with a proper value
    my $sessiondate = undef; # replace NULL with a proper value
    my $result = $api->sessionregadduser(token => $token, userid => $userid, eventid => $eventid, sessiondate => $sessiondate);
}

#
# sessionreggetmysessions test
#
{
    my $token = undef; # replace NULL with a proper value
    my $date = undef; # replace NULL with a proper value
    my $result = $api->sessionreggetmysessions(token => $token, date => $date);
}

#
# sessionreggetsessions test
#
{
    my $token = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $result = $api->sessionreggetsessions(token => $token, userid => $userid);
}

#
# sessionreggetsettings test
#
{
    my $token = undef; # replace NULL with a proper value
    my $locationid = undef; # replace NULL with a proper value
    my $eventid = undef; # replace NULL with a proper value
    my $sessiondate = undef; # replace NULL with a proper value
    my $noinherit = undef; # replace NULL with a proper value
    my $result = $api->sessionreggetsettings(token => $token, locationid => $locationid, eventid => $eventid, sessiondate => $sessiondate, noinherit => $noinherit);
}

#
# sessionreggetusers test
#
{
    my $token = undef; # replace NULL with a proper value
    my $eventid = undef; # replace NULL with a proper value
    my $sessiondate = undef; # replace NULL with a proper value
    my $result = $api->sessionreggetusers(token => $token, eventid => $eventid, sessiondate => $sessiondate);
}

#
# sessionreglistsessions test
#
{
    my $token = undef; # replace NULL with a proper value
    my $eventid = undef; # replace NULL with a proper value
    my $sessiondate = undef; # replace NULL with a proper value
    my $result = $api->sessionreglistsessions(token => $token, eventid => $eventid, sessiondate => $sessiondate);
}

#
# sessionreglistupcoming test
#
{
    my $token = undef; # replace NULL with a proper value
    my $date = undef; # replace NULL with a proper value
    my $result = $api->sessionreglistupcoming(token => $token, date => $date);
}

#
# sessionreglistupcomingevent test
#
{
    my $token = undef; # replace NULL with a proper value
    my $date = undef; # replace NULL with a proper value
    my $event = undef; # replace NULL with a proper value
    my $result = $api->sessionreglistupcomingevent(token => $token, date => $date, event => $event);
}

#
# sessionregremovecurrentuser test
#
{
    my $token = undef; # replace NULL with a proper value
    my $eventid = undef; # replace NULL with a proper value
    my $sessiondate = undef; # replace NULL with a proper value
    my $result = $api->sessionregremovecurrentuser(token => $token, eventid => $eventid, sessiondate => $sessiondate);
}

#
# sessionregremoveuser test
#
{
    my $token = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $eventid = undef; # replace NULL with a proper value
    my $sessiondate = undef; # replace NULL with a proper value
    my $result = $api->sessionregremoveuser(token => $token, userid => $userid, eventid => $eventid, sessiondate => $sessiondate);
}

#
# sessionregsavesettings test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->sessionregsavesettings(unknown_base_type => $unknown_base_type);
}

#
# settingaddlogo test
#
{
    my $token = undef; # replace NULL with a proper value
    my $upload = undef; # replace NULL with a proper value
    my $filename = undef; # replace NULL with a proper value
    my $result = $api->settingaddlogo(token => $token, upload => $upload, filename => $filename);
}

#
# settingget test
#
{
    my $keys = undef; # replace NULL with a proper value
    my $token = undef; # replace NULL with a proper value
    my $domain = undef; # replace NULL with a proper value
    my $scope = undef; # replace NULL with a proper value
    my $result = $api->settingget(keys => $keys, token => $token, domain => $domain, scope => $scope);
}

#
# settingsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->settingsave(unknown_base_type => $unknown_base_type);
}

#
# settingviewgeneral test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->settingviewgeneral(token => $token);
}

#
# ssogeneratekey test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->ssogeneratekey(token => $token);
}

#
# ssogetsettings test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->ssogetsettings(token => $token);
}

#
# ssoissuetoken test
#
{
    my $key = undef; # replace NULL with a proper value
    my $username = undef; # replace NULL with a proper value
    my $expires = undef; # replace NULL with a proper value
    my $result = $api->ssoissuetoken(key => $key, username => $username, expires => $expires);
}

#
# ssosavesettings test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->ssosavesettings(unknown_base_type => $unknown_base_type);
}

#
# stationdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->stationdelete(token => $token, id => $id);
}

#
# stationget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->stationget(token => $token, id => $id);
}

#
# stationgetcurrentterms test
#
{
    my $station = undef; # replace NULL with a proper value
    my $result = $api->stationgetcurrentterms(station => $station);
}

#
# stationgetinfo test
#
{
    my $id = undef; # replace NULL with a proper value
    my $event = undef; # replace NULL with a proper value
    my $result = $api->stationgetinfo(id => $id, event => $event);
}

#
# stationgetlicense test
#
{
    my $station = undef; # replace NULL with a proper value
    my $result = $api->stationgetlicense(station => $station);
}

#
# stationlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->stationlist(token => $token, from => $from, count => $count);
}

#
# stationsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->stationsave(unknown_base_type => $unknown_base_type);
}

#
# stationunlock test
#
{
    my $id = undef; # replace NULL with a proper value
    my $passcode = undef; # replace NULL with a proper value
    my $method = undef; # replace NULL with a proper value
    my $result = $api->stationunlock(id => $id, passcode => $passcode, method => $method);
}

#
# swipedelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->swipedelete(token => $token, id => $id);
}

#
# swipeget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->swipeget(token => $token, id => $id);
}

#
# swipelist test
#
{
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $token = undef; # replace NULL with a proper value
    my $result = $api->swipelist(from => $from, count => $count, token => $token);
}

#
# swipesave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->swipesave(unknown_base_type => $unknown_base_type);
}

#
# swipesaveanonym test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->swipesaveanonym(unknown_base_type => $unknown_base_type);
}

#
# tagdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->tagdelete(token => $token, id => $id);
}

#
# tagget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->tagget(token => $token, id => $id);
}

#
# taglist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $group = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $result = $api->taglist(token => $token, group => $group, from => $from, count => $count);
}

#
# taglistgroups test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->taglistgroups(token => $token);
}

#
# tagsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->tagsave(unknown_base_type => $unknown_base_type);
}

#
# tagsearch test
#
{
    my $token = undef; # replace NULL with a proper value
    my $query = undef; # replace NULL with a proper value
    my $allowcreatingnew = undef; # replace NULL with a proper value
    my $result = $api->tagsearch(token => $token, query => $query, allowcreatingnew => $allowcreatingnew);
}

#
# templateaddimage test
#
{
    my $token = undef; # replace NULL with a proper value
    my $template = undef; # replace NULL with a proper value
    my $upload = undef; # replace NULL with a proper value
    my $filename = undef; # replace NULL with a proper value
    my $result = $api->templateaddimage(token => $token, template => $template, upload => $upload, filename => $filename);
}

#
# templatedelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->templatedelete(token => $token, id => $id);
}

#
# templateemail test
#
{
    my $token = undef; # replace NULL with a proper value
    my $jobid = undef; # replace NULL with a proper value
    my $emailsubject = undef; # replace NULL with a proper value
    my $emailbody = undef; # replace NULL with a proper value
    my $templatekind = undef; # replace NULL with a proper value
    my $emailfrom = undef; # replace NULL with a proper value
    my $emailreplyto = undef; # replace NULL with a proper value
    my $result = $api->templateemail(token => $token, jobid => $jobid, emailsubject => $emailsubject, emailbody => $emailbody, templatekind => $templatekind, emailfrom => $emailfrom, emailreplyto => $emailreplyto);
}

#
# templategenerate test
#
{
    my $token = undef; # replace NULL with a proper value
    my $template = undef; # replace NULL with a proper value
    my $source = undef; # replace NULL with a proper value
    my $singlefile = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $forsending = undef; # replace NULL with a proper value
    my $role = undef; # replace NULL with a proper value
    my $filters = undef; # replace NULL with a proper value
    my $result = $api->templategenerate(token => $token, template => $template, source => $source, singlefile => $singlefile, userid => $userid, forsending => $forsending, role => $role, filters => $filters);
}

#
# templateget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->templateget(token => $token, id => $id);
}

#
# templategetgenerated test
#
{
    my $token = undef; # replace NULL with a proper value
    my $jobid = undef; # replace NULL with a proper value
    my $result = $api->templategetgenerated(token => $token, jobid => $jobid);
}

#
# templatelist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $kind = undef; # replace NULL with a proper value
    my $designedonly = undef; # replace NULL with a proper value
    my $result = $api->templatelist(token => $token, from => $from, count => $count, kind => $kind, designedonly => $designedonly);
}

#
# templatelistsources test
#
{
    my $token = undef; # replace NULL with a proper value
    my $kind = undef; # replace NULL with a proper value
    my $result = $api->templatelistsources(token => $token, kind => $kind);
}

#
# templatesave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->templatesave(unknown_base_type => $unknown_base_type);
}

#
# templatesavelayout test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->templatesavelayout(unknown_base_type => $unknown_base_type);
}

#
# termdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->termdelete(token => $token, id => $id);
}

#
# termget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->termget(token => $token, id => $id);
}

#
# termlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $notpast = undef; # replace NULL with a proper value
    my $result = $api->termlist(token => $token, from => $from, count => $count, notpast => $notpast);
}

#
# termsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->termsave(unknown_base_type => $unknown_base_type);
}

#
# textcreditremaining test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->textcreditremaining(token => $token);
}

#
# texttoimage test
#
{
    my $token = undef; # replace NULL with a proper value
    my $text = undef; # replace NULL with a proper value
    my $fontcolor = undef; # replace NULL with a proper value
    my $fontsize = undef; # replace NULL with a proper value
    my $direction = undef; # replace NULL with a proper value
    my $width = undef; # replace NULL with a proper value
    my $result = $api->texttoimage(token => $token, text => $text, fontcolor => $fontcolor, fontsize => $fontsize, direction => $direction, width => $width);
}

#
# translationget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $universal = undef; # replace NULL with a proper value
    my $result = $api->translationget(token => $token, universal => $universal);
}

#
# translationgetcachefile test
#
{
    my $token = undef; # replace NULL with a proper value
    my $account = undef; # replace NULL with a proper value
    my $result = $api->translationgetcachefile(token => $token, account => $account);
}

#
# translationlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $filter = undef; # replace NULL with a proper value
    my $nondefaultonly = undef; # replace NULL with a proper value
    my $appdefaultasuniversal = undef; # replace NULL with a proper value
    my $result = $api->translationlist(token => $token, filter => $filter, nondefaultonly => $nondefaultonly, appdefaultasuniversal => $appdefaultasuniversal);
}

#
# translationsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->translationsave(unknown_base_type => $unknown_base_type);
}

#
# userchangepwd test
#
{
    my $token = undef; # replace NULL with a proper value
    my $oldpass = undef; # replace NULL with a proper value
    my $newpass = undef; # replace NULL with a proper value
    my $result = $api->userchangepwd(token => $token, oldpass => $oldpass, newpass => $newpass);
}

#
# userchangepwdbyreq test
#
{
    my $changereq = undef; # replace NULL with a proper value
    my $newpass = undef; # replace NULL with a proper value
    my $result = $api->userchangepwdbyreq(changereq => $changereq, newpass => $newpass);
}

#
# userdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->userdelete(token => $token, id => $id);
}

#
# userfindsimilar test
#
{
    my $token = undef; # replace NULL with a proper value
    my $currentid = undef; # replace NULL with a proper value
    my $phonenumber = undef; # replace NULL with a proper value
    my $cardnumber = undef; # replace NULL with a proper value
    my $result = $api->userfindsimilar(token => $token, currentid => $currentid, phonenumber => $phonenumber, cardnumber => $cardnumber);
}

#
# userget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $photosize = undef; # replace NULL with a proper value
    my $result = $api->userget(token => $token, id => $id, photosize => $photosize);
}

#
# usergetbycard test
#
{
    my $token = undef; # replace NULL with a proper value
    my $card = undef; # replace NULL with a proper value
    my $photosize = undef; # replace NULL with a proper value
    my $result = $api->usergetbycard(token => $token, card => $card, photosize => $photosize);
}

#
# usergroupaddmember test
#
{
    my $token = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $groupid = undef; # replace NULL with a proper value
    my $result = $api->usergroupaddmember(token => $token, userid => $userid, groupid => $groupid);
}

#
# usergroupdelete test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->usergroupdelete(token => $token, id => $id);
}

#
# usergroupget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->usergroupget(token => $token, id => $id);
}

#
# usergroupgetmembers test
#
{
    my $token = undef; # replace NULL with a proper value
    my $groupid = undef; # replace NULL with a proper value
    my $result = $api->usergroupgetmembers(token => $token, groupid => $groupid);
}

#
# usergroupgetuser test
#
{
    my $token = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $result = $api->usergroupgetuser(token => $token, userid => $userid);
}

#
# usergrouplist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $type = undef; # replace NULL with a proper value
    my $result = $api->usergrouplist(token => $token, from => $from, count => $count, type => $type);
}

#
# usergrouprefresh test
#
{
    my $token = undef; # replace NULL with a proper value
    my $group = undef; # replace NULL with a proper value
    my $result = $api->usergrouprefresh(token => $token, group => $group);
}

#
# usergroupremovemember test
#
{
    my $token = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $groupid = undef; # replace NULL with a proper value
    my $result = $api->usergroupremovemember(token => $token, userid => $userid, groupid => $groupid);
}

#
# usergroupsave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->usergroupsave(unknown_base_type => $unknown_base_type);
}

#
# userlist test
#
{
    my $token = undef; # replace NULL with a proper value
    my $from = undef; # replace NULL with a proper value
    my $count = undef; # replace NULL with a proper value
    my $roleid = undef; # replace NULL with a proper value
    my $onlywithoutcard = undef; # replace NULL with a proper value
    my $photosize = undef; # replace NULL with a proper value
    my $result = $api->userlist(token => $token, from => $from, count => $count, roleid => $roleid, onlywithoutcard => $onlywithoutcard, photosize => $photosize);
}

#
# userloadphoto test
#
{
    my $token = undef; # replace NULL with a proper value
    my $upload = undef; # replace NULL with a proper value
    my $filename = undef; # replace NULL with a proper value
    my $userid = undef; # replace NULL with a proper value
    my $automatch = undef; # replace NULL with a proper value
    my $result = $api->userloadphoto(token => $token, upload => $upload, filename => $filename, userid => $userid, automatch => $automatch);
}

#
# usermovedata test
#
{
    my $token = undef; # replace NULL with a proper value
    my $source = undef; # replace NULL with a proper value
    my $destination = undef; # replace NULL with a proper value
    my $result = $api->usermovedata(token => $token, source => $source, destination => $destination);
}

#
# userrequestpwdchange test
#
{
    my $domain = undef; # replace NULL with a proper value
    my $email = undef; # replace NULL with a proper value
    my $result = $api->userrequestpwdchange(domain => $domain, email => $email);
}

#
# usersave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->usersave(unknown_base_type => $unknown_base_type);
}

#
# usersavepwdchange test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->usersavepwdchange(unknown_base_type => $unknown_base_type);
}

#
# usersettingsget test
#
{
    my $token = undef; # replace NULL with a proper value
    my $keys = undef; # replace NULL with a proper value
    my $user = undef; # replace NULL with a proper value
    my $result = $api->usersettingsget(token => $token, keys => $keys, user => $user);
}

#
# usersettingsgetmultiple test
#
{
    my $token = undef; # replace NULL with a proper value
    my $keys = undef; # replace NULL with a proper value
    my $user = undef; # replace NULL with a proper value
    my $result = $api->usersettingsgetmultiple(token => $token, keys => $keys, user => $user);
}

#
# usersettingssave test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->usersettingssave(unknown_base_type => $unknown_base_type);
}

#
# usersettingssavemultiple test
#
{
    my $unknown_base_type = undef; # replace NULL with a proper value
    my $result = $api->usersettingssavemultiple(unknown_base_type => $unknown_base_type);
}

#
# version test
#
{
    my $token = undef; # replace NULL with a proper value
    my $result = $api->version(token => $token);
}


1;
