=begin comment

AccuClub OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::UserApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# user_changepwd
#
# Change user's own password
# 
# @param string $oldpass The old password of the authenticated user. (required)
# @param string $newpass The new password of the authenticated user. (required)
{
    my $params = {
    'oldpass' => {
        data_type => 'string',
        description => 'The old password of the authenticated user.',
        required => '1',
    },
    'newpass' => {
        data_type => 'string',
        description => 'The new password of the authenticated user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_changepwd' } = { 
        summary => 'Change user&#39;s own password',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_changepwd {
    my ($self, %args) = @_;

    # verify the required parameter 'oldpass' is set
    unless (exists $args{'oldpass'}) {
      croak("Missing the required parameter 'oldpass' when calling user_changepwd");
    }

    # verify the required parameter 'newpass' is set
    unless (exists $args{'newpass'}) {
      croak("Missing the required parameter 'newpass' when calling user_changepwd");
    }

    # parse inputs
    my $_resource_path = '/user/changepwd';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'oldpass'}) {
        $query_params->{'oldpass'} = $self->{api_client}->to_query_value($args{'oldpass'});
    }

    # query params
    if ( exists $args{'newpass'}) {
        $query_params->{'newpass'} = $self->{api_client}->to_query_value($args{'newpass'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_changepwdbyreq
#
# Changes the user password using a change password request id
# 
# @param string $changereq The change password request ID sent by email to the user. (required)
# @param string $newpass The new password of the user. (required)
{
    my $params = {
    'changereq' => {
        data_type => 'string',
        description => 'The change password request ID sent by email to the user.',
        required => '1',
    },
    'newpass' => {
        data_type => 'string',
        description => 'The new password of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_changepwdbyreq' } = { 
        summary => 'Changes the user password using a change password request id',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_changepwdbyreq {
    my ($self, %args) = @_;

    # verify the required parameter 'changereq' is set
    unless (exists $args{'changereq'}) {
      croak("Missing the required parameter 'changereq' when calling user_changepwdbyreq");
    }

    # verify the required parameter 'newpass' is set
    unless (exists $args{'newpass'}) {
      croak("Missing the required parameter 'newpass' when calling user_changepwdbyreq");
    }

    # parse inputs
    my $_resource_path = '/user/changepwdbyreq';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'changereq'}) {
        $query_params->{'changereq'} = $self->{api_client}->to_query_value($args{'changereq'});
    }

    # query params
    if ( exists $args{'newpass'}) {
        $query_params->{'newpass'} = $self->{api_client}->to_query_value($args{'newpass'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_delete
#
# Delete a user
# 
# @param string $id The id of the user to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the user to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_delete' } = { 
        summary => 'Delete a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling user_delete");
    }

    # parse inputs
    my $_resource_path = '/user/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_findsimilar
#
# Finds similar users to prevent duplicates
# 
# @param string $currentid The id of the current user. (optional)
# @param string $phonenumber A phone number to search for similar users. (optional)
# @param string $cardnumber A card number to search for similar users. (optional)
{
    my $params = {
    'currentid' => {
        data_type => 'string',
        description => 'The id of the current user.',
        required => '0',
    },
    'phonenumber' => {
        data_type => 'string',
        description => 'A phone number to search for similar users.',
        required => '0',
    },
    'cardnumber' => {
        data_type => 'string',
        description => 'A card number to search for similar users.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_findsimilar' } = { 
        summary => 'Finds similar users to prevent duplicates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_findsimilar {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/user/findsimilar';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'currentid'}) {
        $query_params->{'currentid'} = $self->{api_client}->to_query_value($args{'currentid'});
    }

    # query params
    if ( exists $args{'phonenumber'}) {
        $query_params->{'phonenumber'} = $self->{api_client}->to_query_value($args{'phonenumber'});
    }

    # query params
    if ( exists $args{'cardnumber'}) {
        $query_params->{'cardnumber'} = $self->{api_client}->to_query_value($args{'cardnumber'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_get
#
# Search and view details of a user
# 
# @param string $id The id of the user to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the user to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_get' } = { 
        summary => 'Search and view details of a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling user_get");
    }

    # parse inputs
    my $_resource_path = '/user/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_getbycard
#
# Search user by card number
# 
# @param string $card The card number of the user to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'card' => {
        data_type => 'string',
        description => 'The card number of the user to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_getbycard' } = { 
        summary => 'Search user by card number',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_getbycard {
    my ($self, %args) = @_;

    # verify the required parameter 'card' is set
    unless (exists $args{'card'}) {
      croak("Missing the required parameter 'card' when calling user_getbycard");
    }

    # parse inputs
    my $_resource_path = '/user/getbycard';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'card'}) {
        $query_params->{'card'} = $self->{api_client}->to_query_value($args{'card'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_list
#
# View a list of users
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $roleid The id of the role to filter users by, or empty to return all users. (optional)
# @param string $onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role to filter users by, or empty to return all users.',
        required => '0',
    },
    'onlywithoutcard' => {
        data_type => 'string',
        description => 'If is 1 then only the users without a card are returned, otherwise all users are returned.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_list' } = { 
        summary => 'View a list of users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_list {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling user_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling user_list");
    }

    # parse inputs
    my $_resource_path = '/user/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    # query params
    if ( exists $args{'onlywithoutcard'}) {
        $query_params->{'onlywithoutcard'} = $self->{api_client}->to_query_value($args{'onlywithoutcard'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_loadphoto
#
# Upload a photo for a specific user
# 
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
# @param string $userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
# @param boolean $automatch Set this to true to find the specific user based on the file name.  (optional)
{
    my $params = {
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.',
        required => '0',
    },
    'automatch' => {
        data_type => 'boolean',
        description => 'Set this to true to find the specific user based on the file name. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_loadphoto' } = { 
        summary => 'Upload a photo for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_loadphoto {
    my ($self, %args) = @_;

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling user_loadphoto");
    }

    # parse inputs
    my $_resource_path = '/user/loadphoto';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'automatch'}) {
        $query_params->{'automatch'} = $self->{api_client}->to_query_value($args{'automatch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_movedata
#
# Move data between users
# 
# @param string $source The id of the user that is the source of the data. (required)
# @param string $destination The id of the user that is the destination of the data. (required)
{
    my $params = {
    'source' => {
        data_type => 'string',
        description => 'The id of the user that is the source of the data.',
        required => '1',
    },
    'destination' => {
        data_type => 'string',
        description => 'The id of the user that is the destination of the data.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_movedata' } = { 
        summary => 'Move data between users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_movedata {
    my ($self, %args) = @_;

    # verify the required parameter 'source' is set
    unless (exists $args{'source'}) {
      croak("Missing the required parameter 'source' when calling user_movedata");
    }

    # verify the required parameter 'destination' is set
    unless (exists $args{'destination'}) {
      croak("Missing the required parameter 'destination' when calling user_movedata");
    }

    # parse inputs
    my $_resource_path = '/user/movedata';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'destination'}) {
        $query_params->{'destination'} = $self->{api_client}->to_query_value($args{'destination'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_requestpwdchange
#
# Requests a password change
# 
# @param string $domain The domain of the account where the user exists. (required)
# @param string $email The email of the user. (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'The domain of the account where the user exists.',
        required => '1',
    },
    'email' => {
        data_type => 'string',
        description => 'The email of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_requestpwdchange' } = { 
        summary => 'Requests a password change',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_requestpwdchange {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling user_requestpwdchange");
    }

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling user_requestpwdchange");
    }

    # parse inputs
    my $_resource_path = '/user/requestpwdchange';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'email'}) {
        $query_params->{'email'} = $self->{api_client}->to_query_value($args{'email'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_save
#
# Create or edit a user
# 
# @param string $id The id of the user to save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the user to save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_save' } = { 
        summary => 'Create or edit a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling user_save");
    }

    # parse inputs
    my $_resource_path = '/user/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_savepwdchange
#
# Send email to the specified user(s) to set/change their passwords
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_savepwdchange' } = { 
        summary => 'Send email to the specified user(s) to set/change their passwords',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_savepwdchange {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/user/savepwdchange';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
