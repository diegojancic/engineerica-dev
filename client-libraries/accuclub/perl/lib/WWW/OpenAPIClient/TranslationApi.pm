=begin comment

AccuClub OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::TranslationApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# translation_get
#
# Gets the translations of the specified values
# 
# @param string $universal Pipe separated list of universal text to be translated. (required)
{
    my $params = {
    'universal' => {
        data_type => 'string',
        description => 'Pipe separated list of universal text to be translated.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'translation_get' } = { 
        summary => 'Gets the translations of the specified values',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translation_get {
    my ($self, %args) = @_;

    # verify the required parameter 'universal' is set
    unless (exists $args{'universal'}) {
      croak("Missing the required parameter 'universal' when calling translation_get");
    }

    # parse inputs
    my $_resource_path = '/translation/get';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'universal'}) {
        $query_params->{'universal'} = $self->{api_client}->to_query_value($args{'universal'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translation_getcachefile
#
# Get the file containing the translations
# 
# @param string $account The id of the account whose translations file has to be retrieved. (optional)
{
    my $params = {
    'account' => {
        data_type => 'string',
        description => 'The id of the account whose translations file has to be retrieved.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translation_getcachefile' } = { 
        summary => 'Get the file containing the translations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translation_getcachefile {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/translation/getcachefile';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'account'}) {
        $query_params->{'account'} = $self->{api_client}->to_query_value($args{'account'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translation_list
#
# Lists all the available translations in the system
# 
# @param string $filter Text to search/filter translations. (optional)
# @param boolean $nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all. (optional)
# @param boolean $appdefaultasuniversal If true then it uses the app default translation as the universal term. (optional)
{
    my $params = {
    'filter' => {
        data_type => 'string',
        description => 'Text to search/filter translations.',
        required => '0',
    },
    'nondefaultonly' => {
        data_type => 'boolean',
        description => 'If true then it returns only the terms translated. Otherwise, it returns all.',
        required => '0',
    },
    'appdefaultasuniversal' => {
        data_type => 'boolean',
        description => 'If true then it uses the app default translation as the universal term.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translation_list' } = { 
        summary => 'Lists all the available translations in the system',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translation_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/translation/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'nondefaultonly'}) {
        $query_params->{'nondefaultonly'} = $self->{api_client}->to_query_value($args{'nondefaultonly'});
    }

    # query params
    if ( exists $args{'appdefaultasuniversal'}) {
        $query_params->{'appdefaultasuniversal'} = $self->{api_client}->to_query_value($args{'appdefaultasuniversal'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translation_save
#
# Edit a translation
# 
# @param string $id The id of the translation as returned by translation.list. (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the translation as returned by translation.list.',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translation_save' } = { 
        summary => 'Edit a translation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translation_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling translation_save");
    }

    # parse inputs
    my $_resource_path = '/translation/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
