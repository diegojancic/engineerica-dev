=begin comment

AccuClub OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::GeneralApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# changelog
#
# Get the application change log
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'changelog' } = { 
        summary => 'Get the application change log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub changelog {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/changelog';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# doc
#
# Get the documentation
# 
# @param boolean $excludeanonymous If true it excludes the anonymous actions from the returned list. (optional)
{
    my $params = {
    'excludeanonymous' => {
        data_type => 'boolean',
        description => 'If true it excludes the anonymous actions from the returned list.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'doc' } = { 
        summary => 'Get the documentation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub doc {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/doc';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'excludeanonymous'}) {
        $query_params->{'excludeanonymous'} = $self->{api_client}->to_query_value($args{'excludeanonymous'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# export
#
# Export AccuClub data
# 
# @param string $exporttype What to export. (required)
# @param string $exportformat The format of the resulting file. Valid types are CSV, HTML, XLS. (required)
# @param string $filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
{
    my $params = {
    'exporttype' => {
        data_type => 'string',
        description => 'What to export.',
        required => '1',
    },
    'exportformat' => {
        data_type => 'string',
        description => 'The format of the resulting file. Valid types are CSV, HTML, XLS.',
        required => '1',
    },
    'filters' => {
        data_type => 'string',
        description => 'Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'export' } = { 
        summary => 'Export AccuClub data',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub export {
    my ($self, %args) = @_;

    # verify the required parameter 'exporttype' is set
    unless (exists $args{'exporttype'}) {
      croak("Missing the required parameter 'exporttype' when calling export");
    }

    # verify the required parameter 'exportformat' is set
    unless (exists $args{'exportformat'}) {
      croak("Missing the required parameter 'exportformat' when calling export");
    }

    # parse inputs
    my $_resource_path = '/export';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'exporttype'}) {
        $query_params->{'exporttype'} = $self->{api_client}->to_query_value($args{'exporttype'});
    }

    # query params
    if ( exists $args{'exportformat'}) {
        $query_params->{'exportformat'} = $self->{api_client}->to_query_value($args{'exportformat'});
    }

    # query params
    if ( exists $args{'filters'}) {
        $query_params->{'filters'} = $self->{api_client}->to_query_value($args{'filters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# import
#
# Import data into AccuClub
# 
# @param string $importtype The kind of data that is being uploaded. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
# @param string $parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}. (optional)
{
    my $params = {
    'importtype' => {
        data_type => 'string',
        description => 'The kind of data that is being uploaded.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    'parameters' => {
        data_type => 'string',
        description => 'Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'import' } = { 
        summary => 'Import data into AccuClub',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub import {
    my ($self, %args) = @_;

    # verify the required parameter 'importtype' is set
    unless (exists $args{'importtype'}) {
      croak("Missing the required parameter 'importtype' when calling import");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling import");
    }

    # parse inputs
    my $_resource_path = '/import';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'importtype'}) {
        $query_params->{'importtype'} = $self->{api_client}->to_query_value($args{'importtype'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    # query params
    if ( exists $args{'parameters'}) {
        $query_params->{'parameters'} = $self->{api_client}->to_query_value($args{'parameters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# listtimezones
#
# Lists the available timezones
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'listtimezones' } = { 
        summary => 'Lists the available timezones',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub listtimezones {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/listtimezones';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# login
#
# Login
# 
# @param string $domain The account domain to login. (required)
# @param string $username The username (email) of the user to login as. (required)
# @param string $password The password of the user to login as. (required)
# @param string $method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
# @param boolean $rememberme If true then the session will not expire. (optional)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'The account domain to login.',
        required => '1',
    },
    'username' => {
        data_type => 'string',
        description => 'The username (email) of the user to login as.',
        required => '1',
    },
    'password' => {
        data_type => 'string',
        description => 'The password of the user to login as.',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.',
        required => '1',
    },
    'rememberme' => {
        data_type => 'boolean',
        description => 'If true then the session will not expire.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'login' } = { 
        summary => 'Login',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub login {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling login");
    }

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling login");
    }

    # verify the required parameter 'password' is set
    unless (exists $args{'password'}) {
      croak("Missing the required parameter 'password' when calling login");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling login");
    }

    # parse inputs
    my $_resource_path = '/login';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'password'}) {
        $query_params->{'password'} = $self->{api_client}->to_query_value($args{'password'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    # query params
    if ( exists $args{'rememberme'}) {
        $query_params->{'rememberme'} = $self->{api_client}->to_query_value($args{'rememberme'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logout
#
# Logout
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'logout' } = { 
        summary => 'Logout',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logout {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/logout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# search
#
# Search
# 
# @param string $query The query to search for. (required)
# @param int $page Current page to show, zero-based. (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The query to search for.',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Current page to show, zero-based.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search' } = { 
        summary => 'Search',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub search {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search");
    }

    # parse inputs
    my $_resource_path = '/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# texttoimage
#
# Generates a dynamic image from text
# 
# @param string $text The text to convert to an image, use double pipes (||) as a new line. (required)
# @param string $fontcolor The color of the text, in hex format, without the #. (optional)
# @param int $fontsize The size of the text, in points. (optional)
# @param string $direction Either vertical or horizontal, default horizontal. (optional)
# @param int $width The image width in pixels (or height if the direction is vertical). (optional)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text to convert to an image, use double pipes (||) as a new line.',
        required => '1',
    },
    'fontcolor' => {
        data_type => 'string',
        description => 'The color of the text, in hex format, without the #.',
        required => '0',
    },
    'fontsize' => {
        data_type => 'int',
        description => 'The size of the text, in points.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Either vertical or horizontal, default horizontal.',
        required => '0',
    },
    'width' => {
        data_type => 'int',
        description => 'The image width in pixels (or height if the direction is vertical).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'texttoimage' } = { 
        summary => 'Generates a dynamic image from text',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub texttoimage {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling texttoimage");
    }

    # parse inputs
    my $_resource_path = '/texttoimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'fontcolor'}) {
        $query_params->{'fontcolor'} = $self->{api_client}->to_query_value($args{'fontcolor'});
    }

    # query params
    if ( exists $args{'fontsize'}) {
        $query_params->{'fontsize'} = $self->{api_client}->to_query_value($args{'fontsize'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'width'}) {
        $query_params->{'width'} = $self->{api_client}->to_query_value($args{'width'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# version
#
# Get current version information
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'version' } = { 
        summary => 'Get current version information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub version {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/version';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
