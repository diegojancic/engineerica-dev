=begin comment

AccuClub OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::UsergroupApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# usergroup_addmember
#
# Add a user to a group
# 
# @param string $userid The id of the user to add. (required)
# @param string $groupid The id of the group. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the group.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_addmember' } = { 
        summary => 'Add a user to a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_addmember {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroup_addmember");
    }

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroup_addmember");
    }

    # parse inputs
    my $_resource_path = '/usergroup/addmember';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroup_delete
#
# Delete a group
# 
# @param string $id The id of the group to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the group to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_delete' } = { 
        summary => 'Delete a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling usergroup_delete");
    }

    # parse inputs
    my $_resource_path = '/usergroup/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroup_get
#
# Search and view details of a user group
# 
# @param string $id The id of the user group to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the user group to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_get' } = { 
        summary => 'Search and view details of a user group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling usergroup_get");
    }

    # parse inputs
    my $_resource_path = '/usergroup/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroup_getmembers
#
# View the members of a user group
# 
# @param string $groupid The id of the user group to get. (required)
{
    my $params = {
    'groupid' => {
        data_type => 'string',
        description => 'The id of the user group to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_getmembers' } = { 
        summary => 'View the members of a user group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_getmembers {
    my ($self, %args) = @_;

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroup_getmembers");
    }

    # parse inputs
    my $_resource_path = '/usergroup/getmembers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroup_getuser
#
# View the groups which a user is registered to
# 
# @param string $userid The id of the user to get his groups. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to get his groups.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_getuser' } = { 
        summary => 'View the groups which a user is registered to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_getuser {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroup_getuser");
    }

    # parse inputs
    my $_resource_path = '/usergroup/getuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroup_list
#
# View a list of user groups
# 
# @param int $from The first record to return. (optional)
# @param int $count The max number of records to return. (optional)
# @param string $type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_list' } = { 
        summary => 'View a list of user groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usergroup/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroup_refresh
#
# Refresh the dynamic group
# 
# @param string $group The ID of the group to refresh. (required)
{
    my $params = {
    'group' => {
        data_type => 'string',
        description => 'The ID of the group to refresh.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_refresh' } = { 
        summary => 'Refresh the dynamic group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_refresh {
    my ($self, %args) = @_;

    # verify the required parameter 'group' is set
    unless (exists $args{'group'}) {
      croak("Missing the required parameter 'group' when calling usergroup_refresh");
    }

    # parse inputs
    my $_resource_path = '/usergroup/refresh';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroup_removemember
#
# Remove a user from a group
# 
# @param string $userid The id of the user to remove. (required)
# @param string $groupid The id of the group. (required)
{
    my $params = {
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the group.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_removemember' } = { 
        summary => 'Remove a user from a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_removemember {
    my ($self, %args) = @_;

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroup_removemember");
    }

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroup_removemember");
    }

    # parse inputs
    my $_resource_path = '/usergroup/removemember';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroup_save
#
# Create or edit a group
# 
# @param string $id The id of the group to save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the group to save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroup_save' } = { 
        summary => 'Create or edit a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroup_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling usergroup_save");
    }

    # parse inputs
    my $_resource_path = '/usergroup/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
