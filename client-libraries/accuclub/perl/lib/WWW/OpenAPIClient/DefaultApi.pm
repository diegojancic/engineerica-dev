=begin comment

AccuCampus OpenAPI 3 Documentation

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# actionloglist
#
# View a list of users action logs
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $user The id of the user whose action logs have to be returned. (optional)
# @param DateTime $startdate The start date of the period to filter the logs. (optional)
# @param DateTime $enddate The end date of the period to filter the logs. (optional)
# @param string $resource The resource to filter the action logs. (optional)
# @param string $actionfilter The action to filter the action logs. (optional)
# @param string $argument The id of the entity that was the argument of the executed action. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The id of the user whose action logs have to be returned.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the logs.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the logs.',
        required => '0',
    },
    'resource' => {
        data_type => 'string',
        description => 'The resource to filter the action logs.',
        required => '0',
    },
    'actionfilter' => {
        data_type => 'string',
        description => 'The action to filter the action logs.',
        required => '0',
    },
    'argument' => {
        data_type => 'string',
        description => 'The id of the entity that was the argument of the executed action.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionloglist' } = { 
        summary => 'View a list of users action logs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionloglist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionloglist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actionloglist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actionloglist");
    }

    # parse inputs
    my $_resource_path = '/actionloglist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    # query params
    if ( exists $args{'resource'}) {
        $query_params->{'resource'} = $self->{api_client}->to_query_value($args{'resource'});
    }

    # query params
    if ( exists $args{'actionfilter'}) {
        $query_params->{'actionfilter'} = $self->{api_client}->to_query_value($args{'actionfilter'});
    }

    # query params
    if ( exists $args{'argument'}) {
        $query_params->{'argument'} = $self->{api_client}->to_query_value($args{'argument'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroleaddmissing
#
# Adds the missing permissions to a role. Requires access to advrole.save
# 
# @param string $token The authentication token. (required)
# @param string $roles CSV list of the role ids to check (required)
# @param string $permissions CSV list of the permissions to check (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'roles' => {
        data_type => 'string',
        description => 'CSV list of the role ids to check',
        required => '1',
    },
    'permissions' => {
        data_type => 'string',
        description => 'CSV list of the permissions to check',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroleaddmissing' } = { 
        summary => 'Adds the missing permissions to a role. Requires access to advrole.save',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroleaddmissing {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroleaddmissing");
    }

    # verify the required parameter 'roles' is set
    unless (exists $args{'roles'}) {
      croak("Missing the required parameter 'roles' when calling advroleaddmissing");
    }

    # verify the required parameter 'permissions' is set
    unless (exists $args{'permissions'}) {
      croak("Missing the required parameter 'permissions' when calling advroleaddmissing");
    }

    # parse inputs
    my $_resource_path = '/advroleaddmissing';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'roles'}) {
        $query_params->{'roles'} = $self->{api_client}->to_query_value($args{'roles'});
    }

    # query params
    if ( exists $args{'permissions'}) {
        $query_params->{'permissions'} = $self->{api_client}->to_query_value($args{'permissions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolecheckperm
#
# Checks the permissions are assigned for the given roles
# 
# @param string $token The authentication token. (required)
# @param string $roles CSV list of the role ids to check (required)
# @param string $permissions CSV list of the permissions to check (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'roles' => {
        data_type => 'string',
        description => 'CSV list of the role ids to check',
        required => '1',
    },
    'permissions' => {
        data_type => 'string',
        description => 'CSV list of the permissions to check',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolecheckperm' } = { 
        summary => 'Checks the permissions are assigned for the given roles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolecheckperm {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolecheckperm");
    }

    # verify the required parameter 'roles' is set
    unless (exists $args{'roles'}) {
      croak("Missing the required parameter 'roles' when calling advrolecheckperm");
    }

    # verify the required parameter 'permissions' is set
    unless (exists $args{'permissions'}) {
      croak("Missing the required parameter 'permissions' when calling advrolecheckperm");
    }

    # parse inputs
    my $_resource_path = '/advrolecheckperm';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'roles'}) {
        $query_params->{'roles'} = $self->{api_client}->to_query_value($args{'roles'});
    }

    # query params
    if ( exists $args{'permissions'}) {
        $query_params->{'permissions'} = $self->{api_client}->to_query_value($args{'permissions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroledelete
#
# Delete a role
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the location to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the location to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroledelete' } = { 
        summary => 'Delete a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroledelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroledelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling advroledelete");
    }

    # parse inputs
    my $_resource_path = '/advroledelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroledeletemapping
#
# Delete a role mapping
# 
# @param string $token The authentication token. (required)
# @param string $map The map name to save the role. (required)
# @param string $roleid The id of the role. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'map' => {
        data_type => 'string',
        description => 'The map name to save the role.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroledeletemapping' } = { 
        summary => 'Delete a role mapping',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroledeletemapping {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroledeletemapping");
    }

    # verify the required parameter 'map' is set
    unless (exists $args{'map'}) {
      croak("Missing the required parameter 'map' when calling advroledeletemapping");
    }

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling advroledeletemapping");
    }

    # parse inputs
    my $_resource_path = '/advroledeletemapping';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'map'}) {
        $query_params->{'map'} = $self->{api_client}->to_query_value($args{'map'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroleget
#
# View details of a role
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the location to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the location to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroleget' } = { 
        summary => 'View details of a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroleget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroleget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling advroleget");
    }

    # parse inputs
    my $_resource_path = '/advroleget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolelist
#
# Lists the roles for the current account
# 
# @param string $token The authentication token. (required)
# @param boolean $includepolicies True to include the policies, defaults to false. (optional)
# @param boolean $includeinternal True to include the internal roles too. (optional)
# @param string $name Filter by name of the role. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'includepolicies' => {
        data_type => 'boolean',
        description => 'True to include the policies, defaults to false.',
        required => '0',
    },
    'includeinternal' => {
        data_type => 'boolean',
        description => 'True to include the internal roles too.',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter by name of the role.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolelist' } = { 
        summary => 'Lists the roles for the current account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolelist");
    }

    # parse inputs
    my $_resource_path = '/advrolelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'includepolicies'}) {
        $query_params->{'includepolicies'} = $self->{api_client}->to_query_value($args{'includepolicies'});
    }

    # query params
    if ( exists $args{'includeinternal'}) {
        $query_params->{'includeinternal'} = $self->{api_client}->to_query_value($args{'includeinternal'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolelistmaps
#
# Lists the maps a roles is mapped to
# 
# @param string $token The authentication token. (required)
# @param string $roleid The id of the role to list the maps. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role to list the maps.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolelistmaps' } = { 
        summary => 'Lists the maps a roles is mapped to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolelistmaps {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolelistmaps");
    }

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling advrolelistmaps");
    }

    # parse inputs
    my $_resource_path = '/advrolelistmaps';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolelistrolesmapped
#
# Lists the roles mappings
# 
# @param string $token The authentication token. (required)
# @param string $map List only the roles in the specified map. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'map' => {
        data_type => 'string',
        description => 'List only the roles in the specified map.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolelistrolesmapped' } = { 
        summary => 'Lists the roles mappings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolelistrolesmapped {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolelistrolesmapped");
    }

    # parse inputs
    my $_resource_path = '/advrolelistrolesmapped';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'map'}) {
        $query_params->{'map'} = $self->{api_client}->to_query_value($args{'map'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolelisttemplates
#
# View a list of role templates
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolelisttemplates' } = { 
        summary => 'View a list of role templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolelisttemplates {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolelisttemplates");
    }

    # parse inputs
    my $_resource_path = '/advrolelisttemplates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolesave
#
# Create or edit a role
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolesave' } = { 
        summary => 'Create or edit a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/advrolesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolesavemapping
#
# Saves a role mapping
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolesavemapping' } = { 
        summary => 'Saves a role mapping',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolesavemapping {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/advrolesavemapping';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolesuserlist
#
# List users. Alias to user.list, use that one instead.
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $roleid The id of the role to filter users by, or empty to return all users. (optional)
# @param string $onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role to filter users by, or empty to return all users.',
        required => '0',
    },
    'onlywithoutcard' => {
        data_type => 'string',
        description => 'If is 1 then only the users without a card are returned, otherwise all users are returned.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolesuserlist' } = { 
        summary => 'List users. Alias to user.list, use that one instead.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolesuserlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolesuserlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling advrolesuserlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling advrolesuserlist");
    }

    # parse inputs
    my $_resource_path = '/advrolesuserlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    # query params
    if ( exists $args{'onlywithoutcard'}) {
        $query_params->{'onlywithoutcard'} = $self->{api_client}->to_query_value($args{'onlywithoutcard'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroleuserupgrade
#
# Upgrade a user to another role (requires permission to edit those roles)
# 
# @param string $token The authentication token. (required)
# @param string $userid Id of the user to upgrade (required)
# @param string $roleid Id of the role to add (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'Id of the user to upgrade',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'Id of the role to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroleuserupgrade' } = { 
        summary => 'Upgrade a user to another role (requires permission to edit those roles)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroleuserupgrade {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroleuserupgrade");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling advroleuserupgrade");
    }

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling advroleuserupgrade");
    }

    # parse inputs
    my $_resource_path = '/advroleuserupgrade';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appsharegetphone
#
# Gets the phone number of the current user
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appsharegetphone' } = { 
        summary => 'Gets the phone number of the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appsharegetphone {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appsharegetphone");
    }

    # parse inputs
    my $_resource_path = '/appsharegetphone';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appsharesendtext
#
# Sends an SMS with the link to the app
# 
# @param string $token The authentication token. (required)
# @param string $phonenumber Phone number to where to send the link. Leave empty to the number on file. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'phonenumber' => {
        data_type => 'string',
        description => 'Phone number to where to send the link. Leave empty to the number on file.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appsharesendtext' } = { 
        summary => 'Sends an SMS with the link to the app',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appsharesendtext {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appsharesendtext");
    }

    # parse inputs
    my $_resource_path = '/appsharesendtext';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'phonenumber'}) {
        $query_params->{'phonenumber'} = $self->{api_client}->to_query_value($args{'phonenumber'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogcommentdelete
#
# Delete a comment on an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log comment to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log comment to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogcommentdelete' } = { 
        summary => 'Delete a comment on an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogcommentdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogcommentdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelogcommentdelete");
    }

    # parse inputs
    my $_resource_path = '/attendancelogcommentdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogcommentget
#
# View a comment on an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the comment to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the comment to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogcommentget' } = { 
        summary => 'View a comment on an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogcommentget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogcommentget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelogcommentget");
    }

    # parse inputs
    my $_resource_path = '/attendancelogcommentget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogcommentlist
#
# View all the comments on a specific attendance log
# 
# @param string $attendancelog The id of the attendance log whose comments have to be retrieved. (required)
# @param string $token The authentication token. (optional)
{
    my $params = {
    'attendancelog' => {
        data_type => 'string',
        description => 'The id of the attendance log whose comments have to be retrieved.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogcommentlist' } = { 
        summary => 'View all the comments on a specific attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogcommentlist {
    my ($self, %args) = @_;

    # verify the required parameter 'attendancelog' is set
    unless (exists $args{'attendancelog'}) {
      croak("Missing the required parameter 'attendancelog' when calling attendancelogcommentlist");
    }

    # parse inputs
    my $_resource_path = '/attendancelogcommentlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'attendancelog'}) {
        $query_params->{'attendancelog'} = $self->{api_client}->to_query_value($args{'attendancelog'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogcommentsave
#
# Save a comment on an attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogcommentsave' } = { 
        summary => 'Save a comment on an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogcommentsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attendancelogcommentsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogdelete
#
# Delete an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogdelete' } = { 
        summary => 'Delete an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelogdelete");
    }

    # parse inputs
    my $_resource_path = '/attendancelogdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogget
#
# Search and view details of an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogget' } = { 
        summary => 'Search and view details of an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelogget");
    }

    # parse inputs
    my $_resource_path = '/attendancelogget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendanceloggetchangehistory
#
# Search and view details of an attendance log's swipe history
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendanceloggetchangehistory' } = { 
        summary => 'Search and view details of an attendance log&#39;s swipe history',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendanceloggetchangehistory {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendanceloggetchangehistory");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendanceloggetchangehistory");
    }

    # parse inputs
    my $_resource_path = '/attendanceloggetchangehistory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendanceloglist
#
# View a list of attendance logs
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
# @param string $filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
# @param string $userid The user ID of the user to get the logs. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.',
        required => '0',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user ID of the user to get the logs.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendanceloglist' } = { 
        summary => 'View a list of attendance logs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendanceloglist {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendanceloglist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendanceloglist");
    }

    # parse inputs
    my $_resource_path = '/attendanceloglist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendanceloglistmine
#
# Gets the attendance logs of the current user
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
# @param string $filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendanceloglistmine' } = { 
        summary => 'Gets the attendance logs of the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendanceloglistmine {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendanceloglistmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendanceloglistmine");
    }

    # parse inputs
    my $_resource_path = '/attendanceloglistmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogsave
#
# Create or edit an attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogsave' } = { 
        summary => 'Create or edit an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attendancelogsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogsignout
#
# Sign out an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to sign-out. (optional)
# @param string $location The id of the location to filter the users to sign out. (optional)
# @param string $event The id of the event to filter the users to sign out. (optional)
# @param DateTime $datetime Specifies the date and time when the specified logs have to be signed out. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to sign-out.',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location to filter the users to sign out.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event to filter the users to sign out.',
        required => '0',
    },
    'datetime' => {
        data_type => 'DateTime',
        description => 'Specifies the date and time when the specified logs have to be signed out.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogsignout' } = { 
        summary => 'Sign out an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogsignout {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogsignout");
    }

    # parse inputs
    my $_resource_path = '/attendancelogsignout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'datetime'}) {
        $query_params->{'datetime'} = $self->{api_client}->to_query_value($args{'datetime'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogwhosin
#
# View who's in a location
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
# @param string $location The id of the location to search for users that are in. (optional)
# @param string $event The id of the event to search for users that are in. (optional)
# @param string $sorting Field to sort by. Either first-name, last-name or sign-in-time. (optional)
# @param string $roles The comma-separated list of ids of the roles to search for users that are in. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
# @param string $extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]). (optional)
# @param boolean $export True to export the results as CSV (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location to search for users that are in.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event to search for users that are in.',
        required => '0',
    },
    'sorting' => {
        data_type => 'string',
        description => 'Field to sort by. Either first-name, last-name or sign-in-time.',
        required => '0',
    },
    'roles' => {
        data_type => 'string',
        description => 'The comma-separated list of ids of the roles to search for users that are in.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'extensions' => {
        data_type => 'string',
        description => 'A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'True to export the results as CSV',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogwhosin' } = { 
        summary => 'View who&#39;s in a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogwhosin {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendancelogwhosin");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendancelogwhosin");
    }

    # parse inputs
    my $_resource_path = '/attendancelogwhosin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'sorting'}) {
        $query_params->{'sorting'} = $self->{api_client}->to_query_value($args{'sorting'});
    }

    # query params
    if ( exists $args{'roles'}) {
        $query_params->{'roles'} = $self->{api_client}->to_query_value($args{'roles'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # query params
    if ( exists $args{'extensions'}) {
        $query_params->{'extensions'} = $self->{api_client}->to_query_value($args{'extensions'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bgjobgetstatus
#
# Get background job status
# 
# @param string $token The authentication token. (required)
# @param string $jobid The ID of the job to get the status. 10 most recent will be returned if not specified. (optional)
# @param string $jobtype The job type to filter by. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'jobid' => {
        data_type => 'string',
        description => 'The ID of the job to get the status. 10 most recent will be returned if not specified.',
        required => '0',
    },
    'jobtype' => {
        data_type => 'string',
        description => 'The job type to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'bgjobgetstatus' } = { 
        summary => 'Get background job status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bgjobgetstatus {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling bgjobgetstatus");
    }

    # parse inputs
    my $_resource_path = '/bgjobgetstatus';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    # query params
    if ( exists $args{'jobtype'}) {
        $query_params->{'jobtype'} = $self->{api_client}->to_query_value($args{'jobtype'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# captchagetchallenge
#
# Gets a captcha challenge that the user must complete to do certain requests.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'captchagetchallenge' } = { 
        summary => 'Gets a captcha challenge that the user must complete to do certain requests.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub captchagetchallenge {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/captchagetchallenge';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# captchagetimage
#
# Gets a captcha image that the user must complete to do certain requests.
# 
# @param string $captchatoken The captcha token or ID returned by the captcha.getchallenge action (required)
{
    my $params = {
    'captchatoken' => {
        data_type => 'string',
        description => 'The captcha token or ID returned by the captcha.getchallenge action',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'captchagetimage' } = { 
        summary => 'Gets a captcha image that the user must complete to do certain requests.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub captchagetimage {
    my ($self, %args) = @_;

    # verify the required parameter 'captchatoken' is set
    unless (exists $args{'captchatoken'}) {
      croak("Missing the required parameter 'captchatoken' when calling captchagetimage");
    }

    # parse inputs
    my $_resource_path = '/captchagetimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'captchatoken'}) {
        $query_params->{'captchatoken'} = $self->{api_client}->to_query_value($args{'captchatoken'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# changelog
#
# Get the application change log
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'changelog' } = { 
        summary => 'Get the application change log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub changelog {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling changelog");
    }

    # parse inputs
    my $_resource_path = '/changelog';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clientget
#
# Get client
# 
# @param string $token The authentication token. (required)
# @param string $client The unique id of the client. (required)
# @param string $clientname The custom name of the client. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'client' => {
        data_type => 'string',
        description => 'The unique id of the client.',
        required => '1',
    },
    'clientname' => {
        data_type => 'string',
        description => 'The custom name of the client.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'clientget' } = { 
        summary => 'Get client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub clientget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling clientget");
    }

    # verify the required parameter 'client' is set
    unless (exists $args{'client'}) {
      croak("Missing the required parameter 'client' when calling clientget");
    }

    # parse inputs
    my $_resource_path = '/clientget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'client'}) {
        $query_params->{'client'} = $self->{api_client}->to_query_value($args{'client'});
    }

    # query params
    if ( exists $args{'clientname'}) {
        $query_params->{'clientname'} = $self->{api_client}->to_query_value($args{'clientname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clientlist
#
# Gets the clients of the specified conference
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'clientlist' } = { 
        summary => 'Gets the clients of the specified conference',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub clientlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling clientlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling clientlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling clientlist");
    }

    # parse inputs
    my $_resource_path = '/clientlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clientsave
#
# Saves a client
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'clientsave' } = { 
        summary => 'Saves a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub clientsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/clientsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clientsendmessage
#
# Send a message to a client
# 
# @param string $token The authentication token. (required)
# @param string $uniqueclientid The unique id of the client. (required)
# @param string $message The body of the message to send. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'uniqueclientid' => {
        data_type => 'string',
        description => 'The unique id of the client.',
        required => '1',
    },
    'message' => {
        data_type => 'string',
        description => 'The body of the message to send.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'clientsendmessage' } = { 
        summary => 'Send a message to a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub clientsendmessage {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling clientsendmessage");
    }

    # verify the required parameter 'uniqueclientid' is set
    unless (exists $args{'uniqueclientid'}) {
      croak("Missing the required parameter 'uniqueclientid' when calling clientsendmessage");
    }

    # verify the required parameter 'message' is set
    unless (exists $args{'message'}) {
      croak("Missing the required parameter 'message' when calling clientsendmessage");
    }

    # parse inputs
    my $_resource_path = '/clientsendmessage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'uniqueclientid'}) {
        $query_params->{'uniqueclientid'} = $self->{api_client}->to_query_value($args{'uniqueclientid'});
    }

    # query params
    if ( exists $args{'message'}) {
        $query_params->{'message'} = $self->{api_client}->to_query_value($args{'message'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditdelete
#
# Delete a credit
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the credit to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the credit to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditdelete' } = { 
        summary => 'Delete a credit',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling creditdelete");
    }

    # parse inputs
    my $_resource_path = '/creditdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditdiscountmethods
#
# Gets the valid discount methods.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'creditdiscountmethods' } = { 
        summary => 'Gets the valid discount methods.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditdiscountmethods {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/creditdiscountmethods';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditget
#
# View details of assigned credit
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the credit to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the credit to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditget' } = { 
        summary => 'View details of assigned credit',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling creditget");
    }

    # parse inputs
    my $_resource_path = '/creditget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditgetuserbalance
#
# Get the total amount of credits of the specified user
# 
# @param string $token The authentication token. (required)
# @param string $user The id of the user whose balance has to be returned. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The id of the user whose balance has to be returned.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditgetuserbalance' } = { 
        summary => 'Get the total amount of credits of the specified user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditgetuserbalance {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditgetuserbalance");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling creditgetuserbalance");
    }

    # parse inputs
    my $_resource_path = '/creditgetuserbalance';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditlist
#
# View a list of credits for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $user The id of the user. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The id of the user.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditlist' } = { 
        summary => 'View a list of credits for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditlist");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling creditlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling creditlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling creditlist");
    }

    # parse inputs
    my $_resource_path = '/creditlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditlistdetails
#
# Gets the credit usage details
# 
# @param string $token The authentication token. (required)
# @param string $credit The id of the credit to look up for details. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'credit' => {
        data_type => 'string',
        description => 'The id of the credit to look up for details.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditlistdetails' } = { 
        summary => 'Gets the credit usage details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditlistdetails {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditlistdetails");
    }

    # verify the required parameter 'credit' is set
    unless (exists $args{'credit'}) {
      croak("Missing the required parameter 'credit' when calling creditlistdetails");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling creditlistdetails");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling creditlistdetails");
    }

    # parse inputs
    my $_resource_path = '/creditlistdetails';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'credit'}) {
        $query_params->{'credit'} = $self->{api_client}->to_query_value($args{'credit'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditlistmine
#
# View the list of credits of the current user
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditlistmine' } = { 
        summary => 'View the list of credits of the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditlistmine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditlistmine");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling creditlistmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling creditlistmine");
    }

    # parse inputs
    my $_resource_path = '/creditlistmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditplandelete
#
# Deletes a credit plan
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the credit plan to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the credit plan to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditplandelete' } = { 
        summary => 'Deletes a credit plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditplandelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditplandelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling creditplandelete");
    }

    # parse inputs
    my $_resource_path = '/creditplandelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditplanget
#
# Gets a credit plan
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the credit plan to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the credit plan to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditplanget' } = { 
        summary => 'Gets a credit plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditplanget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditplanget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling creditplanget");
    }

    # parse inputs
    my $_resource_path = '/creditplanget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditplanlist
#
# Gets the credit plans available
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditplanlist' } = { 
        summary => 'Gets the credit plans available',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditplanlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling creditplanlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling creditplanlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling creditplanlist");
    }

    # parse inputs
    my $_resource_path = '/creditplanlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditplansave
#
# Saves a credit plan
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditplansave' } = { 
        summary => 'Saves a credit plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditplansave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/creditplansave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditsave
#
# Create or edit credit for a user
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditsave' } = { 
        summary => 'Create or edit credit for a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/creditsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# creditsavedetails
#
# Create or edit credit details
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'creditsavedetails' } = { 
        summary => 'Create or edit credit details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub creditsavedetails {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/creditsavedetails';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# doc
#
# Get the documentation
# 
# @param boolean $excludeanonymous If true it excludes the anonymous actions from the returned list. (optional)
{
    my $params = {
    'excludeanonymous' => {
        data_type => 'boolean',
        description => 'If true it excludes the anonymous actions from the returned list.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'doc' } = { 
        summary => 'Get the documentation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub doc {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/doc';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'excludeanonymous'}) {
        $query_params->{'excludeanonymous'} = $self->{api_client}->to_query_value($args{'excludeanonymous'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# easyloginaddbgimage
#
# Adds background image for the login
# 
# @param string $token The authentication token. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The original filename, needed to process the file. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The original filename, needed to process the file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'easyloginaddbgimage' } = { 
        summary => 'Adds background image for the login',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub easyloginaddbgimage {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling easyloginaddbgimage");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling easyloginaddbgimage");
    }

    # verify the required parameter 'filename' is set
    unless (exists $args{'filename'}) {
      croak("Missing the required parameter 'filename' when calling easyloginaddbgimage");
    }

    # parse inputs
    my $_resource_path = '/easyloginaddbgimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventdelete
#
# Delete a course
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the event to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the event to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventdelete' } = { 
        summary => 'Delete a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling eventdelete");
    }

    # parse inputs
    my $_resource_path = '/eventdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventget
#
# Search and view details of a course
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the event to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the event to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventget' } = { 
        summary => 'Search and view details of a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling eventget");
    }

    # parse inputs
    my $_resource_path = '/eventget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventgetsessionsbydate
#
# View a list of courses by date
# 
# @param string $token The authentication token. (required)
# @param string $location The location to filter the events. (optional)
# @param DateTime $date The date to filter the events. Today will be used if this parameter is omitted. (optional)
# @param string $type Type of event to list. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The location to filter the events.',
        required => '0',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'The date to filter the events. Today will be used if this parameter is omitted.',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Type of event to list.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventgetsessionsbydate' } = { 
        summary => 'View a list of courses by date',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventgetsessionsbydate {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventgetsessionsbydate");
    }

    # parse inputs
    my $_resource_path = '/eventgetsessionsbydate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventlist
#
# View a list of courses
# 
# @param string $token The authentication token. (required)
# @param string $from The first record to return. (required)
# @param string $count The max number of records to return. (required)
# @param boolean $summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
# @param string $termid Id of the term to list the events. Null to list all events. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'string',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'string',
        description => 'The max number of records to return.',
        required => '1',
    },
    'summaryonly' => {
        data_type => 'boolean',
        description => 'True to return only the event information and not the associated schedule, dept, etc. Defaults to false.',
        required => '0',
    },
    'termid' => {
        data_type => 'string',
        description => 'Id of the term to list the events. Null to list all events.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventlist' } = { 
        summary => 'View a list of courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling eventlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling eventlist");
    }

    # parse inputs
    my $_resource_path = '/eventlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'summaryonly'}) {
        $query_params->{'summaryonly'} = $self->{api_client}->to_query_value($args{'summaryonly'});
    }

    # query params
    if ( exists $args{'termid'}) {
        $query_params->{'termid'} = $self->{api_client}->to_query_value($args{'termid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventsave
#
# Create or edit a course
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventsave' } = { 
        summary => 'Create or edit a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/eventsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventsearchgroup
#
# Searches for the available event groups
# 
# @param string $token The authentication token. (required)
# @param string $query Query to search event groups. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'Query to search event groups.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventsearchgroup' } = { 
        summary => 'Searches for the available event groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventsearchgroup {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventsearchgroup");
    }

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling eventsearchgroup");
    }

    # parse inputs
    my $_resource_path = '/eventsearchgroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# export
#
# Export AccuCampus data
# 
# @param string $token The authentication token. (required)
# @param string $exporttype What to export. (required)
# @param string $exportformat The format of the resulting file. Valid types are CSV, HTML, XLS. (required)
# @param string $filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'exporttype' => {
        data_type => 'string',
        description => 'What to export.',
        required => '1',
    },
    'exportformat' => {
        data_type => 'string',
        description => 'The format of the resulting file. Valid types are CSV, HTML, XLS.',
        required => '1',
    },
    'filters' => {
        data_type => 'string',
        description => 'Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'export' } = { 
        summary => 'Export AccuCampus data',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub export {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling export");
    }

    # verify the required parameter 'exporttype' is set
    unless (exists $args{'exporttype'}) {
      croak("Missing the required parameter 'exporttype' when calling export");
    }

    # verify the required parameter 'exportformat' is set
    unless (exists $args{'exportformat'}) {
      croak("Missing the required parameter 'exportformat' when calling export");
    }

    # parse inputs
    my $_resource_path = '/export';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'exporttype'}) {
        $query_params->{'exporttype'} = $self->{api_client}->to_query_value($args{'exporttype'});
    }

    # query params
    if ( exists $args{'exportformat'}) {
        $query_params->{'exportformat'} = $self->{api_client}->to_query_value($args{'exportformat'});
    }

    # query params
    if ( exists $args{'filters'}) {
        $query_params->{'filters'} = $self->{api_client}->to_query_value($args{'filters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# exportlisttypes
#
# Lists available export types
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'exportlisttypes' } = { 
        summary => 'Lists available export types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub exportlisttypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling exportlisttypes");
    }

    # parse inputs
    my $_resource_path = '/exportlisttypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# featurelist
#
# Lists the available features.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'featurelist' } = { 
        summary => 'Lists the available features.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub featurelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling featurelist");
    }

    # parse inputs
    my $_resource_path = '/featurelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# holidaylist
#
# View a list of entered holidays
# 
# @param string $token The authentication token. (required)
# @param string $term The term to get holidays from. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'term' => {
        data_type => 'string',
        description => 'The term to get holidays from.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'holidaylist' } = { 
        summary => 'View a list of entered holidays',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub holidaylist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling holidaylist");
    }

    # verify the required parameter 'term' is set
    unless (exists $args{'term'}) {
      croak("Missing the required parameter 'term' when calling holidaylist");
    }

    # parse inputs
    my $_resource_path = '/holidaylist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'term'}) {
        $query_params->{'term'} = $self->{api_client}->to_query_value($args{'term'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# holidaysave
#
# Create or edit a list of holidays
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'holidaysave' } = { 
        summary => 'Create or edit a list of holidays',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub holidaysave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/holidaysave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# holidaysuggest
#
# View the holiday suggestions in the given term
# 
# @param string $token The authentication token. (required)
# @param string $term The term to get holidays from. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'term' => {
        data_type => 'string',
        description => 'The term to get holidays from.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'holidaysuggest' } = { 
        summary => 'View the holiday suggestions in the given term',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub holidaysuggest {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling holidaysuggest");
    }

    # verify the required parameter 'term' is set
    unless (exists $args{'term'}) {
      croak("Missing the required parameter 'term' when calling holidaysuggest");
    }

    # parse inputs
    my $_resource_path = '/holidaysuggest';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'term'}) {
        $query_params->{'term'} = $self->{api_client}->to_query_value($args{'term'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# import
#
# Import data into AccuCampus
# 
# @param string $token The authentication token. (required)
# @param string $importtype The kind of data that is being uploaded. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
# @param string $parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'importtype' => {
        data_type => 'string',
        description => 'The kind of data that is being uploaded.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    'parameters' => {
        data_type => 'string',
        description => 'Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'import' } = { 
        summary => 'Import data into AccuCampus',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub import {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling import");
    }

    # verify the required parameter 'importtype' is set
    unless (exists $args{'importtype'}) {
      croak("Missing the required parameter 'importtype' when calling import");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling import");
    }

    # parse inputs
    my $_resource_path = '/import';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'importtype'}) {
        $query_params->{'importtype'} = $self->{api_client}->to_query_value($args{'importtype'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    # query params
    if ( exists $args{'parameters'}) {
        $query_params->{'parameters'} = $self->{api_client}->to_query_value($args{'parameters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# importlisttypes
#
# Lists available import types
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'importlisttypes' } = { 
        summary => 'Lists available import types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub importlisttypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling importlisttypes");
    }

    # parse inputs
    my $_resource_path = '/importlisttypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# licenseacceptagreement
#
# Accept the license agreement
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'licenseacceptagreement' } = { 
        summary => 'Accept the license agreement',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub licenseacceptagreement {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling licenseacceptagreement");
    }

    # parse inputs
    my $_resource_path = '/licenseacceptagreement';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# licensegetagreementstatus
#
# Check if license agreement has been accepted
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'licensegetagreementstatus' } = { 
        summary => 'Check if license agreement has been accepted',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub licensegetagreementstatus {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling licensegetagreementstatus");
    }

    # parse inputs
    my $_resource_path = '/licensegetagreementstatus';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# licensegetcurrent
#
# Gets the current license information
# 
# @param string $token The authentication token. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'licensegetcurrent' } = { 
        summary => 'Gets the current license information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub licensegetcurrent {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/licensegetcurrent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# licenserenew
#
# Contact Engineerica in order to renew the AccuCampus subscription
# 
# @param string $token The authentication token. (required)
# @param string $email The e-mail of the user sending the request. (required)
# @param string $phonenumber The phone number of the user sending the request. (required)
# @param string $jobtitle The job title of the user sending the request. (optional)
# @param string $institution The institution of the user sending the request. (optional)
# @param string $comments Comments entered by the user sending the request. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'email' => {
        data_type => 'string',
        description => 'The e-mail of the user sending the request.',
        required => '1',
    },
    'phonenumber' => {
        data_type => 'string',
        description => 'The phone number of the user sending the request.',
        required => '1',
    },
    'jobtitle' => {
        data_type => 'string',
        description => 'The job title of the user sending the request.',
        required => '0',
    },
    'institution' => {
        data_type => 'string',
        description => 'The institution of the user sending the request.',
        required => '0',
    },
    'comments' => {
        data_type => 'string',
        description => 'Comments entered by the user sending the request.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'licenserenew' } = { 
        summary => 'Contact Engineerica in order to renew the AccuCampus subscription',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub licenserenew {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling licenserenew");
    }

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling licenserenew");
    }

    # verify the required parameter 'phonenumber' is set
    unless (exists $args{'phonenumber'}) {
      croak("Missing the required parameter 'phonenumber' when calling licenserenew");
    }

    # parse inputs
    my $_resource_path = '/licenserenew';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'email'}) {
        $query_params->{'email'} = $self->{api_client}->to_query_value($args{'email'});
    }

    # query params
    if ( exists $args{'phonenumber'}) {
        $query_params->{'phonenumber'} = $self->{api_client}->to_query_value($args{'phonenumber'});
    }

    # query params
    if ( exists $args{'jobtitle'}) {
        $query_params->{'jobtitle'} = $self->{api_client}->to_query_value($args{'jobtitle'});
    }

    # query params
    if ( exists $args{'institution'}) {
        $query_params->{'institution'} = $self->{api_client}->to_query_value($args{'institution'});
    }

    # query params
    if ( exists $args{'comments'}) {
        $query_params->{'comments'} = $self->{api_client}->to_query_value($args{'comments'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# listtimezones
#
# Lists the available timezones
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'listtimezones' } = { 
        summary => 'Lists the available timezones',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub listtimezones {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/listtimezones';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# locationdelete
#
# Delete a location
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the location to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the location to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'locationdelete' } = { 
        summary => 'Delete a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub locationdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling locationdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling locationdelete");
    }

    # parse inputs
    my $_resource_path = '/locationdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# locationget
#
# Search and view details of a location
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the location to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the location to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'locationget' } = { 
        summary => 'Search and view details of a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub locationget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling locationget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling locationget");
    }

    # parse inputs
    my $_resource_path = '/locationget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# locationlist
#
# View a list of locations
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $locations The comma-separated list containing the ids of the locations to list. (optional)
# @param boolean $sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'locations' => {
        data_type => 'string',
        description => 'The comma-separated list containing the ids of the locations to list.',
        required => '0',
    },
    'sortbygroup' => {
        data_type => 'boolean',
        description => 'True to list locations sorted by the &#39;Located In&#39; property. Defaults to false.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'locationlist' } = { 
        summary => 'View a list of locations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub locationlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling locationlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling locationlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling locationlist");
    }

    # parse inputs
    my $_resource_path = '/locationlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'locations'}) {
        $query_params->{'locations'} = $self->{api_client}->to_query_value($args{'locations'});
    }

    # query params
    if ( exists $args{'sortbygroup'}) {
        $query_params->{'sortbygroup'} = $self->{api_client}->to_query_value($args{'sortbygroup'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# locationsave
#
# Create or edit a location
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'locationsave' } = { 
        summary => 'Create or edit a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub locationsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/locationsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# login
#
# Login
# 
# @param string $domain The account domain to login. (required)
# @param string $username The username (email) of the user to login as. (required)
# @param string $password The password of the user to login as. (required)
# @param string $method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
# @param boolean $rememberme If true then the session will not expire. (optional)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'The account domain to login.',
        required => '1',
    },
    'username' => {
        data_type => 'string',
        description => 'The username (email) of the user to login as.',
        required => '1',
    },
    'password' => {
        data_type => 'string',
        description => 'The password of the user to login as.',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.',
        required => '1',
    },
    'rememberme' => {
        data_type => 'boolean',
        description => 'If true then the session will not expire.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'login' } = { 
        summary => 'Login',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub login {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling login");
    }

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling login");
    }

    # verify the required parameter 'password' is set
    unless (exists $args{'password'}) {
      croak("Missing the required parameter 'password' when calling login");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling login");
    }

    # parse inputs
    my $_resource_path = '/login';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'password'}) {
        $query_params->{'password'} = $self->{api_client}->to_query_value($args{'password'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    # query params
    if ( exists $args{'rememberme'}) {
        $query_params->{'rememberme'} = $self->{api_client}->to_query_value($args{'rememberme'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logout
#
# Logout
# 
# @param string $token The authentication token used to login. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token used to login.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logout' } = { 
        summary => 'Logout',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logout {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/logout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# memorizedreportdelete
#
# Delete memorized report
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the report settings to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the report settings to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'memorizedreportdelete' } = { 
        summary => 'Delete memorized report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub memorizedreportdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling memorizedreportdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling memorizedreportdelete");
    }

    # parse inputs
    my $_resource_path = '/memorizedreportdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# memorizedreportget
#
# View details of a memorized report
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the report configuration to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the report configuration to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'memorizedreportget' } = { 
        summary => 'View details of a memorized report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub memorizedreportget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling memorizedreportget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling memorizedreportget");
    }

    # parse inputs
    my $_resource_path = '/memorizedreportget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# memorizedreportlist
#
# View a list of all his memorized reports
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $customname If specified filters the memorized reports by custom name. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'customname' => {
        data_type => 'string',
        description => 'If specified filters the memorized reports by custom name.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'memorizedreportlist' } = { 
        summary => 'View a list of all his memorized reports',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub memorizedreportlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling memorizedreportlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling memorizedreportlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling memorizedreportlist");
    }

    # parse inputs
    my $_resource_path = '/memorizedreportlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'customname'}) {
        $query_params->{'customname'} = $self->{api_client}->to_query_value($args{'customname'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# memorizedreportsave
#
# Create or edit a memorized report
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'memorizedreportsave' } = { 
        summary => 'Create or edit a memorized report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub memorizedreportsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/memorizedreportsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# menugetitems
#
# Gets the items on the menu
# 
# @param string $menuid The Id of the menu to get. (required)
{
    my $params = {
    'menuid' => {
        data_type => 'string',
        description => 'The Id of the menu to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'menugetitems' } = { 
        summary => 'Gets the items on the menu',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub menugetitems {
    my ($self, %args) = @_;

    # verify the required parameter 'menuid' is set
    unless (exists $args{'menuid'}) {
      croak("Missing the required parameter 'menuid' when calling menugetitems");
    }

    # parse inputs
    my $_resource_path = '/menugetitems';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'menuid'}) {
        $query_params->{'menuid'} = $self->{api_client}->to_query_value($args{'menuid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# myaccount
#
# Gets the logged in user account.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'myaccount' } = { 
        summary => 'Gets the logged in user account.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub myaccount {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling myaccount");
    }

    # parse inputs
    my $_resource_path = '/myaccount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# myianatimezone
#
# Gets the current time zone's iana name
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'myianatimezone' } = { 
        summary => 'Gets the current time zone&#39;s iana name',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub myianatimezone {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling myianatimezone");
    }

    # parse inputs
    my $_resource_path = '/myianatimezone';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# myprofile
#
# Gets the logged in user information.
# 
# @param string $token The authentication token. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'myprofile' } = { 
        summary => 'Gets the logged in user information.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub myprofile {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling myprofile");
    }

    # parse inputs
    my $_resource_path = '/myprofile';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# myrights
#
# Gets the list of actions the user can execute.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'myrights' } = { 
        summary => 'Gets the list of actions the user can execute.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub myrights {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling myrights");
    }

    # parse inputs
    my $_resource_path = '/myrights';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mysaveprofile
#
# Updates logged user's profile information
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mysaveprofile' } = { 
        summary => 'Updates logged user&#39;s profile information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mysaveprofile {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mysaveprofile';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationdelete
#
# Delete a notification
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationdelete' } = { 
        summary => 'Delete a notification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notificationdelete");
    }

    # parse inputs
    my $_resource_path = '/notificationdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationget
#
# View a notification
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationget' } = { 
        summary => 'View a notification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notificationget");
    }

    # parse inputs
    my $_resource_path = '/notificationget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationgetforstation
#
# Gets all public (in station) notifications for the specific user
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationgetforstation' } = { 
        summary => 'Gets all public (in station) notifications for the specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationgetforstation {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling notificationgetforstation");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling notificationgetforstation");
    }

    # parse inputs
    my $_resource_path = '/notificationgetforstation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationgetunreadcount
#
# Get the number of unread notifications
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationgetunreadcount' } = { 
        summary => 'Get the number of unread notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationgetunreadcount {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationgetunreadcount");
    }

    # parse inputs
    my $_resource_path = '/notificationgetunreadcount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationlist
#
# View a list of all sent notifications
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $recipient The recipient whose notifications have to be listed. (optional)
# @param int $status The status of the notifications to list. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
# @param boolean $sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
# @param boolean $sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
# @param boolean $sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'recipient' => {
        data_type => 'string',
        description => 'The recipient whose notifications have to be listed.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'The status of the notifications to list. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    'sentonscreen' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent on-screen or not.',
        required => '0',
    },
    'sentemail' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent via e-mail or not.',
        required => '0',
    },
    'sentsms' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent via sms or not.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationlist' } = { 
        summary => 'View a list of all sent notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling notificationlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling notificationlist");
    }

    # parse inputs
    my $_resource_path = '/notificationlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'recipient'}) {
        $query_params->{'recipient'} = $self->{api_client}->to_query_value($args{'recipient'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    # query params
    if ( exists $args{'sentonscreen'}) {
        $query_params->{'sentonscreen'} = $self->{api_client}->to_query_value($args{'sentonscreen'});
    }

    # query params
    if ( exists $args{'sentemail'}) {
        $query_params->{'sentemail'} = $self->{api_client}->to_query_value($args{'sentemail'});
    }

    # query params
    if ( exists $args{'sentsms'}) {
        $query_params->{'sentsms'} = $self->{api_client}->to_query_value($args{'sentsms'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationlistmine
#
# View all the notifications sent to the current user
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $status Specifies the status of the notifications to list. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status of the notifications to list. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationlistmine' } = { 
        summary => 'View all the notifications sent to the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationlistmine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationlistmine");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling notificationlistmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling notificationlistmine");
    }

    # parse inputs
    my $_resource_path = '/notificationlistmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationmarkasread
#
# Mark a notification as read
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
# @param int $status Specifies the status to filter the notifications. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status to filter the notifications. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationmarkasread' } = { 
        summary => 'Mark a notification as read',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationmarkasread {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationmarkasread");
    }

    # parse inputs
    my $_resource_path = '/notificationmarkasread';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationmarkasunread
#
# Mark a notification as unread
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
# @param int $status Specifies the status to filter the notifications. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status to filter the notifications. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationmarkasunread' } = { 
        summary => 'Mark a notification as unread',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationmarkasunread {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationmarkasunread");
    }

    # parse inputs
    my $_resource_path = '/notificationmarkasunread';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationsend
#
# Send notifications on screen, via email or text to users
# 
# @param string $token The authentication token. (required)
# @param boolean $emailenabled Whether send the notification via email. (required)
# @param boolean $onscreenenabled Whether to display the notification on screen. (required)
# @param boolean $smsenabled Whether to send the notification via text message. (required)
# @param string $title Notification title. (required)
# @param string $tousers Comma-separated Ids of users to send the notification. (optional)
# @param string $togroups Comma-separated Ids of user groups to send the notification. (optional)
# @param string $onscreenbody Body of the message for on-screen display. (optional)
# @param string $onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
# @param string $onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
# @param string $onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
# @param int $onscreenduration Time in seconds to display the notification. (optional)
# @param int $showonstation Whether to show the notification in the sign-in station. (optional)
# @param string $emailfromname Name of the email sender. (optional)
# @param string $emailfrom Reply-to email. (optional)
# @param string $emailsubject Subject of the email. (optional)
# @param string $emailbody Body of the email. (optional)
# @param string $textmessagebody Message for SMS. Max 160 characters. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'emailenabled' => {
        data_type => 'boolean',
        description => 'Whether send the notification via email.',
        required => '1',
    },
    'onscreenenabled' => {
        data_type => 'boolean',
        description => 'Whether to display the notification on screen.',
        required => '1',
    },
    'smsenabled' => {
        data_type => 'boolean',
        description => 'Whether to send the notification via text message.',
        required => '1',
    },
    'title' => {
        data_type => 'string',
        description => 'Notification title.',
        required => '1',
    },
    'tousers' => {
        data_type => 'string',
        description => 'Comma-separated Ids of users to send the notification.',
        required => '0',
    },
    'togroups' => {
        data_type => 'string',
        description => 'Comma-separated Ids of user groups to send the notification.',
        required => '0',
    },
    'onscreenbody' => {
        data_type => 'string',
        description => 'Body of the message for on-screen display.',
        required => '0',
    },
    'onscreenclick' => {
        data_type => 'string',
        description => 'What to do when the notification is clicked. Valid values: hide, view, url.',
        required => '0',
    },
    'onscreenurl' => {
        data_type => 'string',
        description => 'Url to redirect the user, if onscreenclick&#x3D;url.',
        required => '0',
    },
    'onscreenclass' => {
        data_type => 'string',
        description => 'How to display the notification. Valid values: info, success, warning, error',
        required => '0',
    },
    'onscreenduration' => {
        data_type => 'int',
        description => 'Time in seconds to display the notification.',
        required => '0',
    },
    'showonstation' => {
        data_type => 'int',
        description => 'Whether to show the notification in the sign-in station.',
        required => '0',
    },
    'emailfromname' => {
        data_type => 'string',
        description => 'Name of the email sender.',
        required => '0',
    },
    'emailfrom' => {
        data_type => 'string',
        description => 'Reply-to email.',
        required => '0',
    },
    'emailsubject' => {
        data_type => 'string',
        description => 'Subject of the email.',
        required => '0',
    },
    'emailbody' => {
        data_type => 'string',
        description => 'Body of the email.',
        required => '0',
    },
    'textmessagebody' => {
        data_type => 'string',
        description => 'Message for SMS. Max 160 characters.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationsend' } = { 
        summary => 'Send notifications on screen, via email or text to users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationsend {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationsend");
    }

    # verify the required parameter 'emailenabled' is set
    unless (exists $args{'emailenabled'}) {
      croak("Missing the required parameter 'emailenabled' when calling notificationsend");
    }

    # verify the required parameter 'onscreenenabled' is set
    unless (exists $args{'onscreenenabled'}) {
      croak("Missing the required parameter 'onscreenenabled' when calling notificationsend");
    }

    # verify the required parameter 'smsenabled' is set
    unless (exists $args{'smsenabled'}) {
      croak("Missing the required parameter 'smsenabled' when calling notificationsend");
    }

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling notificationsend");
    }

    # parse inputs
    my $_resource_path = '/notificationsend';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'tousers'}) {
        $query_params->{'tousers'} = $self->{api_client}->to_query_value($args{'tousers'});
    }

    # query params
    if ( exists $args{'togroups'}) {
        $query_params->{'togroups'} = $self->{api_client}->to_query_value($args{'togroups'});
    }

    # query params
    if ( exists $args{'emailenabled'}) {
        $query_params->{'emailenabled'} = $self->{api_client}->to_query_value($args{'emailenabled'});
    }

    # query params
    if ( exists $args{'onscreenenabled'}) {
        $query_params->{'onscreenenabled'} = $self->{api_client}->to_query_value($args{'onscreenenabled'});
    }

    # query params
    if ( exists $args{'smsenabled'}) {
        $query_params->{'smsenabled'} = $self->{api_client}->to_query_value($args{'smsenabled'});
    }

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'onscreenbody'}) {
        $query_params->{'onscreenbody'} = $self->{api_client}->to_query_value($args{'onscreenbody'});
    }

    # query params
    if ( exists $args{'onscreenclick'}) {
        $query_params->{'onscreenclick'} = $self->{api_client}->to_query_value($args{'onscreenclick'});
    }

    # query params
    if ( exists $args{'onscreenurl'}) {
        $query_params->{'onscreenurl'} = $self->{api_client}->to_query_value($args{'onscreenurl'});
    }

    # query params
    if ( exists $args{'onscreenclass'}) {
        $query_params->{'onscreenclass'} = $self->{api_client}->to_query_value($args{'onscreenclass'});
    }

    # query params
    if ( exists $args{'onscreenduration'}) {
        $query_params->{'onscreenduration'} = $self->{api_client}->to_query_value($args{'onscreenduration'});
    }

    # query params
    if ( exists $args{'showonstation'}) {
        $query_params->{'showonstation'} = $self->{api_client}->to_query_value($args{'showonstation'});
    }

    # query params
    if ( exists $args{'emailfromname'}) {
        $query_params->{'emailfromname'} = $self->{api_client}->to_query_value($args{'emailfromname'});
    }

    # query params
    if ( exists $args{'emailfrom'}) {
        $query_params->{'emailfrom'} = $self->{api_client}->to_query_value($args{'emailfrom'});
    }

    # query params
    if ( exists $args{'emailsubject'}) {
        $query_params->{'emailsubject'} = $self->{api_client}->to_query_value($args{'emailsubject'});
    }

    # query params
    if ( exists $args{'emailbody'}) {
        $query_params->{'emailbody'} = $self->{api_client}->to_query_value($args{'emailbody'});
    }

    # query params
    if ( exists $args{'textmessagebody'}) {
        $query_params->{'textmessagebody'} = $self->{api_client}->to_query_value($args{'textmessagebody'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationsendonscreen
#
# Send on-screen notifications
# 
# @param string $token The authentication token. (required)
# @param string $notification The ID of the notification to send. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'notification' => {
        data_type => 'string',
        description => 'The ID of the notification to send.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationsendonscreen' } = { 
        summary => 'Send on-screen notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationsendonscreen {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationsendonscreen");
    }

    # verify the required parameter 'notification' is set
    unless (exists $args{'notification'}) {
      croak("Missing the required parameter 'notification' when calling notificationsendonscreen");
    }

    # parse inputs
    my $_resource_path = '/notificationsendonscreen';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'notification'}) {
        $query_params->{'notification'} = $self->{api_client}->to_query_value($args{'notification'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopicdelete
#
# Delete a notification topic
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification topic to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification topic to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopicdelete' } = { 
        summary => 'Delete a notification topic',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopicdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationtopicdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notificationtopicdelete");
    }

    # parse inputs
    my $_resource_path = '/notificationtopicdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopicget
#
# Search and view details of a notification topic
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification topic to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification topic to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopicget' } = { 
        summary => 'Search and view details of a notification topic',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopicget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationtopicget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notificationtopicget");
    }

    # parse inputs
    my $_resource_path = '/notificationtopicget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopiclist
#
# List all the notification topics
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopiclist' } = { 
        summary => 'List all the notification topics',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopiclist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationtopiclist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling notificationtopiclist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling notificationtopiclist");
    }

    # parse inputs
    my $_resource_path = '/notificationtopiclist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopiclistsubscribe
#
# List all the notification topics available to subscribe
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopiclistsubscribe' } = { 
        summary => 'List all the notification topics available to subscribe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopiclistsubscribe {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationtopiclistsubscribe");
    }

    # parse inputs
    my $_resource_path = '/notificationtopiclistsubscribe';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopicsave
#
# Create or edit a notification topic
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopicsave' } = { 
        summary => 'Create or edit a notification topic',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopicsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/notificationtopicsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# pushderegister
#
# Deregisters the current device to receive push notifications
# 
# @param string $devicetoken The device token where to send the notification. (required)
# @param string $platform Either ios or android (required)
{
    my $params = {
    'devicetoken' => {
        data_type => 'string',
        description => 'The device token where to send the notification.',
        required => '1',
    },
    'platform' => {
        data_type => 'string',
        description => 'Either ios or android',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pushderegister' } = { 
        summary => 'Deregisters the current device to receive push notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub pushderegister {
    my ($self, %args) = @_;

    # verify the required parameter 'devicetoken' is set
    unless (exists $args{'devicetoken'}) {
      croak("Missing the required parameter 'devicetoken' when calling pushderegister");
    }

    # verify the required parameter 'platform' is set
    unless (exists $args{'platform'}) {
      croak("Missing the required parameter 'platform' when calling pushderegister");
    }

    # parse inputs
    my $_resource_path = '/pushderegister';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'devicetoken'}) {
        $query_params->{'devicetoken'} = $self->{api_client}->to_query_value($args{'devicetoken'});
    }

    # query params
    if ( exists $args{'platform'}) {
        $query_params->{'platform'} = $self->{api_client}->to_query_value($args{'platform'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# pushregister
#
# Registers the current device to receive push notifications
# 
# @param string $devicetoken The device token where to send the notification. (required)
# @param string $platform Either ios or android (required)
{
    my $params = {
    'devicetoken' => {
        data_type => 'string',
        description => 'The device token where to send the notification.',
        required => '1',
    },
    'platform' => {
        data_type => 'string',
        description => 'Either ios or android',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pushregister' } = { 
        summary => 'Registers the current device to receive push notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub pushregister {
    my ($self, %args) = @_;

    # verify the required parameter 'devicetoken' is set
    unless (exists $args{'devicetoken'}) {
      croak("Missing the required parameter 'devicetoken' when calling pushregister");
    }

    # verify the required parameter 'platform' is set
    unless (exists $args{'platform'}) {
      croak("Missing the required parameter 'platform' when calling pushregister");
    }

    # parse inputs
    my $_resource_path = '/pushregister';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'devicetoken'}) {
        $query_params->{'devicetoken'} = $self->{api_client}->to_query_value($args{'devicetoken'});
    }

    # query params
    if ( exists $args{'platform'}) {
        $query_params->{'platform'} = $self->{api_client}->to_query_value($args{'platform'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# qrlabelsprint
#
# Print and email QR labels
# 
# @param string $token The authentication token. (required)
# @param string $user The id of the user whose label needs to be printed. (optional)
# @param string $group The id of the group whose members&#39; labels need to be printed. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The id of the user whose label needs to be printed.',
        required => '0',
    },
    'group' => {
        data_type => 'string',
        description => 'The id of the group whose members&#39; labels need to be printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'qrlabelsprint' } = { 
        summary => 'Print and email QR labels',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub qrlabelsprint {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling qrlabelsprint");
    }

    # parse inputs
    my $_resource_path = '/qrlabelsprint';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# qrloginget
#
# Gets an image of a QR token
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'qrloginget' } = { 
        summary => 'Gets an image of a QR token',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub qrloginget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling qrloginget");
    }

    # parse inputs
    my $_resource_path = '/qrloginget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# qrloginlogin
#
# Login
# 
# @param string $onetimetoken The token read from the QR code. (required)
{
    my $params = {
    'onetimetoken' => {
        data_type => 'string',
        description => 'The token read from the QR code.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'qrloginlogin' } = { 
        summary => 'Login',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub qrloginlogin {
    my ($self, %args) = @_;

    # verify the required parameter 'onetimetoken' is set
    unless (exists $args{'onetimetoken'}) {
      croak("Missing the required parameter 'onetimetoken' when calling qrloginlogin");
    }

    # parse inputs
    my $_resource_path = '/qrloginlogin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'onetimetoken'}) {
        $query_params->{'onetimetoken'} = $self->{api_client}->to_query_value($args{'onetimetoken'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpaneldeletewidget
#
# Deletes a widget from the Quick Panel
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the widget. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the widget.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpaneldeletewidget' } = { 
        summary => 'Deletes a widget from the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpaneldeletewidget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpaneldeletewidget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling quickpaneldeletewidget");
    }

    # parse inputs
    my $_resource_path = '/quickpaneldeletewidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelfetchwidget
#
# Fetches the information for a specific widget.
# 
# @param string $token The authentication token. (required)
# @param string $widgetid The ID of the data to fetch it&#39;s data. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'widgetid' => {
        data_type => 'string',
        description => 'The ID of the data to fetch it&#39;s data.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelfetchwidget' } = { 
        summary => 'Fetches the information for a specific widget.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelfetchwidget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanelfetchwidget");
    }

    # verify the required parameter 'widgetid' is set
    unless (exists $args{'widgetid'}) {
      croak("Missing the required parameter 'widgetid' when calling quickpanelfetchwidget");
    }

    # parse inputs
    my $_resource_path = '/quickpanelfetchwidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'widgetid'}) {
        $query_params->{'widgetid'} = $self->{api_client}->to_query_value($args{'widgetid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelgetwidget
#
# View details of a widget included in the Quick Panel
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the widget to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the widget to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelgetwidget' } = { 
        summary => 'View details of a widget included in the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelgetwidget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanelgetwidget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling quickpanelgetwidget");
    }

    # parse inputs
    my $_resource_path = '/quickpanelgetwidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelinit
#
# Returns the initial information required to show the quick panels
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelinit' } = { 
        summary => 'Returns the initial information required to show the quick panels',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelinit {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanelinit");
    }

    # parse inputs
    my $_resource_path = '/quickpanelinit';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanellistwidgets
#
# Lists all the widgets that are added in the Quick Panel
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanellistwidgets' } = { 
        summary => 'Lists all the widgets that are added in the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanellistwidgets {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanellistwidgets");
    }

    # parse inputs
    my $_resource_path = '/quickpanellistwidgets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanellistwidgettypes
#
# Lists all the widget types available in the system
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanellistwidgettypes' } = { 
        summary => 'Lists all the widget types available in the system',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanellistwidgettypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanellistwidgettypes");
    }

    # parse inputs
    my $_resource_path = '/quickpanellistwidgettypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelreorderwidgets
#
# Reorders the widgets and moves them to a specific column
# 
# @param string $token The authentication token. (required)
# @param string $sectionname The section name where to sort the widgets. (required)
# @param string $orderids CSV list of the widgets to reorder. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'sectionname' => {
        data_type => 'string',
        description => 'The section name where to sort the widgets.',
        required => '1',
    },
    'orderids' => {
        data_type => 'string',
        description => 'CSV list of the widgets to reorder.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelreorderwidgets' } = { 
        summary => 'Reorders the widgets and moves them to a specific column',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelreorderwidgets {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanelreorderwidgets");
    }

    # verify the required parameter 'sectionname' is set
    unless (exists $args{'sectionname'}) {
      croak("Missing the required parameter 'sectionname' when calling quickpanelreorderwidgets");
    }

    # verify the required parameter 'orderids' is set
    unless (exists $args{'orderids'}) {
      croak("Missing the required parameter 'orderids' when calling quickpanelreorderwidgets");
    }

    # parse inputs
    my $_resource_path = '/quickpanelreorderwidgets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'sectionname'}) {
        $query_params->{'sectionname'} = $self->{api_client}->to_query_value($args{'sectionname'});
    }

    # query params
    if ( exists $args{'orderids'}) {
        $query_params->{'orderids'} = $self->{api_client}->to_query_value($args{'orderids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelsavewidget
#
# Saves a widget for the Quick Panel
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelsavewidget' } = { 
        summary => 'Saves a widget for the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelsavewidget {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/quickpanelsavewidget';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportlist
#
# View a list of available reports
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportlist' } = { 
        summary => 'View a list of available reports',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportlist");
    }

    # parse inputs
    my $_resource_path = '/reportlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportpermissionsbyuser
#
# Permissions by user report
# 
# @param string $token The authentication token. (required)
# @param string $params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportpermissionsbyuser' } = { 
        summary => 'Permissions by user report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportpermissionsbyuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportpermissionsbyuser");
    }

    # parse inputs
    my $_resource_path = '/reportpermissionsbyuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportprepare
#
# Queries and loads the specified report, in background.
# 
# @param string $token The authentication token. (required)
# @param string $reportname The name of the report to execute (required)
# @param string $params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
# @param string $repformat The format of the resulting report. Json, pdf, csv, ... (optional)
# @param string $fillgroupid If specified, the result is used to fill the group with the given ID (optional)
# @param string $groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
# @param string $refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
# @param string $filtertext The user friendly text of the applied filters. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'reportname' => {
        data_type => 'string',
        description => 'The name of the report to execute',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3',
        required => '0',
    },
    'repformat' => {
        data_type => 'string',
        description => 'The format of the resulting report. Json, pdf, csv, ...',
        required => '0',
    },
    'fillgroupid' => {
        data_type => 'string',
        description => 'If specified, the result is used to fill the group with the given ID',
        required => '0',
    },
    'groupby' => {
        data_type => 'string',
        description => 'How to group the records. In the format &#39;col1+col2|col3+col4',
        required => '0',
    },
    'refreshgroup' => {
        data_type => 'string',
        description => 'The ID of the group to check (and refresh) before processing the report.',
        required => '0',
    },
    'filtertext' => {
        data_type => 'string',
        description => 'The user friendly text of the applied filters.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportprepare' } = { 
        summary => 'Queries and loads the specified report, in background.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportprepare {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportprepare");
    }

    # verify the required parameter 'reportname' is set
    unless (exists $args{'reportname'}) {
      croak("Missing the required parameter 'reportname' when calling reportprepare");
    }

    # parse inputs
    my $_resource_path = '/reportprepare';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'reportname'}) {
        $query_params->{'reportname'} = $self->{api_client}->to_query_value($args{'reportname'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'repformat'}) {
        $query_params->{'repformat'} = $self->{api_client}->to_query_value($args{'repformat'});
    }

    # query params
    if ( exists $args{'fillgroupid'}) {
        $query_params->{'fillgroupid'} = $self->{api_client}->to_query_value($args{'fillgroupid'});
    }

    # query params
    if ( exists $args{'groupby'}) {
        $query_params->{'groupby'} = $self->{api_client}->to_query_value($args{'groupby'});
    }

    # query params
    if ( exists $args{'refreshgroup'}) {
        $query_params->{'refreshgroup'} = $self->{api_client}->to_query_value($args{'refreshgroup'});
    }

    # query params
    if ( exists $args{'filtertext'}) {
        $query_params->{'filtertext'} = $self->{api_client}->to_query_value($args{'filtertext'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportquery
#
# Query and load a specified report
# 
# @param string $token The authentication token. (required)
# @param string $reportname The name of the report to execute (required)
# @param string $params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'reportname' => {
        data_type => 'string',
        description => 'The name of the report to execute',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportquery' } = { 
        summary => 'Query and load a specified report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportquery {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportquery");
    }

    # verify the required parameter 'reportname' is set
    unless (exists $args{'reportname'}) {
      croak("Missing the required parameter 'reportname' when calling reportquery");
    }

    # parse inputs
    my $_resource_path = '/reportquery';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'reportname'}) {
        $query_params->{'reportname'} = $self->{api_client}->to_query_value($args{'reportname'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rolelist
#
# Show a list of roles
# 
# @param string $token The authentication token. (required)
# @param string $name Filter by name of the role. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter by name of the role.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'rolelist' } = { 
        summary => 'Show a list of roles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rolelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rolelist");
    }

    # parse inputs
    my $_resource_path = '/rolelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ruledelete
#
# Delete a rule
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the rule to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the rule to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ruledelete' } = { 
        summary => 'Delete a rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ruledelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ruledelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling ruledelete");
    }

    # parse inputs
    my $_resource_path = '/ruledelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ruleget
#
# View details of a rule
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the rule to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the rule to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ruleget' } = { 
        summary => 'View details of a rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ruleget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ruleget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling ruleget");
    }

    # parse inputs
    my $_resource_path = '/ruleget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulegeteventtype
#
# View details of a rule event type
# 
# @param string $token The authentication token. (required)
# @param string $event The name of the event to refresh. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'event' => {
        data_type => 'string',
        description => 'The name of the event to refresh.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulegeteventtype' } = { 
        summary => 'View details of a rule event type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulegeteventtype {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulegeteventtype");
    }

    # verify the required parameter 'event' is set
    unless (exists $args{'event'}) {
      croak("Missing the required parameter 'event' when calling rulegeteventtype");
    }

    # parse inputs
    my $_resource_path = '/rulegeteventtype';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulelist
#
# View a list of user rules
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulelist' } = { 
        summary => 'View a list of user rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling rulelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling rulelist");
    }

    # parse inputs
    my $_resource_path = '/rulelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulelistactions
#
# View a list of rule actions available
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulelistactions' } = { 
        summary => 'View a list of rule actions available',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulelistactions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulelistactions");
    }

    # parse inputs
    my $_resource_path = '/rulelistactions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulelisteventtypes
#
# View a list of rule event types
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulelisteventtypes' } = { 
        summary => 'View a list of rule event types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulelisteventtypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulelisteventtypes");
    }

    # parse inputs
    my $_resource_path = '/rulelisteventtypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulelisthttprequests
#
# View all the http requests sent as a result of a rule
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param boolean $failed If true only failed requests will be returned (optional)
# @param int $status The http status to filter the requests (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'failed' => {
        data_type => 'boolean',
        description => 'If true only failed requests will be returned',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'The http status to filter the requests',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulelisthttprequests' } = { 
        summary => 'View all the http requests sent as a result of a rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulelisthttprequests {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulelisthttprequests");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling rulelisthttprequests");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling rulelisthttprequests");
    }

    # parse inputs
    my $_resource_path = '/rulelisthttprequests';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'failed'}) {
        $query_params->{'failed'} = $self->{api_client}->to_query_value($args{'failed'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulesave
#
# Create or edit a rule
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulesave' } = { 
        summary => 'Create or edit a rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/rulesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# search
#
# Search
# 
# @param string $token The authentication token. (required)
# @param string $query The query to search for. (required)
# @param int $page Current page to show, zero-based. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'The query to search for.',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Current page to show, zero-based.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search' } = { 
        summary => 'Search',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub search {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling search");
    }

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search");
    }

    # parse inputs
    my $_resource_path = '/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# searchgetentities
#
# Get the information of the entities that can be searched
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'searchgetentities' } = { 
        summary => 'Get the information of the entities that can be searched',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub searchgetentities {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling searchgetentities");
    }

    # parse inputs
    my $_resource_path = '/searchgetentities';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# securityassesspermission
#
# Returns the list of users for a specific permission
# 
# @param string $token The authentication token. (required)
# @param string $commandname Name of the action or command to get the roles. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'commandname' => {
        data_type => 'string',
        description => 'Name of the action or command to get the roles.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'securityassesspermission' } = { 
        summary => 'Returns the list of users for a specific permission',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub securityassesspermission {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling securityassesspermission");
    }

    # verify the required parameter 'commandname' is set
    unless (exists $args{'commandname'}) {
      croak("Missing the required parameter 'commandname' when calling securityassesspermission");
    }

    # parse inputs
    my $_resource_path = '/securityassesspermission';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'commandname'}) {
        $query_params->{'commandname'} = $self->{api_client}->to_query_value($args{'commandname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# securityassessrole
#
# Returns the list of permissions for a specific role
# 
# @param string $token The authentication token. (required)
# @param string $roleid Role ID to list the effective permissions. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'Role ID to list the effective permissions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'securityassessrole' } = { 
        summary => 'Returns the list of permissions for a specific role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub securityassessrole {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling securityassessrole");
    }

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling securityassessrole");
    }

    # parse inputs
    my $_resource_path = '/securityassessrole';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# securityassessscope
#
# Returns the list of users for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $locationid Location ID to list the users with that scope. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'Location ID to list the users with that scope.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'securityassessscope' } = { 
        summary => 'Returns the list of users for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub securityassessscope {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling securityassessscope");
    }

    # parse inputs
    my $_resource_path = '/securityassessscope';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# securityassessuser
#
# Returns the list of permissions for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $userid User ID to list the effective permissions. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'User ID to list the effective permissions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'securityassessuser' } = { 
        summary => 'Returns the list of permissions for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub securityassessuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling securityassessuser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling securityassessuser");
    }

    # parse inputs
    my $_resource_path = '/securityassessuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregaddcurrentuser
#
# Register current user to an event session
# 
# @param string $token The authentication token. (required)
# @param string $eventid The id of the event. (required)
# @param DateTime $sessiondate The date and time when the session starts. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregaddcurrentuser' } = { 
        summary => 'Register current user to an event session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregaddcurrentuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionregaddcurrentuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionregaddcurrentuser");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionregaddcurrentuser");
    }

    # parse inputs
    my $_resource_path = '/sessionregaddcurrentuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregadduser
#
# Register users for events
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
# @param string $eventid The id of the event. (required)
# @param DateTime $sessiondate The date and time when the session starts. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregadduser' } = { 
        summary => 'Register users for events',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregadduser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionregadduser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling sessionregadduser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionregadduser");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionregadduser");
    }

    # parse inputs
    my $_resource_path = '/sessionregadduser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreggetmysessions
#
# View all the sessions the logged user is registered to
# 
# @param string $token The authentication token. (required)
# @param DateTime $date Start date to filter the sessions. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'Start date to filter the sessions.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreggetmysessions' } = { 
        summary => 'View all the sessions the logged user is registered to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreggetmysessions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreggetmysessions");
    }

    # parse inputs
    my $_resource_path = '/sessionreggetmysessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreggetsessions
#
# Lists the registrations for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $userid The user id to list sessions. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user id to list sessions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreggetsessions' } = { 
        summary => 'Lists the registrations for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreggetsessions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreggetsessions");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling sessionreggetsessions");
    }

    # parse inputs
    my $_resource_path = '/sessionreggetsessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreggetsettings
#
# Get the settings for session registration
# 
# @param string $token The authentication token. (required)
# @param string $locationid The id of the location to save settings. (optional)
# @param string $eventid The id of the event to save settings. (optional)
# @param DateTime $sessiondate The date and time when the session starts. (optional)
# @param boolean $noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location to save settings.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to save settings.',
        required => '0',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '0',
    },
    'noinherit' => {
        data_type => 'boolean',
        description => 'True to get the location/event/session specific settings without looking for the more global settings.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreggetsettings' } = { 
        summary => 'Get the settings for session registration',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreggetsettings {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreggetsettings");
    }

    # parse inputs
    my $_resource_path = '/sessionreggetsettings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    # query params
    if ( exists $args{'noinherit'}) {
        $query_params->{'noinherit'} = $self->{api_client}->to_query_value($args{'noinherit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreggetusers
#
# Lists the registrations for a specific session
# 
# @param string $token The authentication token. (required)
# @param string $eventid The event id to list sessions. (required)
# @param DateTime $sessiondate The date of the session to find. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The event id to list sessions.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date of the session to find.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreggetusers' } = { 
        summary => 'Lists the registrations for a specific session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreggetusers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreggetusers");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionreggetusers");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionreggetusers");
    }

    # parse inputs
    my $_resource_path = '/sessionreggetusers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreglistsessions
#
# List the sessions available for a specific event
# 
# @param string $token The authentication token. (required)
# @param string $eventid The event id to list sessions. (required)
# @param DateTime $sessiondate The date of the session to find. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The event id to list sessions.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date of the session to find.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreglistsessions' } = { 
        summary => 'List the sessions available for a specific event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreglistsessions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreglistsessions");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionreglistsessions");
    }

    # parse inputs
    my $_resource_path = '/sessionreglistsessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreglistupcoming
#
# View a list of upcoming event sessions
# 
# @param string $token The authentication token. (required)
# @param DateTime $date Only sessions in the week of the specified date will be returned. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'Only sessions in the week of the specified date will be returned.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreglistupcoming' } = { 
        summary => 'View a list of upcoming event sessions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreglistupcoming {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreglistupcoming");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling sessionreglistupcoming");
    }

    # parse inputs
    my $_resource_path = '/sessionreglistupcoming';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreglistupcomingevent
#
# View a list of upcoming sessions of a particular event
# 
# @param string $token The authentication token. (required)
# @param DateTime $date Start date to filter the returned sessions. (required)
# @param string $event The id of the event whose sessions will be returned (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'Start date to filter the returned sessions.',
        required => '1',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event whose sessions will be returned',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreglistupcomingevent' } = { 
        summary => 'View a list of upcoming sessions of a particular event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreglistupcomingevent {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreglistupcomingevent");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling sessionreglistupcomingevent");
    }

    # verify the required parameter 'event' is set
    unless (exists $args{'event'}) {
      croak("Missing the required parameter 'event' when calling sessionreglistupcomingevent");
    }

    # parse inputs
    my $_resource_path = '/sessionreglistupcomingevent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregremovecurrentuser
#
# Unregister current user from an event session
# 
# @param string $token The authentication token. (required)
# @param string $eventid The id of the event. (required)
# @param DateTime $sessiondate The date and time when the session starts. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregremovecurrentuser' } = { 
        summary => 'Unregister current user from an event session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregremovecurrentuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionregremovecurrentuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionregremovecurrentuser");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionregremovecurrentuser");
    }

    # parse inputs
    my $_resource_path = '/sessionregremovecurrentuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregremoveuser
#
# Removes a user from an event session
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
# @param string $eventid The id of the event. (required)
# @param DateTime $sessiondate The date and time when the session starts. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregremoveuser' } = { 
        summary => 'Removes a user from an event session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregremoveuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionregremoveuser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling sessionregremoveuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionregremoveuser");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionregremoveuser");
    }

    # parse inputs
    my $_resource_path = '/sessionregremoveuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregsavesettings
#
# Save the settings for an event's session registration
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregsavesettings' } = { 
        summary => 'Save the settings for an event&#39;s session registration',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregsavesettings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionregsavesettings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# settingaddlogo
#
# Add a logo to the account
# 
# @param string $token The authentication token. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The original filename, needed to process the file. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The original filename, needed to process the file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'settingaddlogo' } = { 
        summary => 'Add a logo to the account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub settingaddlogo {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling settingaddlogo");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling settingaddlogo");
    }

    # verify the required parameter 'filename' is set
    unless (exists $args{'filename'}) {
      croak("Missing the required parameter 'filename' when calling settingaddlogo");
    }

    # parse inputs
    my $_resource_path = '/settingaddlogo';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# settingget
#
# Get settings for the account or the specified scope
# 
# @param string $keys The option keys to get values for. Enter multiple separated by comma. (required)
# @param string $token The authentication token. (optional)
# @param string $domain The account domain, in case of reading settings annonymously. (optional)
# @param string $scope The scope of the settings to get. (optional)
{
    my $params = {
    'keys' => {
        data_type => 'string',
        description => 'The option keys to get values for. Enter multiple separated by comma.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'domain' => {
        data_type => 'string',
        description => 'The account domain, in case of reading settings annonymously.',
        required => '0',
    },
    'scope' => {
        data_type => 'string',
        description => 'The scope of the settings to get.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'settingget' } = { 
        summary => 'Get settings for the account or the specified scope',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub settingget {
    my ($self, %args) = @_;

    # verify the required parameter 'keys' is set
    unless (exists $args{'keys'}) {
      croak("Missing the required parameter 'keys' when calling settingget");
    }

    # parse inputs
    my $_resource_path = '/settingget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'keys'}) {
        $query_params->{'keys'} = $self->{api_client}->to_query_value($args{'keys'});
    }

    # query params
    if ( exists $args{'scope'}) {
        $query_params->{'scope'} = $self->{api_client}->to_query_value($args{'scope'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# settingsave
#
# Save settings for the account or the specified scope
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'settingsave' } = { 
        summary => 'Save settings for the account or the specified scope',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub settingsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/settingsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# settingviewgeneral
#
# View general settings for the account
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'settingviewgeneral' } = { 
        summary => 'View general settings for the account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub settingviewgeneral {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling settingviewgeneral");
    }

    # parse inputs
    my $_resource_path = '/settingviewgeneral';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ssogeneratekey
#
# Generate/reset single sign on access key.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssogeneratekey' } = { 
        summary => 'Generate/reset single sign on access key.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ssogeneratekey {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ssogeneratekey");
    }

    # parse inputs
    my $_resource_path = '/ssogeneratekey';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ssogetsettings
#
# View single sign on settings.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssogetsettings' } = { 
        summary => 'View single sign on settings.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ssogetsettings {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ssogetsettings");
    }

    # parse inputs
    my $_resource_path = '/ssogetsettings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ssoissuetoken
#
# Issue single sign-on token
# 
# @param string $key The single sign-on key of the account. (required)
# @param string $username The email of the user to sign-on. (required)
# @param boolean $expires Specifies whether the session should expire when inactive. (optional)
{
    my $params = {
    'key' => {
        data_type => 'string',
        description => 'The single sign-on key of the account.',
        required => '1',
    },
    'username' => {
        data_type => 'string',
        description => 'The email of the user to sign-on.',
        required => '1',
    },
    'expires' => {
        data_type => 'boolean',
        description => 'Specifies whether the session should expire when inactive.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssoissuetoken' } = { 
        summary => 'Issue single sign-on token',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ssoissuetoken {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling ssoissuetoken");
    }

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling ssoissuetoken");
    }

    # parse inputs
    my $_resource_path = '/ssoissuetoken';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'expires'}) {
        $query_params->{'expires'} = $self->{api_client}->to_query_value($args{'expires'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ssosavesettings
#
# Edit single sign-on settings.
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssosavesettings' } = { 
        summary => 'Edit single sign-on settings.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ssosavesettings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/ssosavesettings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationdelete
#
# Delete a sign-in station
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the sign-in station to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationdelete' } = { 
        summary => 'Delete a sign-in station',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling stationdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling stationdelete");
    }

    # parse inputs
    my $_resource_path = '/stationdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationget
#
# View details of a sign-in station
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the sign-in station to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationget' } = { 
        summary => 'View details of a sign-in station',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling stationget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling stationget");
    }

    # parse inputs
    my $_resource_path = '/stationget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationgetcurrentterms
#
# Get all the current terms
# 
# @param string $station The id of the sign-in station whose account&#39;s current terms have to be retrieved. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station whose account&#39;s current terms have to be retrieved.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationgetcurrentterms' } = { 
        summary => 'Get all the current terms',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationgetcurrentterms {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling stationgetcurrentterms");
    }

    # parse inputs
    my $_resource_path = '/stationgetcurrentterms';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationgetinfo
#
# Gets a the info to display in the sign-in station by it's ID.
# 
# @param string $id The id of the sign-in station to get. (required)
# @param string $event The id of the event, to override the one by schedule. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event, to override the one by schedule.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationgetinfo' } = { 
        summary => 'Gets a the info to display in the sign-in station by it&#39;s ID.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationgetinfo {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling stationgetinfo");
    }

    # parse inputs
    my $_resource_path = '/stationgetinfo';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationgetlicense
#
# Gets the current license information
# 
# @param string $station The id of the sign-in station whose account&#39;s license has to be retrieved. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station whose account&#39;s license has to be retrieved.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationgetlicense' } = { 
        summary => 'Gets the current license information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationgetlicense {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling stationgetlicense");
    }

    # parse inputs
    my $_resource_path = '/stationgetlicense';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationlist
#
# View a list of sign-in stations
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationlist' } = { 
        summary => 'View a list of sign-in stations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling stationlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling stationlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling stationlist");
    }

    # parse inputs
    my $_resource_path = '/stationlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationsave
#
# Create or edit a sign-in station
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationsave' } = { 
        summary => 'Create or edit a sign-in station',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/stationsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationunlock
#
# Unlocks the sign-in station.
# 
# @param string $id The id of the sign-in station to unlock. (required)
# @param string $passcode The passcode to unlock the station. (required)
# @param string $method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to unlock.',
        required => '1',
    },
    'passcode' => {
        data_type => 'string',
        description => 'The passcode to unlock the station.',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationunlock' } = { 
        summary => 'Unlocks the sign-in station.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationunlock {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling stationunlock");
    }

    # verify the required parameter 'passcode' is set
    unless (exists $args{'passcode'}) {
      croak("Missing the required parameter 'passcode' when calling stationunlock");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling stationunlock");
    }

    # parse inputs
    my $_resource_path = '/stationunlock';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'passcode'}) {
        $query_params->{'passcode'} = $self->{api_client}->to_query_value($args{'passcode'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipedelete
#
# Delete a swipe
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the swipe to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the swipe to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipedelete' } = { 
        summary => 'Delete a swipe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling swipedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling swipedelete");
    }

    # parse inputs
    my $_resource_path = '/swipedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipeget
#
# Search and view details of a swipe
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the swipe to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the swipe to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipeget' } = { 
        summary => 'Search and view details of a swipe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipeget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling swipeget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling swipeget");
    }

    # parse inputs
    my $_resource_path = '/swipeget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipelist
#
# View a list of swipes
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipelist' } = { 
        summary => 'View a list of swipes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipelist {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling swipelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling swipelist");
    }

    # parse inputs
    my $_resource_path = '/swipelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipesave
#
# Create or edit a swipe, and if possible, save the related attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipesave' } = { 
        summary => 'Create or edit a swipe, and if possible, save the related attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/swipesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipesaveanonym
#
# Creates a new swipe from a sign-in station, and if possible, creates the attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipesaveanonym' } = { 
        summary => 'Creates a new swipe from a sign-in station, and if possible, creates the attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipesaveanonym {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/swipesaveanonym';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tagdelete
#
# Delete a tag
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the tag to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the tag to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'tagdelete' } = { 
        summary => 'Delete a tag',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tagdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling tagdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling tagdelete");
    }

    # parse inputs
    my $_resource_path = '/tagdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tagget
#
# View details of a specified tag
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the tag to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the tag to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'tagget' } = { 
        summary => 'View details of a specified tag',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tagget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling tagget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling tagget");
    }

    # parse inputs
    my $_resource_path = '/tagget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# taglist
#
# View a list of tags
# 
# @param string $token The authentication token. (required)
# @param string $group The group of the tags to return. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'group' => {
        data_type => 'string',
        description => 'The group of the tags to return.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'taglist' } = { 
        summary => 'View a list of tags',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub taglist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling taglist");
    }

    # verify the required parameter 'group' is set
    unless (exists $args{'group'}) {
      croak("Missing the required parameter 'group' when calling taglist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling taglist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling taglist");
    }

    # parse inputs
    my $_resource_path = '/taglist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# taglistgroups
#
# View a list of entities that can be tagged
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'taglistgroups' } = { 
        summary => 'View a list of entities that can be tagged',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub taglistgroups {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling taglistgroups");
    }

    # parse inputs
    my $_resource_path = '/taglistgroups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tagsave
#
# Create or edit a tag
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'tagsave' } = { 
        summary => 'Create or edit a tag',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tagsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tagsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tagsearch
#
# Search for tags in the account
# 
# @param string $token The authentication token. (required)
# @param string $query The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory). (required)
# @param boolean $allowcreatingnew Specifies whether an option to create a new tag should be retrieved. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory).',
        required => '1',
    },
    'allowcreatingnew' => {
        data_type => 'boolean',
        description => 'Specifies whether an option to create a new tag should be retrieved.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'tagsearch' } = { 
        summary => 'Search for tags in the account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tagsearch {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling tagsearch");
    }

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling tagsearch");
    }

    # parse inputs
    my $_resource_path = '/tagsearch';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'allowcreatingnew'}) {
        $query_params->{'allowcreatingnew'} = $self->{api_client}->to_query_value($args{'allowcreatingnew'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templateaddimage
#
# Add an image to a template
# 
# @param string $token The authentication token. (required)
# @param string $template The id of the template where the image has to be added (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'template' => {
        data_type => 'string',
        description => 'The id of the template where the image has to be added',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templateaddimage' } = { 
        summary => 'Add an image to a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templateaddimage {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templateaddimage");
    }

    # verify the required parameter 'template' is set
    unless (exists $args{'template'}) {
      croak("Missing the required parameter 'template' when calling templateaddimage");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling templateaddimage");
    }

    # parse inputs
    my $_resource_path = '/templateaddimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'template'}) {
        $query_params->{'template'} = $self->{api_client}->to_query_value($args{'template'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatedelete
#
# Delete a template
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the template to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the template to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatedelete' } = { 
        summary => 'Delete a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templatedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling templatedelete");
    }

    # parse inputs
    my $_resource_path = '/templatedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templateemail
#
# Send generated templates by email
# 
# @param string $token The authentication token. (required)
# @param string $jobid The id of the job that is creating the templates. (required)
# @param string $emailsubject Args depending on the send-to flag. (required)
# @param string $emailbody Args depending on the send-to flag. (required)
# @param string $templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
# @param string $emailfrom The name of the sender to be displayed in the receipients inbox (optional)
# @param string $emailreplyto The reply-to field for the emails. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'jobid' => {
        data_type => 'string',
        description => 'The id of the job that is creating the templates.',
        required => '1',
    },
    'emailsubject' => {
        data_type => 'string',
        description => 'Args depending on the send-to flag.',
        required => '1',
    },
    'emailbody' => {
        data_type => 'string',
        description => 'Args depending on the send-to flag.',
        required => '1',
    },
    'templatekind' => {
        data_type => 'string',
        description => 'The kind of the template you&#39;re sending. It must be included in (badge, certificate).',
        required => '0',
    },
    'emailfrom' => {
        data_type => 'string',
        description => 'The name of the sender to be displayed in the receipients inbox',
        required => '0',
    },
    'emailreplyto' => {
        data_type => 'string',
        description => 'The reply-to field for the emails.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templateemail' } = { 
        summary => 'Send generated templates by email',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templateemail {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templateemail");
    }

    # verify the required parameter 'jobid' is set
    unless (exists $args{'jobid'}) {
      croak("Missing the required parameter 'jobid' when calling templateemail");
    }

    # verify the required parameter 'emailsubject' is set
    unless (exists $args{'emailsubject'}) {
      croak("Missing the required parameter 'emailsubject' when calling templateemail");
    }

    # verify the required parameter 'emailbody' is set
    unless (exists $args{'emailbody'}) {
      croak("Missing the required parameter 'emailbody' when calling templateemail");
    }

    # parse inputs
    my $_resource_path = '/templateemail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    # query params
    if ( exists $args{'templatekind'}) {
        $query_params->{'templatekind'} = $self->{api_client}->to_query_value($args{'templatekind'});
    }

    # query params
    if ( exists $args{'emailfrom'}) {
        $query_params->{'emailfrom'} = $self->{api_client}->to_query_value($args{'emailfrom'});
    }

    # query params
    if ( exists $args{'emailreplyto'}) {
        $query_params->{'emailreplyto'} = $self->{api_client}->to_query_value($args{'emailreplyto'});
    }

    # query params
    if ( exists $args{'emailsubject'}) {
        $query_params->{'emailsubject'} = $self->{api_client}->to_query_value($args{'emailsubject'});
    }

    # query params
    if ( exists $args{'emailbody'}) {
        $query_params->{'emailbody'} = $self->{api_client}->to_query_value($args{'emailbody'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templategenerate
#
# Generate specified templates
# 
# @param string $token The authentication token. (required)
# @param string $template The id of the template to generate. (required)
# @param string $source The source key of the selected template data source. (required)
# @param boolean $singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
# @param string $userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
# @param boolean $forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
# @param string $role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
# @param string $filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'template' => {
        data_type => 'string',
        description => 'The id of the template to generate.',
        required => '1',
    },
    'source' => {
        data_type => 'string',
        description => 'The source key of the selected template data source.',
        required => '1',
    },
    'singlefile' => {
        data_type => 'boolean',
        description => 'True if all the templates should be placed in the same file, false if each one shoud be in its own file.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.',
        required => '0',
    },
    'forsending' => {
        data_type => 'boolean',
        description => 'It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading',
        required => '0',
    },
    'role' => {
        data_type => 'string',
        description => 'When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor',
        required => '0',
    },
    'filters' => {
        data_type => 'string',
        description => 'Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templategenerate' } = { 
        summary => 'Generate specified templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templategenerate {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templategenerate");
    }

    # verify the required parameter 'template' is set
    unless (exists $args{'template'}) {
      croak("Missing the required parameter 'template' when calling templategenerate");
    }

    # verify the required parameter 'source' is set
    unless (exists $args{'source'}) {
      croak("Missing the required parameter 'source' when calling templategenerate");
    }

    # verify the required parameter 'singlefile' is set
    unless (exists $args{'singlefile'}) {
      croak("Missing the required parameter 'singlefile' when calling templategenerate");
    }

    # parse inputs
    my $_resource_path = '/templategenerate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'template'}) {
        $query_params->{'template'} = $self->{api_client}->to_query_value($args{'template'});
    }

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'singlefile'}) {
        $query_params->{'singlefile'} = $self->{api_client}->to_query_value($args{'singlefile'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'forsending'}) {
        $query_params->{'forsending'} = $self->{api_client}->to_query_value($args{'forsending'});
    }

    # query params
    if ( exists $args{'role'}) {
        $query_params->{'role'} = $self->{api_client}->to_query_value($args{'role'});
    }

    # query params
    if ( exists $args{'filters'}) {
        $query_params->{'filters'} = $self->{api_client}->to_query_value($args{'filters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templateget
#
# View details of a template
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the template to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the template to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'templateget' } = { 
        summary => 'View details of a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templateget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templateget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling templateget");
    }

    # parse inputs
    my $_resource_path = '/templateget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templategetgenerated
#
# View generated templates
# 
# @param string $token The authentication token. (required)
# @param string $jobid The id of the job that is creating the templates. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'jobid' => {
        data_type => 'string',
        description => 'The id of the job that is creating the templates.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'templategetgenerated' } = { 
        summary => 'View generated templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templategetgenerated {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templategetgenerated");
    }

    # verify the required parameter 'jobid' is set
    unless (exists $args{'jobid'}) {
      croak("Missing the required parameter 'jobid' when calling templategetgenerated");
    }

    # parse inputs
    my $_resource_path = '/templategetgenerated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatelist
#
# View a list of defined templates
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $kind The kind of the templates to return. It must be included in (badge, certificate). (required)
# @param boolean $designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'kind' => {
        data_type => 'string',
        description => 'The kind of the templates to return. It must be included in (badge, certificate).',
        required => '1',
    },
    'designedonly' => {
        data_type => 'boolean',
        description => 'If true then it only returns the templates that were designed. Otherwise, it returns all.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatelist' } = { 
        summary => 'View a list of defined templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templatelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling templatelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling templatelist");
    }

    # verify the required parameter 'kind' is set
    unless (exists $args{'kind'}) {
      croak("Missing the required parameter 'kind' when calling templatelist");
    }

    # parse inputs
    my $_resource_path = '/templatelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    # query params
    if ( exists $args{'designedonly'}) {
        $query_params->{'designedonly'} = $self->{api_client}->to_query_value($args{'designedonly'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatelistsources
#
# View a list of templates' data sources
# 
# @param string $token The authentication token. (required)
# @param string $kind The kind of the templates to return. It must be included in (badge, certificate). (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'kind' => {
        data_type => 'string',
        description => 'The kind of the templates to return. It must be included in (badge, certificate).',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatelistsources' } = { 
        summary => 'View a list of templates&#39; data sources',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatelistsources {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templatelistsources");
    }

    # verify the required parameter 'kind' is set
    unless (exists $args{'kind'}) {
      croak("Missing the required parameter 'kind' when calling templatelistsources");
    }

    # parse inputs
    my $_resource_path = '/templatelistsources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatesave
#
# Create or edit a template
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatesave' } = { 
        summary => 'Create or edit a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/templatesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatesavelayout
#
# Save the layout of a template
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatesavelayout' } = { 
        summary => 'Save the layout of a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatesavelayout {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/templatesavelayout';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# termdelete
#
# Delete a term
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the term to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the term to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'termdelete' } = { 
        summary => 'Delete a term',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub termdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling termdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling termdelete");
    }

    # parse inputs
    my $_resource_path = '/termdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# termget
#
# Search and view details of a term
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the term to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the term to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'termget' } = { 
        summary => 'Search and view details of a term',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub termget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling termget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling termget");
    }

    # parse inputs
    my $_resource_path = '/termget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# termlist
#
# Search and view details of all terms
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (optional)
# @param int $count The max number of records to return. (optional)
# @param boolean $notpast Specifies whether the terms in the past should be returned or not. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '0',
    },
    'notpast' => {
        data_type => 'boolean',
        description => 'Specifies whether the terms in the past should be returned or not.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'termlist' } = { 
        summary => 'Search and view details of all terms',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub termlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling termlist");
    }

    # parse inputs
    my $_resource_path = '/termlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'notpast'}) {
        $query_params->{'notpast'} = $self->{api_client}->to_query_value($args{'notpast'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# termsave
#
# Create and edit terms
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'termsave' } = { 
        summary => 'Create and edit terms',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub termsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/termsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# textcreditremaining
#
# Gets the remaining text credits for the account
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'textcreditremaining' } = { 
        summary => 'Gets the remaining text credits for the account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub textcreditremaining {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling textcreditremaining");
    }

    # parse inputs
    my $_resource_path = '/textcreditremaining';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# texttoimage
#
# Generates a dynamic image from text
# 
# @param string $token The authentication token. (required)
# @param string $text The text to convert to an image, use double pipes (||) as a new line. (required)
# @param string $fontcolor The color of the text, in hex format, without the #. (optional)
# @param int $fontsize The size of the text, in points. (optional)
# @param string $direction Either vertical or horizontal, default horizontal. (optional)
# @param int $width The image width in pixels (or height if the direction is vertical). (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'text' => {
        data_type => 'string',
        description => 'The text to convert to an image, use double pipes (||) as a new line.',
        required => '1',
    },
    'fontcolor' => {
        data_type => 'string',
        description => 'The color of the text, in hex format, without the #.',
        required => '0',
    },
    'fontsize' => {
        data_type => 'int',
        description => 'The size of the text, in points.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Either vertical or horizontal, default horizontal.',
        required => '0',
    },
    'width' => {
        data_type => 'int',
        description => 'The image width in pixels (or height if the direction is vertical).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'texttoimage' } = { 
        summary => 'Generates a dynamic image from text',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub texttoimage {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling texttoimage");
    }

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling texttoimage");
    }

    # parse inputs
    my $_resource_path = '/texttoimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'fontcolor'}) {
        $query_params->{'fontcolor'} = $self->{api_client}->to_query_value($args{'fontcolor'});
    }

    # query params
    if ( exists $args{'fontsize'}) {
        $query_params->{'fontsize'} = $self->{api_client}->to_query_value($args{'fontsize'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'width'}) {
        $query_params->{'width'} = $self->{api_client}->to_query_value($args{'width'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translationget
#
# Gets the translations of the specified values
# 
# @param string $token The authentication token. (required)
# @param string $universal Pipe separated list of universal text to be translated. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'universal' => {
        data_type => 'string',
        description => 'Pipe separated list of universal text to be translated.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'translationget' } = { 
        summary => 'Gets the translations of the specified values',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translationget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling translationget");
    }

    # verify the required parameter 'universal' is set
    unless (exists $args{'universal'}) {
      croak("Missing the required parameter 'universal' when calling translationget");
    }

    # parse inputs
    my $_resource_path = '/translationget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'universal'}) {
        $query_params->{'universal'} = $self->{api_client}->to_query_value($args{'universal'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translationgetcachefile
#
# Get the file containing the translations
# 
# @param string $token The authentication token. (optional)
# @param string $account The id of the account whose translations file has to be retrieved. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'account' => {
        data_type => 'string',
        description => 'The id of the account whose translations file has to be retrieved.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translationgetcachefile' } = { 
        summary => 'Get the file containing the translations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translationgetcachefile {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/translationgetcachefile';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'account'}) {
        $query_params->{'account'} = $self->{api_client}->to_query_value($args{'account'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translationlist
#
# Lists all the available translations in the system
# 
# @param string $token The authentication token. (required)
# @param string $filter Text to search/filter translations. (optional)
# @param boolean $nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all. (optional)
# @param boolean $appdefaultasuniversal If true then it uses the app default translation as the universal term. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Text to search/filter translations.',
        required => '0',
    },
    'nondefaultonly' => {
        data_type => 'boolean',
        description => 'If true then it returns only the terms translated. Otherwise, it returns all.',
        required => '0',
    },
    'appdefaultasuniversal' => {
        data_type => 'boolean',
        description => 'If true then it uses the app default translation as the universal term.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translationlist' } = { 
        summary => 'Lists all the available translations in the system',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translationlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling translationlist");
    }

    # parse inputs
    my $_resource_path = '/translationlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'nondefaultonly'}) {
        $query_params->{'nondefaultonly'} = $self->{api_client}->to_query_value($args{'nondefaultonly'});
    }

    # query params
    if ( exists $args{'appdefaultasuniversal'}) {
        $query_params->{'appdefaultasuniversal'} = $self->{api_client}->to_query_value($args{'appdefaultasuniversal'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translationsave
#
# Edit a translation
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translationsave' } = { 
        summary => 'Edit a translation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translationsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/translationsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userchangepwd
#
# Change user's own password
# 
# @param string $token The authentication token. (required)
# @param string $oldpass The old password of the authenticated user. (required)
# @param string $newpass The new password of the authenticated user. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'oldpass' => {
        data_type => 'string',
        description => 'The old password of the authenticated user.',
        required => '1',
    },
    'newpass' => {
        data_type => 'string',
        description => 'The new password of the authenticated user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userchangepwd' } = { 
        summary => 'Change user&#39;s own password',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userchangepwd {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userchangepwd");
    }

    # verify the required parameter 'oldpass' is set
    unless (exists $args{'oldpass'}) {
      croak("Missing the required parameter 'oldpass' when calling userchangepwd");
    }

    # verify the required parameter 'newpass' is set
    unless (exists $args{'newpass'}) {
      croak("Missing the required parameter 'newpass' when calling userchangepwd");
    }

    # parse inputs
    my $_resource_path = '/userchangepwd';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'oldpass'}) {
        $query_params->{'oldpass'} = $self->{api_client}->to_query_value($args{'oldpass'});
    }

    # query params
    if ( exists $args{'newpass'}) {
        $query_params->{'newpass'} = $self->{api_client}->to_query_value($args{'newpass'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userchangepwdbyreq
#
# Changes the user password using a change password request id
# 
# @param string $changereq The change password request ID sent by email to the user. (required)
# @param string $newpass The new password of the user. (required)
{
    my $params = {
    'changereq' => {
        data_type => 'string',
        description => 'The change password request ID sent by email to the user.',
        required => '1',
    },
    'newpass' => {
        data_type => 'string',
        description => 'The new password of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userchangepwdbyreq' } = { 
        summary => 'Changes the user password using a change password request id',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userchangepwdbyreq {
    my ($self, %args) = @_;

    # verify the required parameter 'changereq' is set
    unless (exists $args{'changereq'}) {
      croak("Missing the required parameter 'changereq' when calling userchangepwdbyreq");
    }

    # verify the required parameter 'newpass' is set
    unless (exists $args{'newpass'}) {
      croak("Missing the required parameter 'newpass' when calling userchangepwdbyreq");
    }

    # parse inputs
    my $_resource_path = '/userchangepwdbyreq';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'changereq'}) {
        $query_params->{'changereq'} = $self->{api_client}->to_query_value($args{'changereq'});
    }

    # query params
    if ( exists $args{'newpass'}) {
        $query_params->{'newpass'} = $self->{api_client}->to_query_value($args{'newpass'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userdelete
#
# Delete a user
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the user to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the user to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userdelete' } = { 
        summary => 'Delete a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling userdelete");
    }

    # parse inputs
    my $_resource_path = '/userdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userfindsimilar
#
# Finds similar users to prevent duplicates
# 
# @param string $token The authentication token. (required)
# @param string $currentid The id of the current user. (optional)
# @param string $phonenumber A phone number to search for similar users. (optional)
# @param string $cardnumber A card number to search for similar users. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'currentid' => {
        data_type => 'string',
        description => 'The id of the current user.',
        required => '0',
    },
    'phonenumber' => {
        data_type => 'string',
        description => 'A phone number to search for similar users.',
        required => '0',
    },
    'cardnumber' => {
        data_type => 'string',
        description => 'A card number to search for similar users.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userfindsimilar' } = { 
        summary => 'Finds similar users to prevent duplicates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userfindsimilar {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userfindsimilar");
    }

    # parse inputs
    my $_resource_path = '/userfindsimilar';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'currentid'}) {
        $query_params->{'currentid'} = $self->{api_client}->to_query_value($args{'currentid'});
    }

    # query params
    if ( exists $args{'phonenumber'}) {
        $query_params->{'phonenumber'} = $self->{api_client}->to_query_value($args{'phonenumber'});
    }

    # query params
    if ( exists $args{'cardnumber'}) {
        $query_params->{'cardnumber'} = $self->{api_client}->to_query_value($args{'cardnumber'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userget
#
# Search and view details of a user
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the user to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the user to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userget' } = { 
        summary => 'Search and view details of a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling userget");
    }

    # parse inputs
    my $_resource_path = '/userget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergetbycard
#
# Search user by card number
# 
# @param string $token The authentication token. (required)
# @param string $card The card number of the user to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'card' => {
        data_type => 'string',
        description => 'The card number of the user to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergetbycard' } = { 
        summary => 'Search user by card number',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergetbycard {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergetbycard");
    }

    # verify the required parameter 'card' is set
    unless (exists $args{'card'}) {
      croak("Missing the required parameter 'card' when calling usergetbycard");
    }

    # parse inputs
    my $_resource_path = '/usergetbycard';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'card'}) {
        $query_params->{'card'} = $self->{api_client}->to_query_value($args{'card'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupaddmember
#
# Add a user to a group
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
# @param string $groupid The id of the group. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the group.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupaddmember' } = { 
        summary => 'Add a user to a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupaddmember {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupaddmember");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroupaddmember");
    }

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroupaddmember");
    }

    # parse inputs
    my $_resource_path = '/usergroupaddmember';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupdelete
#
# Delete a group
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the group to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the group to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupdelete' } = { 
        summary => 'Delete a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling usergroupdelete");
    }

    # parse inputs
    my $_resource_path = '/usergroupdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupget
#
# Search and view details of a user group
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the user group to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the user group to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupget' } = { 
        summary => 'Search and view details of a user group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling usergroupget");
    }

    # parse inputs
    my $_resource_path = '/usergroupget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupgetmembers
#
# View the members of a user group
# 
# @param string $token The authentication token. (required)
# @param string $groupid The id of the user group to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the user group to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupgetmembers' } = { 
        summary => 'View the members of a user group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupgetmembers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupgetmembers");
    }

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroupgetmembers");
    }

    # parse inputs
    my $_resource_path = '/usergroupgetmembers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupgetuser
#
# View the groups which a user is registered to
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to get his groups. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to get his groups.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupgetuser' } = { 
        summary => 'View the groups which a user is registered to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupgetuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupgetuser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroupgetuser");
    }

    # parse inputs
    my $_resource_path = '/usergroupgetuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergrouplist
#
# View a list of user groups
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (optional)
# @param int $count The max number of records to return. (optional)
# @param string $type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergrouplist' } = { 
        summary => 'View a list of user groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergrouplist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergrouplist");
    }

    # parse inputs
    my $_resource_path = '/usergrouplist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergrouprefresh
#
# Refresh the dynamic group
# 
# @param string $token The authentication token. (required)
# @param string $group The ID of the group to refresh. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'group' => {
        data_type => 'string',
        description => 'The ID of the group to refresh.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergrouprefresh' } = { 
        summary => 'Refresh the dynamic group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergrouprefresh {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergrouprefresh");
    }

    # verify the required parameter 'group' is set
    unless (exists $args{'group'}) {
      croak("Missing the required parameter 'group' when calling usergrouprefresh");
    }

    # parse inputs
    my $_resource_path = '/usergrouprefresh';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupremovemember
#
# Remove a user from a group
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
# @param string $groupid The id of the group. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the group.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupremovemember' } = { 
        summary => 'Remove a user from a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupremovemember {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupremovemember");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroupremovemember");
    }

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroupremovemember");
    }

    # parse inputs
    my $_resource_path = '/usergroupremovemember';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupsave
#
# Create or edit a group
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupsave' } = { 
        summary => 'Create or edit a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usergroupsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userlist
#
# View a list of users
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $roleid The id of the role to filter users by, or empty to return all users. (optional)
# @param string $onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role to filter users by, or empty to return all users.',
        required => '0',
    },
    'onlywithoutcard' => {
        data_type => 'string',
        description => 'If is 1 then only the users without a card are returned, otherwise all users are returned.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userlist' } = { 
        summary => 'View a list of users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling userlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling userlist");
    }

    # parse inputs
    my $_resource_path = '/userlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    # query params
    if ( exists $args{'onlywithoutcard'}) {
        $query_params->{'onlywithoutcard'} = $self->{api_client}->to_query_value($args{'onlywithoutcard'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userloadphoto
#
# Upload a photo for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
# @param string $userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
# @param boolean $automatch Set this to true to find the specific user based on the file name.  (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.',
        required => '0',
    },
    'automatch' => {
        data_type => 'boolean',
        description => 'Set this to true to find the specific user based on the file name. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userloadphoto' } = { 
        summary => 'Upload a photo for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userloadphoto {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userloadphoto");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling userloadphoto");
    }

    # parse inputs
    my $_resource_path = '/userloadphoto';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'automatch'}) {
        $query_params->{'automatch'} = $self->{api_client}->to_query_value($args{'automatch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usermovedata
#
# Move data between users
# 
# @param string $token The authentication token. (required)
# @param string $source The id of the user that is the source of the data. (required)
# @param string $destination The id of the user that is the destination of the data. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'source' => {
        data_type => 'string',
        description => 'The id of the user that is the source of the data.',
        required => '1',
    },
    'destination' => {
        data_type => 'string',
        description => 'The id of the user that is the destination of the data.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usermovedata' } = { 
        summary => 'Move data between users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usermovedata {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usermovedata");
    }

    # verify the required parameter 'source' is set
    unless (exists $args{'source'}) {
      croak("Missing the required parameter 'source' when calling usermovedata");
    }

    # verify the required parameter 'destination' is set
    unless (exists $args{'destination'}) {
      croak("Missing the required parameter 'destination' when calling usermovedata");
    }

    # parse inputs
    my $_resource_path = '/usermovedata';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'destination'}) {
        $query_params->{'destination'} = $self->{api_client}->to_query_value($args{'destination'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userrequestpwdchange
#
# Requests a password change
# 
# @param string $domain The domain of the account where the user exists. (required)
# @param string $email The email of the user. (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'The domain of the account where the user exists.',
        required => '1',
    },
    'email' => {
        data_type => 'string',
        description => 'The email of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userrequestpwdchange' } = { 
        summary => 'Requests a password change',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userrequestpwdchange {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling userrequestpwdchange");
    }

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling userrequestpwdchange");
    }

    # parse inputs
    my $_resource_path = '/userrequestpwdchange';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'email'}) {
        $query_params->{'email'} = $self->{api_client}->to_query_value($args{'email'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersave
#
# Create or edit a user
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersave' } = { 
        summary => 'Create or edit a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usersave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersavepwdchange
#
# Send email to the specified user(s) to set/change their passwords
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersavepwdchange' } = { 
        summary => 'Send email to the specified user(s) to set/change their passwords',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersavepwdchange {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usersavepwdchange';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersettingsget
#
# Lists available user settings
# 
# @param string $token The authentication token. (required)
# @param string $keys Setting key to get. Can be multiple separated by commas. (required)
# @param string $user The user id whose settings have to be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'keys' => {
        data_type => 'string',
        description => 'Setting key to get. Can be multiple separated by commas.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The user id whose settings have to be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersettingsget' } = { 
        summary => 'Lists available user settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersettingsget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usersettingsget");
    }

    # verify the required parameter 'keys' is set
    unless (exists $args{'keys'}) {
      croak("Missing the required parameter 'keys' when calling usersettingsget");
    }

    # parse inputs
    my $_resource_path = '/usersettingsget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'keys'}) {
        $query_params->{'keys'} = $self->{api_client}->to_query_value($args{'keys'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersettingsgetmultiple
#
# Get multiple user settings
# 
# @param string $token The authentication token. (required)
# @param string $keys Setting key to get. Can be multiple separated by commas. (required)
# @param string $user The user id whose settings have to be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'keys' => {
        data_type => 'string',
        description => 'Setting key to get. Can be multiple separated by commas.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The user id whose settings have to be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersettingsgetmultiple' } = { 
        summary => 'Get multiple user settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersettingsgetmultiple {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usersettingsgetmultiple");
    }

    # verify the required parameter 'keys' is set
    unless (exists $args{'keys'}) {
      croak("Missing the required parameter 'keys' when calling usersettingsgetmultiple");
    }

    # parse inputs
    my $_resource_path = '/usersettingsgetmultiple';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'keys'}) {
        $query_params->{'keys'} = $self->{api_client}->to_query_value($args{'keys'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersettingssave
#
# Saves a user setting
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersettingssave' } = { 
        summary => 'Saves a user setting',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersettingssave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usersettingssave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersettingssavemultiple
#
# Save multiple user settings at once
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersettingssavemultiple' } = { 
        summary => 'Save multiple user settings at once',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersettingssavemultiple {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usersettingssavemultiple';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# version
#
# Get current version information
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'version' } = { 
        summary => 'Get current version information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub version {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling version");
    }

    # parse inputs
    my $_resource_path = '/version';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
