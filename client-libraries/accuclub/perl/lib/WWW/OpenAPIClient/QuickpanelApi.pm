=begin comment

AccuClub OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::QuickpanelApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# quickpanel_deletewidget
#
# Deletes a widget from the Quick Panel
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanel_deletewidget' } = { 
        summary => 'Deletes a widget from the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanel_deletewidget {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/quickpanel/deletewidget';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanel_fetchwidget
#
# Fetches the information for a specific widget.
# 
# @param string $widgetid The ID of the data to fetch it&#39;s data. (required)
{
    my $params = {
    'widgetid' => {
        data_type => 'string',
        description => 'The ID of the data to fetch it&#39;s data.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanel_fetchwidget' } = { 
        summary => 'Fetches the information for a specific widget.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanel_fetchwidget {
    my ($self, %args) = @_;

    # verify the required parameter 'widgetid' is set
    unless (exists $args{'widgetid'}) {
      croak("Missing the required parameter 'widgetid' when calling quickpanel_fetchwidget");
    }

    # parse inputs
    my $_resource_path = '/quickpanel/fetchwidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'widgetid'}) {
        $query_params->{'widgetid'} = $self->{api_client}->to_query_value($args{'widgetid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanel_getwidget
#
# View details of a widget included in the Quick Panel
# 
# @param string $id The id of the widget to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the widget to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanel_getwidget' } = { 
        summary => 'View details of a widget included in the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanel_getwidget {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling quickpanel_getwidget");
    }

    # parse inputs
    my $_resource_path = '/quickpanel/getwidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanel_init
#
# Returns the initial information required to show the quick panels
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'quickpanel_init' } = { 
        summary => 'Returns the initial information required to show the quick panels',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanel_init {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/quickpanel/init';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanel_listwidgets
#
# Lists all the widgets that are added in the Quick Panel
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'quickpanel_listwidgets' } = { 
        summary => 'Lists all the widgets that are added in the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanel_listwidgets {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/quickpanel/listwidgets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanel_listwidgettypes
#
# Lists all the widget types available in the system
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'quickpanel_listwidgettypes' } = { 
        summary => 'Lists all the widget types available in the system',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanel_listwidgettypes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/quickpanel/listwidgettypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanel_reorderwidgets
#
# Reorders the widgets and moves them to a specific column
# 
# @param string $sectionname The section name where to sort the widgets. (required)
# @param string $orderids CSV list of the widgets to reorder. (required)
{
    my $params = {
    'sectionname' => {
        data_type => 'string',
        description => 'The section name where to sort the widgets.',
        required => '1',
    },
    'orderids' => {
        data_type => 'string',
        description => 'CSV list of the widgets to reorder.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanel_reorderwidgets' } = { 
        summary => 'Reorders the widgets and moves them to a specific column',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanel_reorderwidgets {
    my ($self, %args) = @_;

    # verify the required parameter 'sectionname' is set
    unless (exists $args{'sectionname'}) {
      croak("Missing the required parameter 'sectionname' when calling quickpanel_reorderwidgets");
    }

    # verify the required parameter 'orderids' is set
    unless (exists $args{'orderids'}) {
      croak("Missing the required parameter 'orderids' when calling quickpanel_reorderwidgets");
    }

    # parse inputs
    my $_resource_path = '/quickpanel/reorderwidgets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'sectionname'}) {
        $query_params->{'sectionname'} = $self->{api_client}->to_query_value($args{'sectionname'});
    }

    # query params
    if ( exists $args{'orderids'}) {
        $query_params->{'orderids'} = $self->{api_client}->to_query_value($args{'orderids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanel_savewidget
#
# Saves a widget for the Quick Panel
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanel_savewidget' } = { 
        summary => 'Saves a widget for the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanel_savewidget {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/quickpanel/savewidget';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
