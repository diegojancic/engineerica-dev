/**
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Station service.
* @module api/StationApi
* @version 1.0.0
*/
export default class StationApi {

    /**
    * Constructs a new StationApi. 
    * @alias module:api/StationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the stationDelete operation.
     * @callback module:api/StationApi~stationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a sign-in station
     * Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
     * @param {String} id The id of the sign-in station to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/StationApi~stationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/station/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationGet operation.
     * @callback module:api/StationApi~stationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a sign-in station
     * Allows the user to view an individual sign-in station and its details.
     * @param {String} id The id of the sign-in station to get.
     * @param {module:api/StationApi~stationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/station/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationGetcurrentterms operation.
     * @callback module:api/StationApi~stationGetcurrenttermsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the current terms
     * @param {String} station The id of the sign-in station whose account's current terms have to be retrieved.
     * @param {module:api/StationApi~stationGetcurrenttermsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationGetcurrentterms(station, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling stationGetcurrentterms");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/station/getcurrentterms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationGetinfo operation.
     * @callback module:api/StationApi~stationGetinfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a the info to display in the sign-in station by it's ID.
     * @param {String} id The id of the sign-in station to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.event The id of the event, to override the one by schedule.
     * @param {module:api/StationApi~stationGetinfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationGetinfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationGetinfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'event': opts['event']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/station/getinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationGetlicense operation.
     * @callback module:api/StationApi~stationGetlicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current license information
     * @param {String} station The id of the sign-in station whose account's license has to be retrieved.
     * @param {module:api/StationApi~stationGetlicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationGetlicense(station, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling stationGetlicense");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/station/getlicense', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationList operation.
     * @callback module:api/StationApi~stationListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of sign-in stations
     * Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/StationApi~stationListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationList(from, count, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling stationList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling stationList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/station/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationSave operation.
     * @callback module:api/StationApi~stationSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a sign-in station
     * Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
     * @param {String} id The id of the sign-in station to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/StationApi~stationSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/station/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationUnlock operation.
     * @callback module:api/StationApi~stationUnlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlocks the sign-in station.
     * @param {String} id The id of the sign-in station to unlock.
     * @param {String} passcode The passcode to unlock the station.
     * @param {String} method The authentication method. Valid values are 'token' and 'cookie'.
     * @param {module:api/StationApi~stationUnlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationUnlock(id, passcode, method, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationUnlock");
      }
      // verify the required parameter 'passcode' is set
      if (passcode === undefined || passcode === null) {
        throw new Error("Missing the required parameter 'passcode' when calling stationUnlock");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling stationUnlock");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'passcode': passcode,
        'method': method
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/station/unlock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
