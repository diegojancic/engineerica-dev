/**
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Advrole service.
* @module api/AdvroleApi
* @version 1.0.0
*/
export default class AdvroleApi {

    /**
    * Constructs a new AdvroleApi. 
    * @alias module:api/AdvroleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the advroleAddmissing operation.
     * @callback module:api/AdvroleApi~advroleAddmissingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the missing permissions to a role. Requires access to advrole.save
     * @param {String} roles CSV list of the role ids to check
     * @param {String} permissions CSV list of the permissions to check
     * @param {module:api/AdvroleApi~advroleAddmissingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleAddmissing(roles, permissions, callback) {
      let postBody = null;
      // verify the required parameter 'roles' is set
      if (roles === undefined || roles === null) {
        throw new Error("Missing the required parameter 'roles' when calling advroleAddmissing");
      }
      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling advroleAddmissing");
      }

      let pathParams = {
      };
      let queryParams = {
        'roles': roles,
        'permissions': permissions
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/addmissing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleCheckperm operation.
     * @callback module:api/AdvroleApi~advroleCheckpermCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the permissions are assigned for the given roles
     * @param {String} roles CSV list of the role ids to check
     * @param {String} permissions CSV list of the permissions to check
     * @param {module:api/AdvroleApi~advroleCheckpermCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleCheckperm(roles, permissions, callback) {
      let postBody = null;
      // verify the required parameter 'roles' is set
      if (roles === undefined || roles === null) {
        throw new Error("Missing the required parameter 'roles' when calling advroleCheckperm");
      }
      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling advroleCheckperm");
      }

      let pathParams = {
      };
      let queryParams = {
        'roles': roles,
        'permissions': permissions
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/checkperm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleDelete operation.
     * @callback module:api/AdvroleApi~advroleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * Allows the user to delete a role from the list of available roles.
     * @param {String} id The id of the location to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/AdvroleApi~advroleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advroleDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleDeletemapping operation.
     * @callback module:api/AdvroleApi~advroleDeletemappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role mapping
     * Allows the user to delete a role from its mapped categories on the 'Role Mapping' page.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/AdvroleApi~advroleDeletemappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleDeletemapping(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/deletemapping', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleGet operation.
     * @callback module:api/AdvroleApi~advroleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a role
     * Allows the user to view a role and its details.
     * @param {String} id The id of the location to get.
     * @param {module:api/AdvroleApi~advroleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advroleGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleList operation.
     * @callback module:api/AdvroleApi~advroleListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the roles for the current account
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includepolicies True to include the policies, defaults to false.
     * @param {Boolean} opts.includeinternal True to include the internal roles too.
     * @param {String} opts.name Filter by name of the role.
     * @param {module:api/AdvroleApi~advroleListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includepolicies': opts['includepolicies'],
        'includeinternal': opts['includeinternal'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleListmaps operation.
     * @callback module:api/AdvroleApi~advroleListmapsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the maps a roles is mapped to
     * @param {String} roleid The id of the role to list the maps.
     * @param {module:api/AdvroleApi~advroleListmapsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleListmaps(roleid, callback) {
      let postBody = null;
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling advroleListmaps");
      }

      let pathParams = {
      };
      let queryParams = {
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/listmaps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleListrolesmapped operation.
     * @callback module:api/AdvroleApi~advroleListrolesmappedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the roles mappings
     * @param {Object} opts Optional parameters
     * @param {String} opts.map List only the roles in the specified map.
     * @param {module:api/AdvroleApi~advroleListrolesmappedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleListrolesmapped(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'map': opts['map']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/listrolesmapped', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleListtemplates operation.
     * @callback module:api/AdvroleApi~advroleListtemplatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of role templates
     * Allows the user to view the full list of available role templates.
     * @param {module:api/AdvroleApi~advroleListtemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleListtemplates(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/listtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleSave operation.
     * @callback module:api/AdvroleApi~advroleSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a role
     * Allows the user to create or edit a role's permissions.
     * @param {String} id The id of the role to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/AdvroleApi~advroleSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advroleSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleSavemapping operation.
     * @callback module:api/AdvroleApi~advroleSavemappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a role mapping
     * Allows the user to add a role to a mapped category on the 'Role Mapping' page.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/AdvroleApi~advroleSavemappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleSavemapping(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/savemapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleUserupgrade operation.
     * @callback module:api/AdvroleApi~advroleUserupgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade a user to another role (requires permission to edit those roles)
     * Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
     * @param {String} userid Id of the user to upgrade
     * @param {String} roleid Id of the role to add
     * @param {module:api/AdvroleApi~advroleUserupgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleUserupgrade(userid, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling advroleUserupgrade");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling advroleUserupgrade");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrole/userupgrade', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
