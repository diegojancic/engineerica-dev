/**
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Report service.
* @module api/ReportApi
* @version 1.0.0
*/
export default class ReportApi {

    /**
    * Constructs a new ReportApi. 
    * @alias module:api/ReportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportList operation.
     * @callback module:api/ReportApi~reportListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of available reports
     * Allows the user to view the complete list of available, canned reports.
     * @param {module:api/ReportApi~reportListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPermissionsbyuser operation.
     * @callback module:api/ReportApi~reportPermissionsbyuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permissions by user report
     * Lists all the users in the system including their corresponding permissions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {module:api/ReportApi~reportPermissionsbyuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportPermissionsbyuser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/permissionsbyuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPrepare operation.
     * @callback module:api/ReportApi~reportPrepareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries and loads the specified report, in background.
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param {String} reportname The name of the report to execute
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {String} opts.repformat The format of the resulting report. Json, pdf, csv, ...
     * @param {String} opts.fillgroupid If specified, the result is used to fill the group with the given ID
     * @param {String} opts.groupby How to group the records. In the format 'col1+col2|col3+col4
     * @param {String} opts.refreshgroup The ID of the group to check (and refresh) before processing the report.
     * @param {String} opts.filtertext The user friendly text of the applied filters.
     * @param {module:api/ReportApi~reportPrepareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportPrepare(reportname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportname' is set
      if (reportname === undefined || reportname === null) {
        throw new Error("Missing the required parameter 'reportname' when calling reportPrepare");
      }

      let pathParams = {
      };
      let queryParams = {
        'reportname': reportname,
        'params': opts['params'],
        'repformat': opts['repformat'],
        'fillgroupid': opts['fillgroupid'],
        'groupby': opts['groupby'],
        'refreshgroup': opts['refreshgroup'],
        'filtertext': opts['filtertext']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/prepare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportQuery operation.
     * @callback module:api/ReportApi~reportQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query and load a specified report
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param {String} reportname The name of the report to execute
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {module:api/ReportApi~reportQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportQuery(reportname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportname' is set
      if (reportname === undefined || reportname === null) {
        throw new Error("Missing the required parameter 'reportname' when calling reportQuery");
      }

      let pathParams = {
      };
      let queryParams = {
        'reportname': reportname,
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
