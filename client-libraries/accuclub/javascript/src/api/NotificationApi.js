/**
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Notification service.
* @module api/NotificationApi
* @version 1.0.0
*/
export default class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the notificationDelete operation.
     * @callback module:api/NotificationApi~notificationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification
     * Allows the user to delete an existing notification.
     * @param {String} id The id of the notification to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/NotificationApi~notificationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationGet operation.
     * @callback module:api/NotificationApi~notificationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a notification
     * @param {String} id The id of the notification to get.
     * @param {module:api/NotificationApi~notificationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationGetforstation operation.
     * @callback module:api/NotificationApi~notificationGetforstationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all public (in station) notifications for the specific user
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {module:api/NotificationApi~notificationGetforstationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationGetforstation(station, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling notificationGetforstation");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling notificationGetforstation");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/getforstation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationGetunreadcount operation.
     * @callback module:api/NotificationApi~notificationGetunreadcountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the number of unread notifications
     * @param {module:api/NotificationApi~notificationGetunreadcountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationGetunreadcount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/getunreadcount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationList operation.
     * @callback module:api/NotificationApi~notificationListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of all sent notifications
     * Allows the user to view the list of all sent notifications.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.recipient The recipient whose notifications have to be listed.
     * @param {Number} opts.status The status of the notifications to list. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {Boolean} opts.sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
     * @param {Boolean} opts.sentemail Specifies whether to list the notifications that were sent via e-mail or not.
     * @param {Boolean} opts.sentsms Specifies whether to list the notifications that were sent via sms or not.
     * @param {module:api/NotificationApi~notificationListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling notificationList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling notificationList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'recipient': opts['recipient'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'sentonscreen': opts['sentonscreen'],
        'sentemail': opts['sentemail'],
        'sentsms': opts['sentsms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationListmine operation.
     * @callback module:api/NotificationApi~notificationListmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the notifications sent to the current user
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Specifies the status of the notifications to list. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/NotificationApi~notificationListmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationListmine(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling notificationListmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling notificationListmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/listmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationMarkasread operation.
     * @callback module:api/NotificationApi~notificationMarkasreadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a notification as read
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
     * @param {Number} opts.status Specifies the status to filter the notifications. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/NotificationApi~notificationMarkasreadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationMarkasread(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/markasread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationMarkasunread operation.
     * @callback module:api/NotificationApi~notificationMarkasunreadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a notification as unread
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
     * @param {Number} opts.status Specifies the status to filter the notifications. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/NotificationApi~notificationMarkasunreadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationMarkasunread(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/markasunread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationSend operation.
     * @callback module:api/NotificationApi~notificationSendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send notifications on screen, via email or text to users
     * Allows the user to send notifications to other users through the Send Message link.
     * @param {Boolean} emailenabled Whether send the notification via email.
     * @param {Boolean} onscreenenabled Whether to display the notification on screen.
     * @param {Boolean} smsenabled Whether to send the notification via text message.
     * @param {String} title Notification title.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tousers Comma-separated Ids of users to send the notification.
     * @param {String} opts.togroups Comma-separated Ids of user groups to send the notification.
     * @param {String} opts.onscreenbody Body of the message for on-screen display.
     * @param {String} opts.onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
     * @param {String} opts.onscreenurl Url to redirect the user, if onscreenclick=url.
     * @param {String} opts.onscreenclass How to display the notification. Valid values: info, success, warning, error
     * @param {Number} opts.onscreenduration Time in seconds to display the notification.
     * @param {Number} opts.showonstation Whether to show the notification in the sign-in station.
     * @param {String} opts.emailfromname Name of the email sender.
     * @param {String} opts.emailfrom Reply-to email.
     * @param {String} opts.emailsubject Subject of the email.
     * @param {String} opts.emailbody Body of the email.
     * @param {String} opts.textmessagebody Message for SMS. Max 160 characters.
     * @param {module:api/NotificationApi~notificationSendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationSend(emailenabled, onscreenenabled, smsenabled, title, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailenabled' is set
      if (emailenabled === undefined || emailenabled === null) {
        throw new Error("Missing the required parameter 'emailenabled' when calling notificationSend");
      }
      // verify the required parameter 'onscreenenabled' is set
      if (onscreenenabled === undefined || onscreenenabled === null) {
        throw new Error("Missing the required parameter 'onscreenenabled' when calling notificationSend");
      }
      // verify the required parameter 'smsenabled' is set
      if (smsenabled === undefined || smsenabled === null) {
        throw new Error("Missing the required parameter 'smsenabled' when calling notificationSend");
      }
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling notificationSend");
      }

      let pathParams = {
      };
      let queryParams = {
        'tousers': opts['tousers'],
        'togroups': opts['togroups'],
        'emailenabled': emailenabled,
        'onscreenenabled': onscreenenabled,
        'smsenabled': smsenabled,
        'title': title,
        'onscreenbody': opts['onscreenbody'],
        'onscreenclick': opts['onscreenclick'],
        'onscreenurl': opts['onscreenurl'],
        'onscreenclass': opts['onscreenclass'],
        'onscreenduration': opts['onscreenduration'],
        'showonstation': opts['showonstation'],
        'emailfromname': opts['emailfromname'],
        'emailfrom': opts['emailfrom'],
        'emailsubject': opts['emailsubject'],
        'emailbody': opts['emailbody'],
        'textmessagebody': opts['textmessagebody']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/send', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationSendonscreen operation.
     * @callback module:api/NotificationApi~notificationSendonscreenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send on-screen notifications
     * @param {String} notification The ID of the notification to send.
     * @param {module:api/NotificationApi~notificationSendonscreenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationSendonscreen(notification, callback) {
      let postBody = null;
      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling notificationSendonscreen");
      }

      let pathParams = {
      };
      let queryParams = {
        'notification': notification
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notification/sendonscreen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
