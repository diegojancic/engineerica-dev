/**
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* General service.
* @module api/GeneralApi
* @version 1.0.0
*/
export default class GeneralApi {

    /**
    * Constructs a new GeneralApi. 
    * @alias module:api/GeneralApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callExport operation.
     * @callback module:api/GeneralApi~callExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export AccuClub data
     * Allows the user to export data from AccuClub into a CSV, HTML, or Excel format.
     * @param {String} exporttype What to export.
     * @param {String} exportformat The format of the resulting file. Valid types are CSV, HTML, XLS.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters Pipe separated filters for the export, eg: aaa=val|bbb=val|...
     * @param {module:api/GeneralApi~callExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callExport(exporttype, exportformat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'exporttype' is set
      if (exporttype === undefined || exporttype === null) {
        throw new Error("Missing the required parameter 'exporttype' when calling callExport");
      }
      // verify the required parameter 'exportformat' is set
      if (exportformat === undefined || exportformat === null) {
        throw new Error("Missing the required parameter 'exportformat' when calling callExport");
      }

      let pathParams = {
      };
      let queryParams = {
        'exporttype': exporttype,
        'exportformat': exportformat,
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callImport operation.
     * @callback module:api/GeneralApi~callImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import data into AccuClub
     * Allows the user to import data into AccuClub via CSV or flat files either manually or automatically using the import utility.
     * @param {String} importtype The kind of data that is being uploaded.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {String} opts.parameters Import parameters, in a key-value pair JSON-serialized object. Eg {'parameter':'value'}.
     * @param {module:api/GeneralApi~callImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callImport(importtype, upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'importtype' is set
      if (importtype === undefined || importtype === null) {
        throw new Error("Missing the required parameter 'importtype' when calling callImport");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling callImport");
      }

      let pathParams = {
      };
      let queryParams = {
        'importtype': importtype,
        'upload': upload,
        'filename': opts['filename'],
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changelog operation.
     * @callback module:api/GeneralApi~changelogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the application change log
     * @param {module:api/GeneralApi~changelogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changelog(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/changelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doc operation.
     * @callback module:api/GeneralApi~docCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the documentation
     * Retrieves the list of actions available in the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeanonymous If true it excludes the anonymous actions from the returned list.
     * @param {module:api/GeneralApi~docCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doc(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'excludeanonymous': opts['excludeanonymous']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/doc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listtimezones operation.
     * @callback module:api/GeneralApi~listtimezonesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the available timezones
     * @param {module:api/GeneralApi~listtimezonesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listtimezones(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listtimezones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/GeneralApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {String} domain The account domain to login.
     * @param {String} username The username (email) of the user to login as.
     * @param {String} password The password of the user to login as.
     * @param {String} method The authentication method. Valid values are 'token' and 'cookie'.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.rememberme If true then the session will not expire.
     * @param {module:api/GeneralApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(domain, username, password, method, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling login");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling login");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling login");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': domain,
        'username': username,
        'password': password,
        'method': method,
        'rememberme': opts['rememberme']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/GeneralApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * @param {module:api/GeneralApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/GeneralApi~searchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * @param {String} query The query to search for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page to show, zero-based.
     * @param {module:api/GeneralApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    search(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling search");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the texttoimage operation.
     * @callback module:api/GeneralApi~texttoimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a dynamic image from text
     * @param {String} text The text to convert to an image, use double pipes (||) as a new line.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fontcolor The color of the text, in hex format, without the #.
     * @param {Number} opts.fontsize The size of the text, in points.
     * @param {String} opts.direction Either vertical or horizontal, default horizontal.
     * @param {Number} opts.width The image width in pixels (or height if the direction is vertical).
     * @param {module:api/GeneralApi~texttoimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    texttoimage(text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling texttoimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text,
        'fontcolor': opts['fontcolor'],
        'fontsize': opts['fontsize'],
        'direction': opts['direction'],
        'width': opts['width']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/texttoimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the version operation.
     * @callback module:api/GeneralApi~versionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current version information
     * @param {module:api/GeneralApi~versionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    version(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
