openapi: 3.0.1
info:
  title: AccuClub OpenAPI 3
  version: 1.0.0
  x-logo:
    url: https://c1.engineerica.com/images/logos-png/h59/accuclub.png
    altText: AccuClub
servers:
- url: https://accuclub.net:443/api/v1
tags:
- description: General application actions
  name: General
- description: Actions related to the feature module
  name: feature
- description: Actions related to the search module
  name: search
- description: Actions related to the my module
  name: my
- description: Actions related to the captcha module
  name: captcha
- description: Actions related to the menu module
  name: menu
- description: Actions related to the qrlogin module
  name: qrlogin
- description: Actions related to the appshare module
  name: appshare
- description: Actions related to the sso module
  name: sso
- description: Actions related to the license module
  name: license
- description: Actions related to the user module
  name: user
- description: Actions related to the role module
  name: role
- description: Actions related to the client module
  name: client
- description: Actions related to the bgjob module
  name: bgjob
- description: Actions related to the setting module
  name: setting
- description: Actions related to the actionlog module
  name: actionlog
- description: Actions related to the easylogin module
  name: easylogin
- description: Actions related to the export module
  name: export
- description: Actions related to the location module
  name: location
- description: Actions related to the template module
  name: template
- description: Actions related to the textcredit module
  name: textcredit
- description: Actions related to the translation module
  name: translation
- description: Actions related to the usersettings module
  name: usersettings
- description: Actions related to the quickpanel module
  name: quickpanel
- description: Actions related to the term module
  name: term
- description: Actions related to the holiday module
  name: holiday
- description: Actions related to the notificationtopic module
  name: notificationtopic
- description: Actions related to the notification module
  name: notification
- description: Actions related to the push module
  name: push
- description: Actions related to the rule module
  name: rule
- description: Actions related to the import module
  name: import
- description: Actions related to the event module
  name: event
- description: Actions related to the usergroup module
  name: usergroup
- description: Actions related to the qrlabels module
  name: qrlabels
- description: Actions related to the tag module
  name: tag
- description: Actions related to the attendancelog module
  name: attendancelog
- description: Actions related to the swipe module
  name: swipe
- description: Actions related to the attendancelogcomment module
  name: attendancelogcomment
- description: Actions related to the report module
  name: report
- description: Actions related to the memorizedreport module
  name: memorizedreport
- description: Actions related to the station module
  name: station
- description: Actions related to the advrole module
  name: advrole
- description: Actions related to the advroles module
  name: advroles
- description: Actions related to the security module
  name: security
- description: Actions related to the credit module
  name: credit
- description: Actions related to the creditplan module
  name: creditplan
- description: Actions related to the sessionreg module
  name: sessionreg
paths:
  /doc:
    get:
      description: Retrieves the list of actions available in the system.
      operationId: doc
      parameters:
      - description: If true it excludes the anonymous actions from the returned list.
        explode: true
        in: query
        name: excludeanonymous
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Get the documentation
      tags:
      - General
      x-accepts: application/json
  /feature/list:
    get:
      operationId: featureList
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists the available features.
      tags:
      - feature
      x-accepts: application/json
  /login:
    get:
      operationId: login
      parameters:
      - description: The account domain to login.
        explode: true
        in: query
        name: domain
        required: true
        schema:
          type: string
        style: form
      - description: The username (email) of the user to login as.
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - description: The password of the user to login as.
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      - description: The authentication method. Valid values are 'token' and 'cookie'.
        explode: true
        in: query
        name: method
        required: true
        schema:
          type: string
        style: form
      - description: If true then the session will not expire.
        explode: true
        in: query
        name: rememberme
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Login
      tags:
      - General
      x-accepts: application/json
  /logout:
    get:
      operationId: logout
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Logout
      tags:
      - General
      x-accepts: application/json
  /search:
    get:
      operationId: search
      parameters:
      - description: The query to search for.
        explode: true
        in: query
        name: query
        required: true
        schema:
          type: string
        style: form
      - description: Current page to show, zero-based.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search
      tags:
      - General
      x-accepts: application/json
  /search/getentities:
    get:
      operationId: searchGetentities
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get the information of the entities that can be searched
      tags:
      - search
      x-accepts: application/json
  /listtimezones:
    get:
      operationId: listtimezones
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Lists the available timezones
      tags:
      - General
      x-accepts: application/json
  /my/ianatimezone:
    get:
      operationId: myIanatimezone
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the current time zone's iana name
      tags:
      - my
      x-accepts: application/json
  /captcha/getimage:
    get:
      operationId: captchaGetimage
      parameters:
      - description: The captcha token or ID returned by the captcha.getchallenge
          action
        explode: true
        in: query
        name: captchatoken
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Gets a captcha image that the user must complete to do certain requests.
      tags:
      - captcha
      x-accepts: application/json
  /captcha/getchallenge:
    get:
      operationId: captchaGetchallenge
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Gets a captcha challenge that the user must complete to do certain
        requests.
      tags:
      - captcha
      x-accepts: application/json
  /menu/getitems:
    get:
      operationId: menuGetitems
      parameters:
      - description: The Id of the menu to get.
        explode: true
        in: query
        name: menuid
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Gets the items on the menu
      tags:
      - menu
      x-accepts: application/json
  /texttoimage:
    get:
      operationId: texttoimage
      parameters:
      - description: The text to convert to an image, use double pipes (||) as a new
          line.
        explode: true
        in: query
        name: text
        required: true
        schema:
          type: string
        style: form
      - description: 'The color of the text, in hex format, without the #.'
        explode: true
        in: query
        name: fontcolor
        required: false
        schema:
          type: string
        style: form
      - description: The size of the text, in points.
        explode: true
        in: query
        name: fontsize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Either vertical or horizontal, default horizontal.
        explode: true
        in: query
        name: direction
        required: false
        schema:
          type: string
        style: form
      - description: The image width in pixels (or height if the direction is vertical).
        explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Generates a dynamic image from text
      tags:
      - General
      x-accepts: application/json
  /qrlogin/get:
    get:
      operationId: qrloginGet
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets an image of a QR token
      tags:
      - qrlogin
      x-accepts: application/json
  /qrlogin/login:
    get:
      operationId: qrloginLogin
      parameters:
      - description: The token read from the QR code.
        explode: true
        in: query
        name: onetimetoken
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Login
      tags:
      - qrlogin
      x-accepts: application/json
  /appshare/getphone:
    get:
      operationId: appshareGetphone
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the phone number of the current user
      tags:
      - appshare
      x-accepts: application/json
  /appshare/sendtext:
    get:
      operationId: appshareSendtext
      parameters:
      - description: Phone number to where to send the link. Leave empty to the number
          on file.
        explode: true
        in: query
        name: phonenumber
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Sends an SMS with the link to the app
      tags:
      - appshare
      x-accepts: application/json
  /sso/generatekey:
    get:
      description: Allows the user to generate or reset the access key for single
        sign-on.
      operationId: ssoGeneratekey
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Generate/reset single sign on access key.
      tags:
      - sso
      x-accepts: application/json
  /sso/savesettings:
    post:
      description: Allows the user to edit settings for single sign-on.
      operationId: ssoSavesettings
      requestBody:
        content:
          application/json:
            schema:
              properties:
                enabled:
                  description: Specifies whether the single sign on is enabled or
                    not.
                  type: boolean
                expireswheninactive:
                  description: Specifies whether the sessions should expire when inactive.
                  type: boolean
                redirecturl:
                  description: The url the user gets redirected when the session is
                    closed or expires.
                  type: string
              required:
              - enabled
              - expireswheninactive
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Edit single sign-on settings.
      tags:
      - sso
      x-contentType: application/json
      x-accepts: application/json
  /sso/getsettings:
    get:
      description: Allows the user to view settings for single sign-on.
      operationId: ssoGetsettings
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View single sign on settings.
      tags:
      - sso
      x-accepts: application/json
  /sso/issuetoken:
    get:
      operationId: ssoIssuetoken
      parameters:
      - description: The single sign-on key of the account.
        explode: true
        in: query
        name: key
        required: true
        schema:
          type: string
        style: form
      - description: The email of the user to sign-on.
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - description: Specifies whether the session should expire when inactive.
        explode: true
        in: query
        name: expires
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Issue single sign-on token
      tags:
      - sso
      x-accepts: application/json
  /license/getcurrent:
    get:
      operationId: licenseGetcurrent
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the current license information
      tags:
      - license
      x-accepts: application/json
  /license/renew:
    get:
      description: Allows the user to select the option to contact Engineerica when
        the AccuClub account is nearing its renewal date.
      operationId: licenseRenew
      parameters:
      - description: The e-mail of the user sending the request.
        explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      - description: The phone number of the user sending the request.
        explode: true
        in: query
        name: phonenumber
        required: true
        schema:
          type: string
        style: form
      - description: The job title of the user sending the request.
        explode: true
        in: query
        name: jobtitle
        required: false
        schema:
          type: string
        style: form
      - description: The institution of the user sending the request.
        explode: true
        in: query
        name: institution
        required: false
        schema:
          type: string
        style: form
      - description: Comments entered by the user sending the request.
        explode: true
        in: query
        name: comments
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Contact Engineerica in order to renew the AccuClub subscription
      tags:
      - license
      x-accepts: application/json
  /license/acceptagreement:
    get:
      operationId: licenseAcceptagreement
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Accept the license agreement
      tags:
      - license
      x-accepts: application/json
  /license/getagreementstatus:
    get:
      operationId: licenseGetagreementstatus
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Check if license agreement has been accepted
      tags:
      - license
      x-accepts: application/json
  /my/rights:
    get:
      operationId: myRights
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the list of actions the user can execute.
      tags:
      - my
      x-accepts: application/json
  /my/profile:
    get:
      operationId: myProfile
      parameters:
      - description: The size in pixels of the photo URLs returned. Defaults to 40.
          If the size specified is not available, a similar one will be returned.
        explode: true
        in: query
        name: photosize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the logged in user information.
      tags:
      - my
      x-accepts: application/json
  /my/saveprofile:
    post:
      operationId: mySaveprofile
      requestBody:
        content:
          application/json:
            schema:
              properties:
                firstname:
                  description: The first name of the user.
                  type: string
                middlename:
                  description: The middle name of the user.
                  type: string
                lastname:
                  description: The last name of the user.
                  type: string
                email:
                  description: The email of the user.
                  type: string
                mobilephonenumber:
                  description: The mobile phone number of the user.
                  type: string
                homephonenumber:
                  description: The home phone number of the user.
                  type: string
                workphonenumber:
                  description: The work phone number of the user.
                  type: string
                streetaddress:
                  description: The street address of the user.
                  type: string
                city:
                  description: The city of the user.
                  type: string
                state:
                  description: The state of the user.
                  type: string
                zipcode:
                  description: The zip code of the user.
                  type: string
                title:
                  description: The title of the user.
                  type: string
                company:
                  description: The company of the user.
                  type: string
                photoid:
                  description: The ID of a photo uploaded using user.loadphoto.
                  format: uuid
                  type: string
              required:
              - email
              - firstname
              - lastname
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Updates logged user's profile information
      tags:
      - my
      x-contentType: application/json
      x-accepts: application/json
  /my/account:
    get:
      operationId: myAccount
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the logged in user account.
      tags:
      - my
      x-accepts: application/json
  /user/list:
    get:
      description: Allows the user to view the full list of users and is based on
        role permissions.
      operationId: userList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The id of the role to filter users by, or empty to return all
          users.
        explode: true
        in: query
        name: roleid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: If is 1 then only the users without a card are returned, otherwise
          all users are returned.
        explode: true
        in: query
        name: onlywithoutcard
        required: false
        schema:
          type: string
        style: form
      - description: The size in pixels of the photo URLs returned. Defaults to 40.
          If the size specified is not available, a similar one will be returned.
        explode: true
        in: query
        name: photosize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of users
      tags:
      - user
      x-accepts: application/json
  /user/{id}:
    delete:
      description: Allows the user to delete a user.
      operationId: userDelete
      parameters:
      - description: The id of the user to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a user
      tags:
      - user
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to search and view a user and their details.
      operationId: userGet
      parameters:
      - description: The id of the user to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The size in pixels of the photo URLs returned. Defaults to 40.
          If the size specified is not available, a similar one will be returned.
        explode: true
        in: query
        name: photosize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of a user
      tags:
      - user
      x-accepts: application/json
    post:
      description: Allows the user to create or edit a user.
      operationId: userSave
      parameters:
      - description: The id of the user to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                firstname:
                  description: The first name of the user.
                  type: string
                middlename:
                  description: The middle name of the user.
                  type: string
                lastname:
                  description: The last name of the user.
                  type: string
                email:
                  description: The email of the user.
                  type: string
                mobilephonenumber:
                  description: The mobile phone number of the user.
                  type: string
                homephonenumber:
                  description: The home phone number of the user.
                  type: string
                workphonenumber:
                  description: The work phone number of the user.
                  type: string
                streetaddress:
                  description: The street address of the user.
                  type: string
                city:
                  description: The city of the user.
                  type: string
                state:
                  description: The state of the user.
                  type: string
                zipcode:
                  description: The zip code of the user.
                  type: string
                title:
                  description: The title of the user.
                  type: string
                company:
                  description: The company of the user.
                  type: string
                password:
                  description: The new password of the user.
                  type: string
                roles:
                  description: Comma separated list of roles of the user.
                  type: string
                assigncard:
                  description: True if a new card has to be assigned to the user,
                    otherwise false.
                  type: string
                cardnumber:
                  description: The card number that has to be assigned to the user.
                  type: string
                more:
                  description: Custom data of the user
                  type: string
                photoid:
                  description: The ID of a photo uploaded using user.loadphoto.
                  format: uuid
                  type: string
                active:
                  description: The status of the user.
                  type: boolean
              required:
              - email
              - firstname
              - lastname
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a user
      tags:
      - user
      x-contentType: application/json
      x-accepts: application/json
  /user/getbycard:
    get:
      description: Allows the user to search for a user by their card number.
      operationId: userGetbycard
      parameters:
      - description: The card number of the user to get.
        explode: true
        in: query
        name: card
        required: true
        schema:
          type: string
        style: form
      - description: The size in pixels of the photo URLs returned. Defaults to 40.
          If the size specified is not available, a similar one will be returned.
        explode: true
        in: query
        name: photosize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search user by card number
      tags:
      - user
      x-accepts: application/json
  /user/changepwd:
    get:
      description: Allows the user to change their own password.
      operationId: userChangepwd
      parameters:
      - description: The old password of the authenticated user.
        explode: true
        in: query
        name: oldpass
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The new password of the authenticated user.
        explode: true
        in: query
        name: newpass
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Change user's own password
      tags:
      - user
      x-accepts: application/json
  /user/changepwdbyreq:
    get:
      operationId: userChangepwdbyreq
      parameters:
      - description: The change password request ID sent by email to the user.
        explode: true
        in: query
        name: changereq
        required: true
        schema:
          type: string
        style: form
      - description: The new password of the user.
        explode: true
        in: query
        name: newpass
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Changes the user password using a change password request id
      tags:
      - user
      x-accepts: application/json
  /user/requestpwdchange:
    get:
      operationId: userRequestpwdchange
      parameters:
      - description: The domain of the account where the user exists.
        explode: true
        in: query
        name: domain
        required: true
        schema:
          type: string
        style: form
      - description: The email of the user.
        explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Requests a password change
      tags:
      - user
      x-accepts: application/json
  /user/savepwdchange:
    post:
      description: Allows the user to trigger an email to another user asking them
        to set or change their password.
      operationId: userSavepwdchange
      requestBody:
        content:
          application/json:
            schema:
              properties:
                users:
                  description: A JSON array containing the ids of the users whose
                    passwords have to be set.
                  type: string
                role:
                  description: A specific role whose users passwords have to be set.
                  format: uuid
                  type: string
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Send email to the specified user(s) to set/change their passwords
      tags:
      - user
      x-contentType: application/json
      x-accepts: application/json
  /user/loadphoto:
    get:
      description: Allows the user to upload a photo for a user.
      operationId: userLoadphoto
      parameters:
      - description: Set 'file' as value to indicate that a file is being submitted
          in the body (instead of a JSON object).
        explode: true
        in: query
        name: upload
        required: true
        schema:
          type: string
        style: form
      - description: The local name of the uploaded file. For later reference.
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: The user ID to directly associate the upload photo. If not specified,
          a temp ID is returned that can be later specified in 'user.save'.
        explode: true
        in: query
        name: userid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: 'Set this to true to find the specific user based on the file
          name. '
        explode: true
        in: query
        name: automatch
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Upload a photo for a specific user
      tags:
      - user
      x-accepts: application/json
  /user/findsimilar:
    get:
      description: Allows the user to be warned if a user they are creating has the
        same card number as another user.
      operationId: userFindsimilar
      parameters:
      - description: The id of the current user.
        explode: true
        in: query
        name: currentid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: A phone number to search for similar users.
        explode: true
        in: query
        name: phonenumber
        required: false
        schema:
          type: string
        style: form
      - description: A card number to search for similar users.
        explode: true
        in: query
        name: cardnumber
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Finds similar users to prevent duplicates
      tags:
      - user
      x-accepts: application/json
  /user/movedata:
    get:
      description: Allows administrators to move data between users.
      operationId: userMovedata
      parameters:
      - description: The id of the user that is the source of the data.
        explode: true
        in: query
        name: source
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the user that is the destination of the data.
        explode: true
        in: query
        name: destination
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Move data between users
      tags:
      - user
      x-accepts: application/json
  /role/list:
    get:
      operationId: roleList
      parameters:
      - description: Filter by name of the role.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Show a list of roles
      tags:
      - role
      x-accepts: application/json
  /client/get:
    get:
      operationId: clientGet
      parameters:
      - description: The unique id of the client.
        explode: true
        in: query
        name: client
        required: true
        schema:
          type: string
        style: form
      - description: The custom name of the client.
        explode: true
        in: query
        name: clientname
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get client
      tags:
      - client
      x-accepts: application/json
  /client/save:
    post:
      operationId: clientSave
      requestBody:
        content:
          application/json:
            schema:
              properties:
                client:
                  description: The id of the client to save.
                  format: uuid
                  type: string
                clientname:
                  description: The name of the client.
                  type: string
                pushtoken:
                  description: The push token of the client.
                  type: string
              required:
              - client
              - clientname
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Saves a client
      tags:
      - client
      x-contentType: application/json
      x-accepts: application/json
  /client/list:
    get:
      operationId: clientList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the clients of the specified conference
      tags:
      - client
      x-accepts: application/json
  /client/sendmessage:
    get:
      operationId: clientSendmessage
      parameters:
      - description: The unique id of the client.
        explode: true
        in: query
        name: uniqueclientid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The body of the message to send.
        explode: true
        in: query
        name: message
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Send a message to a client
      tags:
      - client
      x-accepts: application/json
  /bgjob/getstatus:
    get:
      operationId: bgjobGetstatus
      parameters:
      - description: The ID of the job to get the status. 10 most recent will be returned
          if not specified.
        explode: true
        in: query
        name: jobid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The job type to filter by.
        explode: true
        in: query
        name: jobtype
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get background job status
      tags:
      - bgjob
      x-accepts: application/json
  /setting/get:
    get:
      operationId: settingGet
      parameters:
      - description: The account domain, in case of reading settings annonymously.
        explode: true
        in: query
        name: domain
        required: false
        schema:
          type: string
        style: form
      - description: The option keys to get values for. Enter multiple separated by
          comma.
        explode: true
        in: query
        name: keys
        required: true
        schema:
          type: string
        style: form
      - description: The scope of the settings to get.
        explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get settings for the account or the specified scope
      tags:
      - setting
      x-accepts: application/json
  /setting/save:
    post:
      description: Allows the user to affect settings that are not specified elsewhere
        in permissions. This includes Attendance, Appointments, Compass, Media, and
        Social Activity.
      operationId: settingSave
      requestBody:
        content:
          application/json:
            schema:
              properties:
                optionsjson:
                  description: The options to save in the account, in JSON format.
                  type: string
                scope:
                  description: The scope of the settings to save.
                  type: string
              required:
              - optionsjson
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Save settings for the account or the specified scope
      tags:
      - setting
      x-contentType: application/json
      x-accepts: application/json
  /setting/addlogo:
    get:
      description: Allows the user to add the logo for the account, which appears
        on all pages on the AccuClub browser version.
      operationId: settingAddlogo
      parameters:
      - description: Set 'file' as value to indicate that a file is being submitted
          in the body (instead of a JSON object).
        explode: true
        in: query
        name: upload
        required: true
        schema:
          type: string
        style: form
      - description: The original filename, needed to process the file.
        explode: true
        in: query
        name: filename
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Add a logo to the account
      tags:
      - setting
      x-accepts: application/json
  /setting/viewgeneral:
    get:
      description: Allows the user to view the settings' general section.
      operationId: settingViewgeneral
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View general settings for the account
      tags:
      - setting
      x-accepts: application/json
  /actionlog/list:
    get:
      description: Allows the user to view the audit logs for the account.
      operationId: actionlogList
      parameters:
      - description: The id of the user whose action logs have to be returned.
        explode: true
        in: query
        name: user
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The start date of the period to filter the logs.
        explode: true
        in: query
        name: startdate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date of the period to filter the logs.
        explode: true
        in: query
        name: enddate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The resource to filter the action logs.
        explode: true
        in: query
        name: resource
        required: false
        schema:
          type: string
        style: form
      - description: The action to filter the action logs.
        explode: true
        in: query
        name: actionfilter
        required: false
        schema:
          type: string
        style: form
      - description: The id of the entity that was the argument of the executed action.
        explode: true
        in: query
        name: argument
        required: false
        schema:
          type: string
        style: form
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of users action logs
      tags:
      - actionlog
      x-accepts: application/json
  /version:
    get:
      operationId: version
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get current version information
      tags:
      - General
      x-accepts: application/json
  /changelog:
    get:
      operationId: changelog
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get the application change log
      tags:
      - General
      x-accepts: application/json
  /easylogin/addbgimage:
    get:
      description: Allows the user to set the background image that all users will
        see when logging into an AccuClub account not using SSO.
      operationId: easyloginAddbgimage
      parameters:
      - description: Set 'file' as value to indicate that a file is being submitted
          in the body (instead of a JSON object).
        explode: true
        in: query
        name: upload
        required: true
        schema:
          type: string
        style: form
      - description: The original filename, needed to process the file.
        explode: true
        in: query
        name: filename
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Adds background image for the login
      tags:
      - easylogin
      x-accepts: application/json
  /export:
    get:
      description: Allows the user to export data from AccuClub into a CSV, HTML,
        or Excel format.
      operationId: export
      parameters:
      - description: What to export.
        explode: true
        in: query
        name: exporttype
        required: true
        schema:
          type: string
        style: form
      - description: The format of the resulting file. Valid types are CSV, HTML,
          XLS.
        explode: true
        in: query
        name: exportformat
        required: true
        schema:
          type: string
        style: form
      - description: 'Pipe separated filters for the export, eg: aaa=val|bbb=val|...'
        explode: true
        in: query
        name: filters
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Export AccuClub data
      tags:
      - General
      x-accepts: application/json
  /export/listtypes:
    get:
      operationId: exportListtypes
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists available export types
      tags:
      - export
      x-accepts: application/json
  /location/{id}:
    delete:
      description: Allows the user to delete an existing location.
      operationId: locationDelete
      parameters:
      - description: The id of the location to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a location
      tags:
      - location
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to search and view an individual location and its
        details.
      operationId: locationGet
      parameters:
      - description: The id of the location to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of a location
      tags:
      - location
      x-accepts: application/json
    post:
      description: Allows the user to create or edit a location.
      operationId: locationSave
      parameters:
      - description: The id of the location save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the location.
                  type: string
                categoryid:
                  description: The id of location's LocationCategory.
                  format: uuid
                  type: string
                categoryname:
                  description: The name of the location's LocationCategory.
                  type: string
                streetaddress:
                  description: The street address of the location.
                  type: string
                latitude:
                  description: The latitude of the location.
                  format: double
                  type: number
                longitude:
                  description: The longitude of the location.
                  format: double
                  type: number
                websiteurl:
                  description: The web site url of the location.
                  type: string
                email:
                  description: The e-mail address of the location.
                  type: string
                moreinformation:
                  description: More information relevant to the location.
                  type: string
                isrestricted:
                  description: Whether this location has the access restricted.
                  type: boolean
                accessroles:
                  description: The roles that can view the info associated to this
                    location, in JSON format.
                  type: string
                order:
                  description: The order of the location.
                  format: int32
                  type: integer
              required:
              - name
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a location
      tags:
      - location
      x-contentType: application/json
      x-accepts: application/json
  /location/list:
    get:
      description: Allows the user to view the list of all locations to which they
        are scoped.
      operationId: locationList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The comma-separated list containing the ids of the locations
          to list.
        explode: true
        in: query
        name: locations
        required: false
        schema:
          type: string
        style: form
      - description: True to list locations sorted by the 'Located In' property. Defaults
          to false.
        explode: true
        in: query
        name: sortbygroup
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of locations
      tags:
      - location
      x-accepts: application/json
  /template/list:
    get:
      description: Allows the user to view the full list of created templates.
      operationId: templateList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The kind of the templates to return. It must be included in (badge,
          certificate).
        explode: true
        in: query
        name: kind
        required: true
        schema:
          type: string
        style: form
      - description: If true then it only returns the templates that were designed.
          Otherwise, it returns all.
        explode: true
        in: query
        name: designedonly
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of defined templates
      tags:
      - template
      x-accepts: application/json
  /template/{id}:
    delete:
      description: Allows the user to delete an existing template.
      operationId: templateDelete
      parameters:
      - description: The id of the template to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a template
      tags:
      - template
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view a template and its details.
      operationId: templateGet
      parameters:
      - description: The id of the template to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of a template
      tags:
      - template
      x-accepts: application/json
    post:
      description: Allows the user to create or edit a template.
      operationId: templateSave
      parameters:
      - description: The id of the template to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                kind:
                  description: The kind of the templates to return. It must be included
                    in (badge, certificate).
                  type: string
                name:
                  description: The template's name.
                  type: string
                description:
                  description: The template's description.
                  type: string
              required:
              - kind
              - name
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a template
      tags:
      - template
      x-contentType: application/json
      x-accepts: application/json
  /template/savelayout:
    post:
      description: Allows the user to edit a template's layout.
      operationId: templateSavelayout
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  description: The id of the template whose layout needs to be saved.
                  format: uuid
                  type: string
                layout:
                  description: The template's layout (in JSON).
                  type: string
              required:
              - id
              - layout
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Save the layout of a template
      tags:
      - template
      x-contentType: application/json
      x-accepts: application/json
  /template/addimage:
    get:
      description: Allows the user to add an image to a badge or certificate template.
      operationId: templateAddimage
      parameters:
      - description: The id of the template where the image has to be added
        explode: true
        in: query
        name: template
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: Set 'file' as value to indicate that a file is being submitted
          in the body (instead of a JSON object).
        explode: true
        in: query
        name: upload
        required: true
        schema:
          type: string
        style: form
      - description: The local name of the uploaded file. For later reference.
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Add an image to a template
      tags:
      - template
      x-accepts: application/json
  /template/generate:
    get:
      description: Allows the user to generate an existing template as badges or certificates.
      operationId: templateGenerate
      parameters:
      - description: The id of the template to generate.
        explode: true
        in: query
        name: template
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The source key of the selected template data source.
        explode: true
        in: query
        name: source
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: True if all the templates should be placed in the same file,
          false if each one shoud be in its own file.
        explode: true
        in: query
        name: singlefile
        required: true
        schema:
          type: boolean
        style: form
      - description: Only the template for these users is created (and emailed if
          'email' is true), enter multiple separated by commas.
        explode: true
        in: query
        name: userid
        required: false
        schema:
          type: string
        style: form
      - description: It specifies the purpose of the creation of the templates. If
          true then is for sending via e-mail, otherwise is just for downloading
        explode: true
        in: query
        name: forsending
        required: false
        schema:
          type: boolean
        style: form
      - description: 'When printing all badges, filter by person type, can be either:
          attendee, presenter or exhibitor'
        explode: true
        in: query
        name: role
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: 'Pipe separated filters for the generation, eg: aaa=val|bbb=val|...'
        explode: true
        in: query
        name: filters
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Generate specified templates
      tags:
      - template
      x-accepts: application/json
  /template/getgenerated:
    get:
      description: Allows the user to view templates which have been generated as
        badges or certificates.
      operationId: templateGetgenerated
      parameters:
      - description: The id of the job that is creating the templates.
        explode: true
        in: query
        name: jobid
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View generated templates
      tags:
      - template
      x-accepts: application/json
  /template/email:
    get:
      description: Allows the user to send generated templates via email through AccuClub.
      operationId: templateEmail
      parameters:
      - description: The id of the job that is creating the templates.
        explode: true
        in: query
        name: jobid
        required: true
        schema:
          type: string
        style: form
      - description: The kind of the template you're sending. It must be included
          in (badge, certificate).
        explode: true
        in: query
        name: templatekind
        required: false
        schema:
          type: string
        style: form
      - description: The name of the sender to be displayed in the receipients inbox
        explode: true
        in: query
        name: emailfrom
        required: false
        schema:
          type: string
        style: form
      - description: The reply-to field for the emails.
        explode: true
        in: query
        name: emailreplyto
        required: false
        schema:
          type: string
        style: form
      - description: Args depending on the send-to flag.
        explode: true
        in: query
        name: emailsubject
        required: true
        schema:
          type: string
        style: form
      - description: Args depending on the send-to flag.
        explode: true
        in: query
        name: emailbody
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Send generated templates by email
      tags:
      - template
      x-accepts: application/json
  /template/listsources:
    get:
      description: Allows the user to see tokens to be used in the template
      operationId: templateListsources
      parameters:
      - description: The kind of the templates to return. It must be included in (badge,
          certificate).
        explode: true
        in: query
        name: kind
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of templates' data sources
      tags:
      - template
      x-accepts: application/json
  /textcredit/remaining:
    get:
      operationId: textcreditRemaining
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the remaining text credits for the account
      tags:
      - textcredit
      x-accepts: application/json
  /translation/list:
    get:
      operationId: translationList
      parameters:
      - description: Text to search/filter translations.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: If true then it returns only the terms translated. Otherwise,
          it returns all.
        explode: true
        in: query
        name: nondefaultonly
        required: false
        schema:
          type: boolean
        style: form
      - description: If true then it uses the app default translation as the universal
          term.
        explode: true
        in: query
        name: appdefaultasuniversal
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists all the available translations in the system
      tags:
      - translation
      x-accepts: application/json
  /translation/{id}:
    post:
      description: Allows the user to edit a translation for the entire account.
      operationId: translationSave
      parameters:
      - description: The id of the translation as returned by translation.list.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                translation:
                  description: The translated text.
                  type: string
              required:
              - translation
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Edit a translation
      tags:
      - translation
      x-contentType: application/json
      x-accepts: application/json
  /translation/get:
    get:
      operationId: translationGet
      parameters:
      - description: Pipe separated list of universal text to be translated.
        explode: true
        in: query
        name: universal
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the translations of the specified values
      tags:
      - translation
      x-accepts: application/json
  /translation/getcachefile:
    get:
      operationId: translationGetcachefile
      parameters:
      - description: The id of the account whose translations file has to be retrieved.
        explode: true
        in: query
        name: account
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get the file containing the translations
      tags:
      - translation
      x-accepts: application/json
  /usersettings/save:
    post:
      operationId: usersettingsSave
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key:
                  description: Setting key to save.
                  type: string
                value:
                  description: Setting value to save.
                  type: string
                user:
                  description: The user id whose settings have to be saved.
                  format: uuid
                  type: string
              required:
              - key
              - value
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Saves a user setting
      tags:
      - usersettings
      x-contentType: application/json
      x-accepts: application/json
  /usersettings/savemultiple:
    post:
      operationId: usersettingsSavemultiple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                optionsjson:
                  description: The options to save in the account, in JSON format.
                  type: string
                user:
                  description: The user id whose settings have to be saved.
                  format: uuid
                  type: string
              required:
              - optionsjson
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Save multiple user settings at once
      tags:
      - usersettings
      x-contentType: application/json
      x-accepts: application/json
  /usersettings/get:
    get:
      operationId: usersettingsGet
      parameters:
      - description: Setting key to get. Can be multiple separated by commas.
        explode: true
        in: query
        name: keys
        required: true
        schema:
          type: string
        style: form
      - description: The user id whose settings have to be returned.
        explode: true
        in: query
        name: user
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists available user settings
      tags:
      - usersettings
      x-accepts: application/json
  /usersettings/getmultiple:
    get:
      operationId: usersettingsGetmultiple
      parameters:
      - description: Setting key to get. Can be multiple separated by commas.
        explode: true
        in: query
        name: keys
        required: true
        schema:
          type: string
        style: form
      - description: The user id whose settings have to be returned.
        explode: true
        in: query
        name: user
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get multiple user settings
      tags:
      - usersettings
      x-accepts: application/json
  /quickpanel/init:
    get:
      operationId: quickpanelInit
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Returns the initial information required to show the quick panels
      tags:
      - quickpanel
      x-accepts: application/json
  /quickpanel/fetchwidget:
    get:
      operationId: quickpanelFetchwidget
      parameters:
      - description: The ID of the data to fetch it's data.
        explode: true
        in: query
        name: widgetid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Fetches the information for a specific widget.
      tags:
      - quickpanel
      x-accepts: application/json
  /quickpanel/listwidgettypes:
    get:
      operationId: quickpanelListwidgettypes
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists all the widget types available in the system
      tags:
      - quickpanel
      x-accepts: application/json
  /quickpanel/getwidget:
    get:
      description: Allows the user to view a widget added in as Quick Panel.
      operationId: quickpanelGetwidget
      parameters:
      - description: The id of the widget to get.
        explode: true
        in: query
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of a widget included in the Quick Panel
      tags:
      - quickpanel
      x-accepts: application/json
  /quickpanel/listwidgets:
    get:
      description: Allows the user to view the widgets that have been added to the
        Quick Panel.
      operationId: quickpanelListwidgets
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists all the widgets that are added in the Quick Panel
      tags:
      - quickpanel
      x-accepts: application/json
  /quickpanel/savewidget:
    post:
      description: Allows the user to save a widget to the Quick Panel.
      operationId: quickpanelSavewidget
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  description: The id of the widget.
                  format: uuid
                  type: string
                sectionname:
                  description: The section name where to add the widget.
                  type: string
                sortorder:
                  description: The sort order of the widget.
                  format: int32
                  type: integer
                title:
                  description: Title of the widget.
                  type: string
                type:
                  description: Type of the widget.
                  type: string
                data:
                  description: Context data of the widget.
                  type: string
                roleids:
                  description: CSV list of roles that display this widget.
                  type: string
              required:
              - data
              - roleids
              - sectionname
              - sortorder
              - title
              - type
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Saves a widget for the Quick Panel
      tags:
      - quickpanel
      x-contentType: application/json
      x-accepts: application/json
  /quickpanel/deletewidget:
    delete:
      description: Allows the user to delete a widget that has been added to the Quick
        Panel.
      operationId: quickpanelDeletewidget
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  description: The id of the widget.
                  format: uuid
                  type: string
              required:
              - id
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Deletes a widget from the Quick Panel
      tags:
      - quickpanel
      x-contentType: application/json
      x-accepts: application/json
  /quickpanel/reorderwidgets:
    get:
      operationId: quickpanelReorderwidgets
      parameters:
      - description: The section name where to sort the widgets.
        explode: true
        in: query
        name: sectionname
        required: true
        schema:
          type: string
        style: form
      - description: CSV list of the widgets to reorder.
        explode: true
        in: query
        name: orderids
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Reorders the widgets and moves them to a specific column
      tags:
      - quickpanel
      x-accepts: application/json
  /term/{id}:
    delete:
      description: Allows the user to delete a term from the existing list.
      operationId: termDelete
      parameters:
      - description: The id of the term to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a term
      tags:
      - term
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view a term and its details.
      operationId: termGet
      parameters:
      - description: The id of the term to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of a term
      tags:
      - term
      x-accepts: application/json
    post:
      description: Allows the user to create and edit terms.
      operationId: termSave
      parameters:
      - description: The id of the term to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the term.
                  type: string
                start:
                  description: The date when the term starts.
                  format: date-time
                  type: string
                end:
                  description: The date when the term ends.
                  format: date-time
                  type: string
              required:
              - end
              - name
              - start
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create and edit terms
      tags:
      - term
      x-contentType: application/json
      x-accepts: application/json
  /term/list:
    get:
      description: Allows the user to view the full list of existing term.
      operationId: termList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Specifies whether the terms in the past should be returned or
          not.
        explode: true
        in: query
        name: notpast
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of all terms
      tags:
      - term
      x-accepts: application/json
  /holiday/suggest:
    get:
      description: Allows the user to view the holiday suggestions for each term.
      operationId: holidaySuggest
      parameters:
      - description: The term to get holidays from.
        explode: true
        in: query
        name: term
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View the holiday suggestions in the given term
      tags:
      - holiday
      x-accepts: application/json
  /holiday/list:
    get:
      description: Allows the user to view all holidays entered.
      operationId: holidayList
      parameters:
      - description: The term to get holidays from.
        explode: true
        in: query
        name: term
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of entered holidays
      tags:
      - holiday
      x-accepts: application/json
  /holiday/save:
    post:
      description: Allows the user to create or edit holidays.
      operationId: holidaySave
      requestBody:
        content:
          application/json:
            schema:
              properties:
                daysoff:
                  description: A json list of names and dates.
                  type: string
              required:
              - daysoff
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a list of holidays
      tags:
      - holiday
      x-contentType: application/json
      x-accepts: application/json
  /notificationtopic/{id}:
    delete:
      description: Allows the user to delete an existing notification topic.
      operationId: notificationtopicDelete
      parameters:
      - description: The id of the notification topic to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a notification topic
      tags:
      - notificationtopic
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view an individual notification topic and its
        details.
      operationId: notificationtopicGet
      parameters:
      - description: The id of the notification topic to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of a notification topic
      tags:
      - notificationtopic
      x-accepts: application/json
    post:
      description: Allows the user to create and edit a notification topic.
      operationId: notificationtopicSave
      parameters:
      - description: The id of the topic to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the topic.
                  type: string
                description:
                  description: The description of the topic.
                  type: string
                enableonscreendelivery:
                  description: Specifies whether the notifications assigned to this
                    topic can be sent on-screen or not.
                  type: boolean
                sendonscreendefault:
                  description: Specifies whether the notifications assigned to this
                    topic have to have the on-screen delivery enabled by default.
                  type: boolean
                enableemaildelivery:
                  description: Specifies whether the notifications assigned to this
                    topic can be sent via e-mail or not.
                  type: boolean
                sendemaildefault:
                  description: Specifies whether the notifications assigned to this
                    topic have to have the e-mail delivery enabled by default.
                  type: boolean
                enablesmsdelivery:
                  description: Specifies whether the notifications assigned to this
                    topic can be sent via sms or not.
                  type: boolean
                sendsmsdefault:
                  description: Specifies whether the notifications assigned to this
                    topic have to have the sms delivery enabled by default.
                  type: boolean
              required:
              - description
              - name
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a notification topic
      tags:
      - notificationtopic
      x-contentType: application/json
      x-accepts: application/json
  /notificationtopic/list:
    get:
      description: Allows the user to view the list of all notification topics.
      operationId: notificationtopicList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: List all the notification topics
      tags:
      - notificationtopic
      x-accepts: application/json
  /notificationtopic/listsubscribe:
    get:
      operationId: notificationtopicListsubscribe
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: List all the notification topics available to subscribe
      tags:
      - notificationtopic
      x-accepts: application/json
  /notification/sendonscreen:
    get:
      operationId: notificationSendonscreen
      parameters:
      - description: The ID of the notification to send.
        explode: true
        in: query
        name: notification
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Send on-screen notifications
      tags:
      - notification
      x-accepts: application/json
  /notification/getunreadcount:
    get:
      operationId: notificationGetunreadcount
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get the number of unread notifications
      tags:
      - notification
      x-accepts: application/json
  /notification/{id}:
    delete:
      description: Allows the user to delete an existing notification.
      operationId: notificationDelete
      parameters:
      - description: The id of the notification to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a notification
      tags:
      - notification
      x-contentType: application/json
      x-accepts: application/json
    get:
      operationId: notificationGet
      parameters:
      - description: The id of the notification to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a notification
      tags:
      - notification
      x-accepts: application/json
  /notification/list:
    get:
      description: Allows the user to view the list of all sent notifications.
      operationId: notificationList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The recipient whose notifications have to be listed.
        explode: true
        in: query
        name: recipient
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The status of the notifications to list. Read, Unread or All.
        explode: true
        in: query
        name: status
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The start date of the period to filter the notifications.
        explode: true
        in: query
        name: startdate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date of the period to filter the notifications.
        explode: true
        in: query
        name: enddate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Specifies whether to list the notifications that were sent on-screen
          or not.
        explode: true
        in: query
        name: sentonscreen
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether to list the notifications that were sent via
          e-mail or not.
        explode: true
        in: query
        name: sentemail
        required: false
        schema:
          type: boolean
        style: form
      - description: Specifies whether to list the notifications that were sent via
          sms or not.
        explode: true
        in: query
        name: sentsms
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of all sent notifications
      tags:
      - notification
      x-accepts: application/json
  /notification/listmine:
    get:
      operationId: notificationListmine
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: Specifies the status of the notifications to list. Read, Unread
          or All.
        explode: true
        in: query
        name: status
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The start date of the period to filter the notifications.
        explode: true
        in: query
        name: startdate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date of the period to filter the notifications.
        explode: true
        in: query
        name: enddate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View all the notifications sent to the current user
      tags:
      - notification
      x-accepts: application/json
  /notification/markasread:
    get:
      operationId: notificationMarkasread
      parameters:
      - description: The id of the notification to mark as read. If not specified
          all notifications of the logged user will be marked as read.
        explode: true
        in: query
        name: id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Specifies the status to filter the notifications. Read, Unread
          or All.
        explode: true
        in: query
        name: status
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The start date of the period to filter the notifications.
        explode: true
        in: query
        name: startdate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date of the period to filter the notifications.
        explode: true
        in: query
        name: enddate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Mark a notification as read
      tags:
      - notification
      x-accepts: application/json
  /notification/markasunread:
    get:
      operationId: notificationMarkasunread
      parameters:
      - description: The id of the notification to mark as unread. If not specified
          all notifications of the logged user will be marked as unread.
        explode: true
        in: query
        name: id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Specifies the status to filter the notifications. Read, Unread
          or All.
        explode: true
        in: query
        name: status
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The start date of the period to filter the notifications.
        explode: true
        in: query
        name: startdate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date of the period to filter the notifications.
        explode: true
        in: query
        name: enddate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Mark a notification as unread
      tags:
      - notification
      x-accepts: application/json
  /notification/send:
    get:
      description: Allows the user to send notifications to other users through the
        Send Message link.
      operationId: notificationSend
      parameters:
      - description: Comma-separated Ids of users to send the notification.
        explode: true
        in: query
        name: tousers
        required: false
        schema:
          type: string
        style: form
      - description: Comma-separated Ids of user groups to send the notification.
        explode: true
        in: query
        name: togroups
        required: false
        schema:
          type: string
        style: form
      - description: Whether send the notification via email.
        explode: true
        in: query
        name: emailenabled
        required: true
        schema:
          type: boolean
        style: form
      - description: Whether to display the notification on screen.
        explode: true
        in: query
        name: onscreenenabled
        required: true
        schema:
          type: boolean
        style: form
      - description: Whether to send the notification via text message.
        explode: true
        in: query
        name: smsenabled
        required: true
        schema:
          type: boolean
        style: form
      - description: Notification title.
        explode: true
        in: query
        name: title
        required: true
        schema:
          type: string
        style: form
      - description: Body of the message for on-screen display.
        explode: true
        in: query
        name: onscreenbody
        required: false
        schema:
          type: string
        style: form
      - description: 'What to do when the notification is clicked. Valid values: hide,
          view, url.'
        explode: true
        in: query
        name: onscreenclick
        required: false
        schema:
          type: string
        style: form
      - description: Url to redirect the user, if onscreenclick=url.
        explode: true
        in: query
        name: onscreenurl
        required: false
        schema:
          type: string
        style: form
      - description: 'How to display the notification. Valid values: info, success,
          warning, error'
        explode: true
        in: query
        name: onscreenclass
        required: false
        schema:
          type: string
        style: form
      - description: Time in seconds to display the notification.
        explode: true
        in: query
        name: onscreenduration
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Whether to show the notification in the sign-in station.
        explode: true
        in: query
        name: showonstation
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Name of the email sender.
        explode: true
        in: query
        name: emailfromname
        required: false
        schema:
          type: string
        style: form
      - description: Reply-to email.
        explode: true
        in: query
        name: emailfrom
        required: false
        schema:
          type: string
        style: form
      - description: Subject of the email.
        explode: true
        in: query
        name: emailsubject
        required: false
        schema:
          type: string
        style: form
      - description: Body of the email.
        explode: true
        in: query
        name: emailbody
        required: false
        schema:
          type: string
        style: form
      - description: Message for SMS. Max 160 characters.
        explode: true
        in: query
        name: textmessagebody
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Send notifications on screen, via email or text to users
      tags:
      - notification
      x-accepts: application/json
  /push/deregister:
    get:
      operationId: pushDeregister
      parameters:
      - description: The device token where to send the notification.
        explode: true
        in: query
        name: devicetoken
        required: true
        schema:
          type: string
        style: form
      - description: Either ios or android
        explode: true
        in: query
        name: platform
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Deregisters the current device to receive push notifications
      tags:
      - push
      x-accepts: application/json
  /push/register:
    get:
      operationId: pushRegister
      parameters:
      - description: The device token where to send the notification.
        explode: true
        in: query
        name: devicetoken
        required: true
        schema:
          type: string
        style: form
      - description: Either ios or android
        explode: true
        in: query
        name: platform
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Registers the current device to receive push notifications
      tags:
      - push
      x-accepts: application/json
  /rule/{id}:
    delete:
      description: Allows the user to delete an existing rule.
      operationId: ruleDelete
      parameters:
      - description: The id of the rule to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a rule
      tags:
      - rule
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view an individual rule and its details.
      operationId: ruleGet
      parameters:
      - description: The id of the rule to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of a rule
      tags:
      - rule
      x-accepts: application/json
    post:
      description: Allows the user to create or edit a rule.
      operationId: ruleSave
      parameters:
      - description: The id of the rule to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the rule.
                  type: string
                description:
                  description: The description of the rule.
                  type: string
                onevent:
                  description: The event that will trigger this rule.
                  type: string
                conditionsjson:
                  description: The conditions that apply to this rule.
                  type: string
                actionsjson:
                  description: The actions that will be executed when this rule matches.
                  type: string
                active:
                  description: Specifies if the action is active or inactive
                  type: boolean
              required:
              - actionsjson
              - active
              - conditionsjson
              - name
              - onevent
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a rule
      tags:
      - rule
      x-contentType: application/json
      x-accepts: application/json
  /rule/list:
    get:
      description: Allows the user to view the list of all rules.
      operationId: ruleList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of user rules
      tags:
      - rule
      x-accepts: application/json
  /rule/listactions:
    get:
      description: Allows the user to view all the available rule actions.
      operationId: ruleListactions
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of rule actions available
      tags:
      - rule
      x-accepts: application/json
  /rule/listeventtypes:
    get:
      description: Allows the user to view a list of available triggers for rules.
      operationId: ruleListeventtypes
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of rule event types
      tags:
      - rule
      x-accepts: application/json
  /rule/geteventtype:
    get:
      description: Allows the user to view the trigger and its available conditions
        for the rule.
      operationId: ruleGeteventtype
      parameters:
      - description: The name of the event to refresh.
        explode: true
        in: query
        name: event
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of a rule event type
      tags:
      - rule
      x-accepts: application/json
  /rule/listhttprequests:
    get:
      operationId: ruleListhttprequests
      parameters:
      - description: If true only failed requests will be returned
        explode: true
        in: query
        name: failed
        required: false
        schema:
          type: boolean
        style: form
      - description: The http status to filter the requests
        explode: true
        in: query
        name: status
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View all the http requests sent as a result of a rule
      tags:
      - rule
      x-accepts: application/json
  /import:
    get:
      description: Allows the user to import data into AccuClub via CSV or flat files
        either manually or automatically using the import utility.
      operationId: import
      parameters:
      - description: The kind of data that is being uploaded.
        explode: true
        in: query
        name: importtype
        required: true
        schema:
          type: string
        style: form
      - description: Set 'file' as value to indicate that a file is being submitted
          in the body (instead of a JSON object).
        explode: true
        in: query
        name: upload
        required: true
        schema:
          type: string
        style: form
      - description: The local name of the uploaded file. For later reference.
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: Import parameters, in a key-value pair JSON-serialized object.
          Eg {'parameter':'value'}.
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Import data into AccuClub
      tags:
      - General
      x-accepts: application/json
  /import/listtypes:
    get:
      operationId: importListtypes
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists available import types
      tags:
      - import
      x-accepts: application/json
  /event/{id}:
    delete:
      description: Allows the user to delete an existing course.
      operationId: eventDelete
      parameters:
      - description: The id of the event to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a course
      tags:
      - event
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view an individual course and its details.
      operationId: eventGet
      parameters:
      - description: The id of the event to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of a course
      tags:
      - event
      x-accepts: application/json
    post:
      description: Allows the user to create or edit a course.
      operationId: eventSave
      parameters:
      - description: The id of the event to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the event.
                  type: string
                codegroup:
                  description: Optional code to group events.
                  type: string
                code:
                  description: The unique code of the event.
                  type: string
                term:
                  description: The term of the event.
                  type: string
                department:
                  description: The department of the event.
                  type: string
                details:
                  description: The details of the event.
                  type: string
                recurringschedule:
                  description: The recurring schedule of the event, a JSON-formatted
                    array. Each item must contain an action (set/remove) and the schedule
                    properties, as returned by event.get.
                  type: string
                onetimeschedule:
                  description: The one-time schedule of the event, a JSON-formatted
                    array. Each item must contain an action (set/remove) and the schedule
                    properties, as returned by event.get.
                  type: string
              required:
              - code
              - name
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a course
      tags:
      - event
      x-contentType: application/json
      x-accepts: application/json
  /event/getsessionsbydate:
    get:
      description: Allows the user to view a list of courses by date.
      operationId: eventGetsessionsbydate
      parameters:
      - description: The location to filter the events.
        explode: true
        in: query
        name: location
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The date to filter the events. Today will be used if this parameter
          is omitted.
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Type of event to list.
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of courses by date
      tags:
      - event
      x-accepts: application/json
  /event/list:
    get:
      description: Allows the user to view the full list of courses.
      operationId: eventList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          type: string
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          type: string
        style: form
      - description: True to return only the event information and not the associated
          schedule, dept, etc. Defaults to false.
        explode: true
        in: query
        name: summaryonly
        required: false
        schema:
          type: boolean
        style: form
      - description: Id of the term to list the events. Null to list all events.
        explode: true
        in: query
        name: termid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of courses
      tags:
      - event
      x-accepts: application/json
  /event/searchgroup:
    get:
      operationId: eventSearchgroup
      parameters:
      - description: Query to search event groups.
        explode: true
        in: query
        name: query
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Searches for the available event groups
      tags:
      - event
      x-accepts: application/json
  /usergroup/{id}:
    delete:
      description: Allows the user to delete a group that they have permission to
        edit.
      operationId: usergroupDelete
      parameters:
      - description: The id of the group to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a group
      tags:
      - usergroup
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view a user group and its details.
      operationId: usergroupGet
      parameters:
      - description: The id of the user group to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of a user group
      tags:
      - usergroup
      x-accepts: application/json
    post:
      description: Allows the user to create a new group or edit a group that they
        have permission to edit.
      operationId: usergroupSave
      parameters:
      - description: The id of the group to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the group.
                  type: string
                description:
                  description: The description of the group.
                  type: string
                isprivate:
                  description: Whether this group can be seen by others other than
                    the creator.
                  type: boolean
                viewroles:
                  description: The roles that can view the group, in JSON format.
                  type: string
                editroles:
                  description: The roles that can edit the group, in JSON format.
                  type: string
                scopes:
                  description: The scopes that have access to this group, in JSON
                    format.
                  type: string
              required:
              - name
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a group
      tags:
      - usergroup
      x-contentType: application/json
      x-accepts: application/json
  /usergroup/list:
    get:
      description: Allows the user to view the list of groups that they have permission
        to view.
      operationId: usergroupList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The type of the groups to return. Either 'user', 'dynamic' or
          any other type of group.
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of user groups
      tags:
      - usergroup
      x-accepts: application/json
  /usergroup/addmember:
    get:
      description: Allows the user to add a user to a group that they have permission
        to edit.
      operationId: usergroupAddmember
      parameters:
      - description: The id of the user to add.
        explode: true
        in: query
        name: userid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the group.
        explode: true
        in: query
        name: groupid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Add a user to a group
      tags:
      - usergroup
      x-accepts: application/json
  /usergroup/getmembers:
    get:
      description: Allows the user to view the list of users in a group that they
        have permission to view.
      operationId: usergroupGetmembers
      parameters:
      - description: The id of the user group to get.
        explode: true
        in: query
        name: groupid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View the members of a user group
      tags:
      - usergroup
      x-accepts: application/json
  /usergroup/getuser:
    get:
      description: Allows the user to view the groups an individual user is registered
        to, based on group and user permissions.
      operationId: usergroupGetuser
      parameters:
      - description: The id of the user to get his groups.
        explode: true
        in: query
        name: userid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View the groups which a user is registered to
      tags:
      - usergroup
      x-accepts: application/json
  /usergroup/removemember:
    get:
      description: Allows the user to remove a user from a group that they have permission
        to edit.
      operationId: usergroupRemovemember
      parameters:
      - description: The id of the user to remove.
        explode: true
        in: query
        name: userid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the group.
        explode: true
        in: query
        name: groupid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Remove a user from a group
      tags:
      - usergroup
      x-accepts: application/json
  /qrlabels/print:
    get:
      description: Allows the user to generate a printable PDF of QR labels containing
        user Card Numbers to be emailed to users and used as attendance tracking for
        events.
      operationId: qrlabelsPrint
      parameters:
      - description: The id of the user whose label needs to be printed.
        explode: true
        in: query
        name: user
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the group whose members' labels need to be printed.
        explode: true
        in: query
        name: group
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Print and email QR labels
      tags:
      - qrlabels
      x-accepts: application/json
  /tag/search:
    get:
      description: Allows the user to search for tags.
      operationId: tagSearch
      parameters:
      - description: The query to search tags. Use group:<group> to search in a specific
          group (mandatory).
        explode: true
        in: query
        name: query
        required: true
        schema:
          type: string
        style: form
      - description: Specifies whether an option to create a new tag should be retrieved.
        explode: true
        in: query
        name: allowcreatingnew
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search for tags in the account
      tags:
      - tag
      x-accepts: application/json
  /tag/{id}:
    delete:
      description: Allows the user to delete an existing tag.
      operationId: tagDelete
      parameters:
      - description: The id of the tag to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a tag
      tags:
      - tag
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to click on and view the settings for a tag.
      operationId: tagGet
      parameters:
      - description: The id of the tag to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of a specified tag
      tags:
      - tag
      x-accepts: application/json
    post:
      description: Allows the user to create or edit a tag.
      operationId: tagSave
      parameters:
      - description: The id of the tag save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                group:
                  description: The group id of the tag.
                  type: string
                name:
                  description: The name of the tag.
                  type: string
                description:
                  description: The description of the tag.
                  type: string
                requestedby:
                  description: The information regarding who requested this tag and
                    who should use it.
                  type: string
                viewroles:
                  description: The roles that can view the answers, in JSON format.
                  type: string
                editroles:
                  description: The roles that can edit the answers, in JSON format.
                  type: string
                scopes:
                  description: The scopes that have access to this questionnaire,
                    in JSON format.
                  type: string
              required:
              - group
              - name
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a tag
      tags:
      - tag
      x-contentType: application/json
      x-accepts: application/json
  /tag/listgroups:
    get:
      description: Allows the user to view the list of user roles that can be tagged,
        according to that tag's settings.
      operationId: tagListgroups
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of entities that can be tagged
      tags:
      - tag
      x-accepts: application/json
  /tag/list:
    get:
      description: Allows the user to view the list of tags.
      operationId: tagList
      parameters:
      - description: The group of the tags to return.
        explode: true
        in: query
        name: group
        required: true
        schema:
          type: string
        style: form
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of tags
      tags:
      - tag
      x-accepts: application/json
  /attendancelog/{id}:
    delete:
      description: Allows the user to delete an existing attendance log.
      operationId: attendancelogDelete
      parameters:
      - description: The id of the attendance log to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete an attendance log
      tags:
      - attendancelog
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view an individual attendance log and its details.
      operationId: attendancelogGet
      parameters:
      - description: The id of the attendance log to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of an attendance log
      tags:
      - attendancelog
      x-accepts: application/json
    post:
      description: Allows the user to create or edit an attendance log.
      operationId: attendancelogSave
      parameters:
      - description: The id of the room to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                cardnumber:
                  description: 'The card # of the user (used when the user is unknown).'
                  format: uuid
                  type: string
                user:
                  description: The id of the user, or a CSV list of ids if creating
                    new logs.
                  type: string
                location:
                  description: The id of the location where the user signed in.
                  format: uuid
                  type: string
                event:
                  description: The id of the event the user signed in to.
                  format: uuid
                  type: string
                useeventschedule:
                  description: Specifies whether the event schedule should be used
                    to set the log status.
                  type: boolean
                notes:
                  description: The notes of the log.
                  type: string
                publicnotes:
                  description: Specifies whether the notes are public to the user
                    or should only be seen by staff or admins
                  type: boolean
                logdetails:
                  description: The log details in JSON format
                  format: uuid
                  type: string
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit an attendance log
      tags:
      - attendancelog
      x-contentType: application/json
      x-accepts: application/json
  /attendancelog/list:
    get:
      description: Allows the user to view the list of all attendance logs in the
        location or locations in which the user is scoped.
      operationId: attendancelogList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out,
          stayed-less-than-required, out-of-event, valid.'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The user ID of the user to get the logs.
        explode: true
        in: query
        name: userid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of attendance logs
      tags:
      - attendancelog
      x-accepts: application/json
  /attendancelog/listmine:
    get:
      operationId: attendancelogListmine
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out,
          stayed-less-than-required, out-of-event, valid.'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the attendance logs of the current user
      tags:
      - attendancelog
      x-accepts: application/json
  /attendancelog/whosin:
    get:
      description: Allows the user to view the Who's In page and view all users who
        are logged into locations in which the user is scoped.
      operationId: attendancelogWhosin
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The id of the location to search for users that are in.
        explode: true
        in: query
        name: location
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the event to search for users that are in.
        explode: true
        in: query
        name: event
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Field to sort by. Either first-name, last-name or sign-in-time.
        explode: true
        in: query
        name: sorting
        required: false
        schema:
          type: string
        style: form
      - description: The comma-separated list of ids of the roles to search for users
          that are in.
        explode: true
        in: query
        name: roles
        required: false
        schema:
          type: string
        style: form
      - description: The size in pixels of the photo URLs returned. Defaults to 40.
          If the size specified is not available, a similar one will be returned.
        explode: true
        in: query
        name: photosize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: 'A JSON array containing the extension filters (i.e [{name: ''nametofilter'',
          value: ''valuetofilter''}]).'
        explode: true
        in: query
        name: extensions
        required: false
        schema:
          type: string
        style: form
      - description: True to export the results as CSV
        explode: true
        in: query
        name: export
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View who's in a location
      tags:
      - attendancelog
      x-accepts: application/json
  /attendancelog/signout:
    get:
      description: Allows the user to sign out am attendance log from the Who's In
        page.
      operationId: attendancelogSignout
      parameters:
      - description: The id of the attendance log to sign-out.
        explode: true
        in: query
        name: id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the location to filter the users to sign out.
        explode: true
        in: query
        name: location
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the event to filter the users to sign out.
        explode: true
        in: query
        name: event
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Specifies the date and time when the specified logs have to be
          signed out.
        explode: true
        in: query
        name: datetime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Sign out an attendance log
      tags:
      - attendancelog
      x-accepts: application/json
  /attendancelog/getchangehistory:
    get:
      description: Allows the user to view the swipes of an individual attendance
        logs (sign ins and sign outs).
      operationId: attendancelogGetchangehistory
      parameters:
      - description: The id of the attendance log to get.
        explode: true
        in: query
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of an attendance log's swipe history
      tags:
      - attendancelog
      x-accepts: application/json
  /swipe/{id}:
    delete:
      description: Allows the user to delete an existing attendance swipe.
      operationId: swipeDelete
      parameters:
      - description: The id of the swipe to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a swipe
      tags:
      - swipe
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view an individual attendance swipe.
      operationId: swipeGet
      parameters:
      - description: The id of the swipe to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Search and view details of a swipe
      tags:
      - swipe
      x-accepts: application/json
  /swipe/list:
    get:
      description: Allows the user to view a list of all swipes for the location or
        locations in which the user is scoped.
      operationId: swipeList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of swipes
      tags:
      - swipe
      x-accepts: application/json
  /swipe/save:
    post:
      description: Allows the user to save an attendance swipe, which will also save
        the attendance log if the information in the swipe is enough.
      operationId: swipeSave
      requestBody:
        content:
          application/json:
            schema:
              properties:
                time:
                  description: The date and time of the swipe.
                  format: date-time
                  type: string
                type:
                  description: Specifies the attendance type (0 = Sign-In, 1 = Sign-Out).
                    If not specified then it's inferred from existing logs.
                  format: int32
                  type: integer
                cardnumber:
                  description: The number of the swipped card.
                  type: string
                location:
                  description: The id of the location whose swipe has to be saved.
                  format: uuid
                  type: string
                event:
                  description: The id of the event whose swipe has to be saved.
                  format: uuid
                  type: string
                client:
                  description: The unique id of the client whose swipe has to be saved.
                  type: string
                clientname:
                  description: The name of the client whose swipe has to be saved.
                  type: string
                metadata:
                  description: The swipe's metadata in JSON format.
                  type: string
                photosize:
                  description: The swiping user's photo size.
                  format: int32
                  type: integer
              required:
              - cardnumber
              - client
              - time
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a swipe, and if possible, save the related attendance
        log
      tags:
      - swipe
      x-contentType: application/json
      x-accepts: application/json
  /attendancelogcomment/{id}:
    delete:
      operationId: attendancelogcommentDelete
      parameters:
      - description: The id of the attendance log comment to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a comment on an attendance log
      tags:
      - attendancelogcomment
      x-contentType: application/json
      x-accepts: application/json
    get:
      operationId: attendancelogcommentGet
      parameters:
      - description: The id of the comment to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a comment on an attendance log
      tags:
      - attendancelogcomment
      x-accepts: application/json
    post:
      operationId: attendancelogcommentSave
      parameters:
      - description: The id of the comment to edit (leave empty to create a new one)
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                attendancelog:
                  description: The id of the attendance log that has to be commented.
                  format: uuid
                  type: string
                comments:
                  description: The comments that have to be saved.
                  type: string
                public:
                  description: Specifies whether this comment is public to the user
                    or should only be seen by staff or admins
                  type: boolean
              required:
              - comments
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Save a comment on an attendance log
      tags:
      - attendancelogcomment
      x-contentType: application/json
      x-accepts: application/json
  /attendancelogcomment/list:
    get:
      operationId: attendancelogcommentList
      parameters:
      - description: The id of the attendance log whose comments have to be retrieved.
        explode: true
        in: query
        name: attendancelog
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View all the comments on a specific attendance log
      tags:
      - attendancelogcomment
      x-accepts: application/json
  /usergroup/refresh:
    get:
      description: Allows the user to refresh a dynamic group that they have permission
        to edit.
      operationId: usergroupRefresh
      parameters:
      - description: The ID of the group to refresh.
        explode: true
        in: query
        name: group
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Refresh the dynamic group
      tags:
      - usergroup
      x-accepts: application/json
  /report/query:
    get:
      description: Allows the user to run reports with the exception of attendance
        analytics reports.
      operationId: reportQuery
      parameters:
      - description: The name of the report to execute
        explode: true
        in: query
        name: reportname
        required: true
        schema:
          type: string
        style: form
      - description: 'A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3'
        explode: true
        in: query
        name: params
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Query and load a specified report
      tags:
      - report
      x-accepts: application/json
  /report/list:
    get:
      description: Allows the user to view the complete list of available, canned
        reports.
      operationId: reportList
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of available reports
      tags:
      - report
      x-accepts: application/json
  /report/prepare:
    get:
      description: Allows the user to run reports, in background, with the exception
        of attendance analytics reports.
      operationId: reportPrepare
      parameters:
      - description: The name of the report to execute
        explode: true
        in: query
        name: reportname
        required: true
        schema:
          type: string
        style: form
      - description: 'A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3'
        explode: true
        in: query
        name: params
        required: false
        schema:
          type: string
        style: form
      - description: The format of the resulting report. Json, pdf, csv, ...
        explode: true
        in: query
        name: repformat
        required: false
        schema:
          type: string
        style: form
      - description: If specified, the result is used to fill the group with the given
          ID
        explode: true
        in: query
        name: fillgroupid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: How to group the records. In the format 'col1+col2|col3+col4
        explode: true
        in: query
        name: groupby
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the group to check (and refresh) before processing
          the report.
        explode: true
        in: query
        name: refreshgroup
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The user friendly text of the applied filters.
        explode: true
        in: query
        name: filtertext
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Queries and loads the specified report, in background.
      tags:
      - report
      x-accepts: application/json
  /memorizedreport/list:
    get:
      description: Allows the user to view the list of all memorized reports that
        they have created.
      operationId: memorizedreportList
      parameters:
      - description: If specified filters the memorized reports by custom name.
        explode: true
        in: query
        name: customname
        required: false
        schema:
          type: string
        style: form
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of all his memorized reports
      tags:
      - memorizedreport
      x-accepts: application/json
  /memorizedreport/{id}:
    delete:
      description: Allows the user to delete a memorized report that they have created.
      operationId: memorizedreportDelete
      parameters:
      - description: The id of the report settings to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete memorized report
      tags:
      - memorizedreport
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view an individual memorized report and its
        details.
      operationId: memorizedreportGet
      parameters:
      - description: The id of the report configuration to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of a memorized report
      tags:
      - memorizedreport
      x-accepts: application/json
    post:
      description: Allows the user to create or edit a memorized report for themselves.
      operationId: memorizedreportSave
      parameters:
      - description: The id of the report settings to save (leave empty to create
          a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                internalname:
                  description: The internal name of the report.
                  type: string
                name:
                  description: The name of the report.
                  type: string
                customname:
                  description: The custom name of the report.
                  type: string
                customdescription:
                  description: The custom name of the report.
                  type: string
                url:
                  description: The url of the report.
                  type: string
                format:
                  description: The default format of the report.
                  type: string
                params:
                  description: 'A pipe separated list of the parameters. Example:
                    key1=value1|key2=value2|key3=value3.'
                  type: string
                filters:
                  description: A JSON containing the selected filters.
                  type: string
                filtertext:
                  description: The user friendly text of the applied filters.
                  type: string
                groupby:
                  description: How to group the records. In the format 'col1+col2|col3+col4
                  type: string
              required:
              - customname
              - format
              - internalname
              - name
              - url
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a memorized report
      tags:
      - memorizedreport
      x-contentType: application/json
      x-accepts: application/json
  /station/list:
    get:
      description: Allows the user to view the list of sign-in stations, limited to
        the stations in the locations to which they are scoped.
      operationId: stationList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of sign-in stations
      tags:
      - station
      x-accepts: application/json
  /station/{id}:
    delete:
      description: Allows the user to delete a sign-in station from the list of existing
        sign-in stations that they can view based on their scope.
      operationId: stationDelete
      parameters:
      - description: The id of the sign-in station to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a sign-in station
      tags:
      - station
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view an individual sign-in station and its details.
      operationId: stationGet
      parameters:
      - description: The id of the sign-in station to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of a sign-in station
      tags:
      - station
      x-accepts: application/json
    post:
      description: Allows the user to create, edit, or install a sign-in station based
        in an area to which they are scoped.
      operationId: stationSave
      parameters:
      - description: The id of the sign-in station to save (leave empty to create
          a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The friendly name of the sign-in station.
                  type: string
                mode:
                  description: The mode of the sign-in station.
                  type: string
                title:
                  description: Title to display in the station.
                  type: string
                instructions:
                  description: Instructions to display in the station.
                  type: string
                passcode:
                  description: The passcode used to change settings in the station,
                    empty text to disable security.
                  type: string
                location:
                  description: Id of the location Title to display in the station.
                  format: uuid
                  type: string
                showids:
                  description: Whether to show the visitor ids in the sign-in station.
                  type: boolean
                shownames:
                  description: Whether to show the visitor names in the sign-in station.
                  type: boolean
                showphotos:
                  description: Whether to show the visitor photos in the sign-in station.
                  type: boolean
                infotimeout:
                  description: Specifies how much time the success or error message
                    is shown after a swipe.
                  format: int32
                  type: integer
                photopixelwidth:
                  description: Specifies the pixel width of the photos in the sign-in
                    station.
                  format: int32
                  type: integer
                allowcreatingvisitors:
                  description: Whether to allow creating visitors from the sign-in
                    station.
                  type: boolean
              required:
              - mode
              - name
              - passcode
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a sign-in station
      tags:
      - station
      x-contentType: application/json
      x-accepts: application/json
  /station/getinfo:
    get:
      operationId: stationGetinfo
      parameters:
      - description: The id of the sign-in station to get.
        explode: true
        in: query
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the event, to override the one by schedule.
        explode: true
        in: query
        name: event
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Gets a the info to display in the sign-in station by it's ID.
      tags:
      - station
      x-accepts: application/json
  /station/unlock:
    get:
      operationId: stationUnlock
      parameters:
      - description: The id of the sign-in station to unlock.
        explode: true
        in: query
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The passcode to unlock the station.
        explode: true
        in: query
        name: passcode
        required: true
        schema:
          type: string
        style: form
      - description: The authentication method. Valid values are 'token' and 'cookie'.
        explode: true
        in: query
        name: method
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Unlocks the sign-in station.
      tags:
      - station
      x-accepts: application/json
  /station/getlicense:
    get:
      operationId: stationGetlicense
      parameters:
      - description: The id of the sign-in station whose account's license has to
          be retrieved.
        explode: true
        in: query
        name: station
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Gets the current license information
      tags:
      - station
      x-accepts: application/json
  /station/getcurrentterms:
    get:
      operationId: stationGetcurrentterms
      parameters:
      - description: The id of the sign-in station whose account's current terms have
          to be retrieved.
        explode: true
        in: query
        name: station
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Get all the current terms
      tags:
      - station
      x-accepts: application/json
  /swipe/saveanonym:
    post:
      operationId: swipeSaveanonym
      requestBody:
        content:
          application/json:
            schema:
              properties:
                station:
                  description: The id of the sign-in station.
                  format: uuid
                  type: string
                client:
                  description: The id of the client where this swipe is being generated.
                  type: string
                time:
                  description: The date and time of the swipe. Now is considered if
                    omitted.
                  format: date-time
                  type: string
                user:
                  description: The user's card number.
                  type: string
                event:
                  description: The id of the event whose swipe has to be saved.
                  format: uuid
                  type: string
                location:
                  description: The id of the location where the swipe has to be saved.
                  format: uuid
                  type: string
                type:
                  description: Specifies the attendance type (0 = Sign-In, 1 = Sign-Out).
                  format: int32
                  type: integer
              required:
              - station
              - user
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Creates a new swipe from a sign-in station, and if possible, creates
        the attendance log
      tags:
      - swipe
      x-contentType: application/json
      x-accepts: application/json
  /notification/getforstation:
    get:
      operationId: notificationGetforstation
      parameters:
      - description: The id of the sign-in station to get.
        explode: true
        in: query
        name: station
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The card of the user.
        explode: true
        in: query
        name: user
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Gets all public (in station) notifications for the specific user
      tags:
      - notification
      x-accepts: application/json
  /advrole/{id}:
    delete:
      description: Allows the user to delete a role from the list of available roles.
      operationId: advroleDelete
      parameters:
      - description: The id of the location to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a role
      tags:
      - advrole
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view a role and its details.
      operationId: advroleGet
      parameters:
      - description: The id of the location to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of a role
      tags:
      - advrole
      x-accepts: application/json
    post:
      description: Allows the user to create or edit a role's permissions.
      operationId: advroleSave
      parameters:
      - description: The id of the role to save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the role.
                  type: string
                description:
                  description: The description of the role, for admin use.
                  type: string
                policies:
                  description: The policies for the role.
                  type: string
                viewroles:
                  description: CSV list of the roles this role can view.
                  type: string
                editroles:
                  description: CSV list of the roles this role can edit.
                  type: string
              required:
              - description
              - editroles
              - name
              - policies
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit a role
      tags:
      - advrole
      x-contentType: application/json
      x-accepts: application/json
  /advrole/list:
    get:
      operationId: advroleList
      parameters:
      - description: True to include the policies, defaults to false.
        explode: true
        in: query
        name: includepolicies
        required: false
        schema:
          type: boolean
        style: form
      - description: True to include the internal roles too.
        explode: true
        in: query
        name: includeinternal
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by name of the role.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists the roles for the current account
      tags:
      - advrole
      x-accepts: application/json
  /advrole/listtemplates:
    get:
      description: Allows the user to view the full list of available role templates.
      operationId: advroleListtemplates
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of role templates
      tags:
      - advrole
      x-accepts: application/json
  /advrole/listmaps:
    get:
      operationId: advroleListmaps
      parameters:
      - description: The id of the role to list the maps.
        explode: true
        in: query
        name: roleid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists the maps a roles is mapped to
      tags:
      - advrole
      x-accepts: application/json
  /advrole/listrolesmapped:
    get:
      operationId: advroleListrolesmapped
      parameters:
      - description: List only the roles in the specified map.
        explode: true
        in: query
        name: map
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists the roles mappings
      tags:
      - advrole
      x-accepts: application/json
  /advrole/savemapping:
    post:
      description: Allows the user to add a role to a mapped category on the 'Role
        Mapping' page.
      operationId: advroleSavemapping
      requestBody:
        content:
          application/json:
            schema:
              properties:
                map:
                  description: The map name to save the role.
                  type: string
                roleid:
                  description: The id of the role.
                  format: uuid
                  type: string
              required:
              - map
              - roleid
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Saves a role mapping
      tags:
      - advrole
      x-contentType: application/json
      x-accepts: application/json
  /advrole/deletemapping:
    delete:
      description: Allows the user to delete a role from its mapped categories on
        the 'Role Mapping' page.
      operationId: advroleDeletemapping
      requestBody:
        content:
          application/json:
            schema:
              properties:
                map:
                  description: The map name to save the role.
                  type: string
                roleid:
                  description: The id of the role.
                  format: uuid
                  type: string
              required:
              - map
              - roleid
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a role mapping
      tags:
      - advrole
      x-contentType: application/json
      x-accepts: application/json
  /advrole/checkperm:
    get:
      operationId: advroleCheckperm
      parameters:
      - description: CSV list of the role ids to check
        explode: true
        in: query
        name: roles
        required: true
        schema:
          type: string
        style: form
      - description: CSV list of the permissions to check
        explode: true
        in: query
        name: permissions
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Checks the permissions are assigned for the given roles
      tags:
      - advrole
      x-accepts: application/json
  /advrole/addmissing:
    get:
      operationId: advroleAddmissing
      parameters:
      - description: CSV list of the role ids to check
        explode: true
        in: query
        name: roles
        required: true
        schema:
          type: string
        style: form
      - description: CSV list of the permissions to check
        explode: true
        in: query
        name: permissions
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Adds the missing permissions to a role. Requires access to advrole.save
      tags:
      - advrole
      x-accepts: application/json
  /advroles/userlist:
    get:
      operationId: advrolesUserlist
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The id of the role to filter users by, or empty to return all
          users.
        explode: true
        in: query
        name: roleid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: If is 1 then only the users without a card are returned, otherwise
          all users are returned.
        explode: true
        in: query
        name: onlywithoutcard
        required: false
        schema:
          type: string
        style: form
      - description: The size in pixels of the photo URLs returned. Defaults to 40.
          If the size specified is not available, a similar one will be returned.
        explode: true
        in: query
        name: photosize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: List users. Alias to user.list, use that one instead.
      tags:
      - advroles
      x-accepts: application/json
  /advrole/userupgrade:
    get:
      description: Allow the user to add a role to another user, given that he has
        access to view that other user and edit people with that new role.
      operationId: advroleUserupgrade
      parameters:
      - description: Id of the user to upgrade
        explode: true
        in: query
        name: userid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: Id of the role to add
        explode: true
        in: query
        name: roleid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Upgrade a user to another role (requires permission to edit those roles)
      tags:
      - advrole
      x-accepts: application/json
  /security/assessuser:
    get:
      operationId: securityAssessuser
      parameters:
      - description: User ID to list the effective permissions.
        explode: true
        in: query
        name: userid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Returns the list of permissions for a specific user
      tags:
      - security
      x-accepts: application/json
  /security/assessrole:
    get:
      operationId: securityAssessrole
      parameters:
      - description: Role ID to list the effective permissions.
        explode: true
        in: query
        name: roleid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Returns the list of permissions for a specific role
      tags:
      - security
      x-accepts: application/json
  /security/assesspermission:
    get:
      operationId: securityAssesspermission
      parameters:
      - description: Name of the action or command to get the roles.
        explode: true
        in: query
        name: commandname
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Returns the list of users for a specific permission
      tags:
      - security
      x-accepts: application/json
  /security/assessscope:
    get:
      operationId: securityAssessscope
      parameters:
      - description: Location ID to list the users with that scope.
        explode: true
        in: query
        name: locationid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Returns the list of users for a specific user
      tags:
      - security
      x-accepts: application/json
  /report/permissionsbyuser:
    get:
      description: Lists all the users in the system including their corresponding
        permissions.
      operationId: reportPermissionsbyuser
      parameters:
      - description: 'A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3'
        explode: true
        in: query
        name: params
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Permissions by user report
      tags:
      - report
      x-accepts: application/json
  /credit/{id}:
    delete:
      description: Allows the user to delete credits.
      operationId: creditDelete
      parameters:
      - description: The id of the credit to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Delete a credit
      tags:
      - credit
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Allows the user to view an credit and its details.
      operationId: creditGet
      parameters:
      - description: The id of the credit to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View details of assigned credit
      tags:
      - credit
      x-accepts: application/json
    post:
      description: Allows the user to create or edit credit for a user
      operationId: creditSave
      parameters:
      - description: The id of the credit save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                user:
                  description: The Id of the user to add credit.
                  format: uuid
                  type: string
                amount:
                  description: The amount of credits.
                  format: float
                  type: number
                paidamount:
                  description: The amount paid by the user.
                  format: float
                  type: number
                validfrom:
                  description: The date when it starts being valid.
                  format: date-time
                  type: string
                validto:
                  description: The date when it ends being valid.
                  format: date-time
                  type: string
                discountmethod:
                  description: 'One of the discount credit methods: visit, minutes,
                    full-hours, partial-hours.'
                  type: string
                notes:
                  description: Admin notes
                  type: string
                rulesjson:
                  description: The validations rules in JSON format.
                  type: string
                sourceplanid:
                  description: The Id of the plan used to create the credit.
                  format: uuid
                  type: string
              required:
              - amount
              - discountmethod
              - user
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit credit for a user
      tags:
      - credit
      x-contentType: application/json
      x-accepts: application/json
  /credit/list:
    get:
      description: Allows the user to view the full list of credits for a user.
      operationId: creditList
      parameters:
      - description: The id of the user.
        explode: true
        in: query
        name: user
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of credits for a specific user
      tags:
      - credit
      x-accepts: application/json
  /credit/listmine:
    get:
      description: Allows the current user to view his full list of credits.
      operationId: creditListmine
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View the list of credits of the current user
      tags:
      - credit
      x-accepts: application/json
  /credit/getuserbalance:
    get:
      description: Allows the user to view the total amount of credits of a specified
        user.
      operationId: creditGetuserbalance
      parameters:
      - description: The id of the user whose balance has to be returned.
        explode: true
        in: query
        name: user
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get the total amount of credits of the specified user
      tags:
      - credit
      x-accepts: application/json
  /credit/listdetails:
    get:
      operationId: creditListdetails
      parameters:
      - description: The id of the credit to look up for details.
        explode: true
        in: query
        name: credit
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the credit usage details
      tags:
      - credit
      x-accepts: application/json
  /credit/savedetails:
    post:
      operationId: creditSavedetails
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  description: The id of the credit detail to save (leave empty to
                    create a new one).
                  format: uuid
                  type: string
                credit:
                  description: The Id of the credit.
                  format: uuid
                  type: string
                amount:
                  description: The amount of credits, if updating, it will not be
                    used.
                  format: float
                  type: number
                notes:
                  description: Admin notes
                  type: string
              required:
              - credit
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Create or edit credit details
      tags:
      - credit
      x-contentType: application/json
      x-accepts: application/json
  /creditplan/{id}:
    delete:
      operationId: creditplanDelete
      parameters:
      - description: The id of the credit plan to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Deletes a credit plan
      tags:
      - creditplan
      x-contentType: application/json
      x-accepts: application/json
    get:
      operationId: creditplanGet
      parameters:
      - description: The id of the credit plan to get.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets a credit plan
      tags:
      - creditplan
      x-accepts: application/json
    post:
      operationId: creditplanSave
      parameters:
      - description: The id of the credit save (leave empty to create a new one).
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the membership plan
                  type: string
                description:
                  description: The description of the membership plan
                  type: string
                salesnotes:
                  description: Sale point notes or comments.
                  type: string
                amount:
                  description: The amount of credits.
                  format: float
                  type: number
                paymentamount:
                  description: The amount that the user must pay.
                  format: float
                  type: number
                rulesjson:
                  description: The validations rules in JSON format.
                  type: string
                discountmethod:
                  description: 'One of the discount credit methods: visit, minutes,
                    full-hours, partial-hours.'
                  type: string
                validfor:
                  description: 'Valid for, format example: 1h, 2d, 3w, 1m, 1y.'
                  type: string
              required:
              - amount
              - discountmethod
              - name
              - paymentamount
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Saves a credit plan
      tags:
      - creditplan
      x-contentType: application/json
      x-accepts: application/json
  /creditplan/list:
    get:
      operationId: creditplanList
      parameters:
      - description: The first record to return.
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int32
          type: integer
        style: form
      - description: The max number of records to return.
        explode: true
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Gets the credit plans available
      tags:
      - creditplan
      x-accepts: application/json
  /credit/discountmethods:
    get:
      operationId: creditDiscountmethods
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      summary: Gets the valid discount methods.
      tags:
      - credit
      x-accepts: application/json
  /sessionreg/listsessions:
    get:
      description: Allows the user to view all the sessions available for a recurring
        event.
      operationId: sessionregListsessions
      parameters:
      - description: The event id to list sessions.
        explode: true
        in: query
        name: eventid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The date of the session to find.
        explode: true
        in: query
        name: sessiondate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: List the sessions available for a specific event
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/listupcoming:
    get:
      description: Allows the user to view the full list of upcoming events.
      operationId: sessionregListupcoming
      parameters:
      - description: Only sessions in the week of the specified date will be returned.
        explode: true
        in: query
        name: date
        required: true
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of upcoming event sessions
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/listupcomingevent:
    get:
      description: Allows the user to view the upcoming recurring sessions of a specified
        event.
      operationId: sessionregListupcomingevent
      parameters:
      - description: Start date to filter the returned sessions.
        explode: true
        in: query
        name: date
        required: true
        schema:
          format: date-time
          type: string
        style: form
      - description: The id of the event whose sessions will be returned
        explode: true
        in: query
        name: event
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View a list of upcoming sessions of a particular event
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/getusers:
    get:
      description: Allows the user to view the registration for a specified event
        session.
      operationId: sessionregGetusers
      parameters:
      - description: The event id to list sessions.
        explode: true
        in: query
        name: eventid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The date of the session to find.
        explode: true
        in: query
        name: sessiondate
        required: true
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists the registrations for a specific session
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/adduser:
    get:
      description: Allows the user to register another user for an upcoming event.
      operationId: sessionregAdduser
      parameters:
      - description: The id of the user to add.
        explode: true
        in: query
        name: userid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the event.
        explode: true
        in: query
        name: eventid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The date and time when the session starts.
        explode: true
        in: query
        name: sessiondate
        required: true
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Register users for events
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/addcurrentuser:
    get:
      description: Allows the user to register themselves for an event.
      operationId: sessionregAddcurrentuser
      parameters:
      - description: The id of the event.
        explode: true
        in: query
        name: eventid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The date and time when the session starts.
        explode: true
        in: query
        name: sessiondate
        required: true
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Register current user to an event session
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/removeuser:
    get:
      description: Allows the user to un-register another user from an event.
      operationId: sessionregRemoveuser
      parameters:
      - description: The id of the user to remove.
        explode: true
        in: query
        name: userid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the event.
        explode: true
        in: query
        name: eventid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The date and time when the session starts.
        explode: true
        in: query
        name: sessiondate
        required: true
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Removes a user from an event session
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/removecurrentuser:
    get:
      description: Allows the user to un-register themselves from an event.
      operationId: sessionregRemovecurrentuser
      parameters:
      - description: The id of the event.
        explode: true
        in: query
        name: eventid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: The date and time when the session starts.
        explode: true
        in: query
        name: sessiondate
        required: true
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Unregister current user from an event session
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/getsessions:
    get:
      description: Allows the user to view the session registrations for a specified
        user, provided they have the ability to view that user.
      operationId: sessionregGetsessions
      parameters:
      - description: The user id to list sessions.
        explode: true
        in: query
        name: userid
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Lists the registrations for a specific user
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/getmysessions:
    get:
      operationId: sessionregGetmysessions
      parameters:
      - description: Start date to filter the sessions.
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: View all the sessions the logged user is registered to
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/getsettings:
    get:
      description: Allows the user to view a event's session registration settings.
      operationId: sessionregGetsettings
      parameters:
      - description: The id of the location to save settings.
        explode: true
        in: query
        name: locationid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The id of the event to save settings.
        explode: true
        in: query
        name: eventid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The date and time when the session starts.
        explode: true
        in: query
        name: sessiondate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: True to get the location/event/session specific settings without
          looking for the more global settings.
        explode: true
        in: query
        name: noinherit
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Get the settings for session registration
      tags:
      - sessionreg
      x-accepts: application/json
  /sessionreg/savesettings:
    post:
      description: Allows the user to save the settings for an event.
      operationId: sessionregSavesettings
      requestBody:
        content:
          application/json:
            schema:
              properties:
                locationid:
                  description: The id of the location to save settings.
                  format: uuid
                  type: string
                eventid:
                  description: The id of the event to save settings.
                  format: uuid
                  type: string
                sessiondate:
                  description: The date and time when the session starts.
                  format: date-time
                  type: string
                enabled:
                  description: Whether the registration is enabled or not.
                  type: boolean
                capacity:
                  description: The capacity of the class.
                  format: int32
                  type: integer
                trainerid:
                  description: The trainer ID.
                  format: uuid
                  type: string
                showupcomingdays:
                  description: '# of days to show upcoming sessions'
                  format: int32
                  type: integer
                registernolessdurationbasis:
                  description: Specifies the time unit of measurement to restrict
                    the period when attendees can register to sessions (no less than
                    0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).
                  format: int32
                  type: integer
                registernolessduration:
                  description: Specifies the duration of the period when attendees
                    can register to sessions (no less than the specified magnitude).
                  format: int32
                  type: integer
                registernomoredurationbasis:
                  description: Specifies the time unit of measurement to restrict
                    the period when attendees can register to sessions (no more than
                    0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).
                  format: int32
                  type: integer
                registernomoreduration:
                  description: Specifies the duration of the period when attendees
                    can register to sessions (no more than the specified magnitude).
                  format: int32
                  type: integer
                unregisternolessdurationbasis:
                  description: Specifies the time unit of measurement to restrict
                    the period when attendees can unregister from sessions (no less
                    than 0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).
                  format: int32
                  type: integer
                unregisternolessduration:
                  description: Specifies the duration of the period when attendees
                    can unregister from sessions (no less than the specified magnitude).
                  format: int32
                  type: integer
                remindhours:
                  description: Specifies the hours before the event when the reminder
                    is sent.
                  format: int32
                  type: integer
      responses:
        "200":
          $ref: '#/components/schemas/ActionResult'
      security:
      - bearerAuth: []
      summary: Save the settings for an event's session registration
      tags:
      - sessionreg
      x-contentType: application/json
      x-accepts: application/json
components:
  schemas:
    ActionResult:
      description: Default action result
      properties:
        success:
          description: Specifies if the execution of the action was successful
          type: boolean
        results:
          description: Objects returned by the action
          items:
            properties:
              prop1:
                description: A result property...
                type: object
              prop2:
                description: Another result property...
                type: object
          type: array
        message:
          description: Message with context information about the response
          type: string
      type: object
    ErrorActionResult:
      description: Object returned when the action execution failed
      properties:
        success:
          description: Specifies if the execution of the action was successful
          type: boolean
        message:
          description: Message with context information about the response
          type: string
        error_flag:
          description: Error flag that describes the error in the execution
          type: string
        domain:
          description: Contains the domain of the account where the action was applied
            on
          type: string
        redirect_url:
          description: Contains the url to redirect to when an error is found during
            the execution of the action
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: string
      description: "Authorization header using the Bearer scheme. \r\n\r\nEnter 'Bearer'\
        \ [space] and then the token returned by the 'login' endpoint.\r\n\r\nExample:\
        \ \"Authorization: Bearer xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\""
      scheme: bearer
      type: http

