/*
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationApi {
    private ApiClient localVarApiClient;

    public NotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for notificationDelete
     * @param id The id of the notification to delete. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDeleteCall(UUID id, oas_any_type_not_mapped body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/notification/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationDeleteValidateBeforeCall(UUID id, oas_any_type_not_mapped body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationDelete(Async)");
        }
        

        okhttp3.Call localVarCall = notificationDeleteCall(id, body, _callback);
        return localVarCall;

    }

    /**
     * Delete a notification
     * Allows the user to delete an existing notification.
     * @param id The id of the notification to delete. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationDelete(UUID id, oas_any_type_not_mapped body) throws ApiException {
        notificationDeleteWithHttpInfo(id, body);
    }

    /**
     * Delete a notification
     * Allows the user to delete an existing notification.
     * @param id The id of the notification to delete. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationDeleteWithHttpInfo(UUID id, oas_any_type_not_mapped body) throws ApiException {
        okhttp3.Call localVarCall = notificationDeleteValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a notification (asynchronously)
     * Allows the user to delete an existing notification.
     * @param id The id of the notification to delete. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDeleteAsync(UUID id, oas_any_type_not_mapped body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationDeleteValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationGet
     * @param id The id of the notification to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationGet(Async)");
        }
        

        okhttp3.Call localVarCall = notificationGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * View a notification
     * 
     * @param id The id of the notification to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationGet(UUID id) throws ApiException {
        notificationGetWithHttpInfo(id);
    }

    /**
     * View a notification
     * 
     * @param id The id of the notification to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = notificationGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a notification (asynchronously)
     * 
     * @param id The id of the notification to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationGetAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationGetforstation
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationGetforstationCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/getforstation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationGetforstationValidateBeforeCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling notificationGetforstation(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling notificationGetforstation(Async)");
        }
        

        okhttp3.Call localVarCall = notificationGetforstationCall(station, user, _callback);
        return localVarCall;

    }

    /**
     * Gets all public (in station) notifications for the specific user
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationGetforstation(UUID station, String user) throws ApiException {
        notificationGetforstationWithHttpInfo(station, user);
    }

    /**
     * Gets all public (in station) notifications for the specific user
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationGetforstationWithHttpInfo(UUID station, String user) throws ApiException {
        okhttp3.Call localVarCall = notificationGetforstationValidateBeforeCall(station, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets all public (in station) notifications for the specific user (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationGetforstationAsync(UUID station, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationGetforstationValidateBeforeCall(station, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationGetunreadcount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationGetunreadcountCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/getunreadcount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationGetunreadcountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = notificationGetunreadcountCall(_callback);
        return localVarCall;

    }

    /**
     * Get the number of unread notifications
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationGetunreadcount() throws ApiException {
        notificationGetunreadcountWithHttpInfo();
    }

    /**
     * Get the number of unread notifications
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationGetunreadcountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = notificationGetunreadcountValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the number of unread notifications (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationGetunreadcountAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationGetunreadcountValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationList
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param recipient The recipient whose notifications have to be listed. (optional)
     * @param status The status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
     * @param sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
     * @param sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationListCall(Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (recipient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipient", recipient));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (sentonscreen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentonscreen", sentonscreen));
        }

        if (sentemail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentemail", sentemail));
        }

        if (sentsms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentsms", sentsms));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationListValidateBeforeCall(Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling notificationList(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling notificationList(Async)");
        }
        

        okhttp3.Call localVarCall = notificationListCall(from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms, _callback);
        return localVarCall;

    }

    /**
     * View a list of all sent notifications
     * Allows the user to view the list of all sent notifications.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param recipient The recipient whose notifications have to be listed. (optional)
     * @param status The status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
     * @param sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
     * @param sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationList(Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms) throws ApiException {
        notificationListWithHttpInfo(from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms);
    }

    /**
     * View a list of all sent notifications
     * Allows the user to view the list of all sent notifications.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param recipient The recipient whose notifications have to be listed. (optional)
     * @param status The status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
     * @param sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
     * @param sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationListWithHttpInfo(Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms) throws ApiException {
        okhttp3.Call localVarCall = notificationListValidateBeforeCall(from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of all sent notifications (asynchronously)
     * Allows the user to view the list of all sent notifications.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param recipient The recipient whose notifications have to be listed. (optional)
     * @param status The status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
     * @param sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
     * @param sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationListAsync(Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationListValidateBeforeCall(from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationListmine
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Specifies the status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationListmineCall(Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/listmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationListmineValidateBeforeCall(Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling notificationListmine(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling notificationListmine(Async)");
        }
        

        okhttp3.Call localVarCall = notificationListmineCall(from, count, status, startdate, enddate, _callback);
        return localVarCall;

    }

    /**
     * View all the notifications sent to the current user
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Specifies the status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationListmine(Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        notificationListmineWithHttpInfo(from, count, status, startdate, enddate);
    }

    /**
     * View all the notifications sent to the current user
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Specifies the status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationListmineWithHttpInfo(Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = notificationListmineValidateBeforeCall(from, count, status, startdate, enddate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the notifications sent to the current user (asynchronously)
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Specifies the status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationListmineAsync(Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationListmineValidateBeforeCall(from, count, status, startdate, enddate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationMarkasread
     * @param id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationMarkasreadCall(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/markasread";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationMarkasreadValidateBeforeCall(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = notificationMarkasreadCall(id, status, startdate, enddate, _callback);
        return localVarCall;

    }

    /**
     * Mark a notification as read
     * 
     * @param id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationMarkasread(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        notificationMarkasreadWithHttpInfo(id, status, startdate, enddate);
    }

    /**
     * Mark a notification as read
     * 
     * @param id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationMarkasreadWithHttpInfo(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = notificationMarkasreadValidateBeforeCall(id, status, startdate, enddate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark a notification as read (asynchronously)
     * 
     * @param id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationMarkasreadAsync(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationMarkasreadValidateBeforeCall(id, status, startdate, enddate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationMarkasunread
     * @param id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationMarkasunreadCall(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/markasunread";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationMarkasunreadValidateBeforeCall(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = notificationMarkasunreadCall(id, status, startdate, enddate, _callback);
        return localVarCall;

    }

    /**
     * Mark a notification as unread
     * 
     * @param id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationMarkasunread(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        notificationMarkasunreadWithHttpInfo(id, status, startdate, enddate);
    }

    /**
     * Mark a notification as unread
     * 
     * @param id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationMarkasunreadWithHttpInfo(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = notificationMarkasunreadValidateBeforeCall(id, status, startdate, enddate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark a notification as unread (asynchronously)
     * 
     * @param id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationMarkasunreadAsync(UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationMarkasunreadValidateBeforeCall(id, status, startdate, enddate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationSend
     * @param emailenabled Whether send the notification via email. (required)
     * @param onscreenenabled Whether to display the notification on screen. (required)
     * @param smsenabled Whether to send the notification via text message. (required)
     * @param title Notification title. (required)
     * @param tousers Comma-separated Ids of users to send the notification. (optional)
     * @param togroups Comma-separated Ids of user groups to send the notification. (optional)
     * @param onscreenbody Body of the message for on-screen display. (optional)
     * @param onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
     * @param onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
     * @param onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
     * @param onscreenduration Time in seconds to display the notification. (optional)
     * @param showonstation Whether to show the notification in the sign-in station. (optional)
     * @param emailfromname Name of the email sender. (optional)
     * @param emailfrom Reply-to email. (optional)
     * @param emailsubject Subject of the email. (optional)
     * @param emailbody Body of the email. (optional)
     * @param textmessagebody Message for SMS. Max 160 characters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSendCall(Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tousers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tousers", tousers));
        }

        if (togroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("togroups", togroups));
        }

        if (emailenabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailenabled", emailenabled));
        }

        if (onscreenenabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenenabled", onscreenenabled));
        }

        if (smsenabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smsenabled", smsenabled));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (onscreenbody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenbody", onscreenbody));
        }

        if (onscreenclick != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenclick", onscreenclick));
        }

        if (onscreenurl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenurl", onscreenurl));
        }

        if (onscreenclass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenclass", onscreenclass));
        }

        if (onscreenduration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenduration", onscreenduration));
        }

        if (showonstation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showonstation", showonstation));
        }

        if (emailfromname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailfromname", emailfromname));
        }

        if (emailfrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailfrom", emailfrom));
        }

        if (emailsubject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailsubject", emailsubject));
        }

        if (emailbody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailbody", emailbody));
        }

        if (textmessagebody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textmessagebody", textmessagebody));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationSendValidateBeforeCall(Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'emailenabled' is set
        if (emailenabled == null) {
            throw new ApiException("Missing the required parameter 'emailenabled' when calling notificationSend(Async)");
        }
        
        // verify the required parameter 'onscreenenabled' is set
        if (onscreenenabled == null) {
            throw new ApiException("Missing the required parameter 'onscreenenabled' when calling notificationSend(Async)");
        }
        
        // verify the required parameter 'smsenabled' is set
        if (smsenabled == null) {
            throw new ApiException("Missing the required parameter 'smsenabled' when calling notificationSend(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling notificationSend(Async)");
        }
        

        okhttp3.Call localVarCall = notificationSendCall(emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody, _callback);
        return localVarCall;

    }

    /**
     * Send notifications on screen, via email or text to users
     * Allows the user to send notifications to other users through the Send Message link.
     * @param emailenabled Whether send the notification via email. (required)
     * @param onscreenenabled Whether to display the notification on screen. (required)
     * @param smsenabled Whether to send the notification via text message. (required)
     * @param title Notification title. (required)
     * @param tousers Comma-separated Ids of users to send the notification. (optional)
     * @param togroups Comma-separated Ids of user groups to send the notification. (optional)
     * @param onscreenbody Body of the message for on-screen display. (optional)
     * @param onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
     * @param onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
     * @param onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
     * @param onscreenduration Time in seconds to display the notification. (optional)
     * @param showonstation Whether to show the notification in the sign-in station. (optional)
     * @param emailfromname Name of the email sender. (optional)
     * @param emailfrom Reply-to email. (optional)
     * @param emailsubject Subject of the email. (optional)
     * @param emailbody Body of the email. (optional)
     * @param textmessagebody Message for SMS. Max 160 characters. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationSend(Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody) throws ApiException {
        notificationSendWithHttpInfo(emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody);
    }

    /**
     * Send notifications on screen, via email or text to users
     * Allows the user to send notifications to other users through the Send Message link.
     * @param emailenabled Whether send the notification via email. (required)
     * @param onscreenenabled Whether to display the notification on screen. (required)
     * @param smsenabled Whether to send the notification via text message. (required)
     * @param title Notification title. (required)
     * @param tousers Comma-separated Ids of users to send the notification. (optional)
     * @param togroups Comma-separated Ids of user groups to send the notification. (optional)
     * @param onscreenbody Body of the message for on-screen display. (optional)
     * @param onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
     * @param onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
     * @param onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
     * @param onscreenduration Time in seconds to display the notification. (optional)
     * @param showonstation Whether to show the notification in the sign-in station. (optional)
     * @param emailfromname Name of the email sender. (optional)
     * @param emailfrom Reply-to email. (optional)
     * @param emailsubject Subject of the email. (optional)
     * @param emailbody Body of the email. (optional)
     * @param textmessagebody Message for SMS. Max 160 characters. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationSendWithHttpInfo(Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody) throws ApiException {
        okhttp3.Call localVarCall = notificationSendValidateBeforeCall(emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send notifications on screen, via email or text to users (asynchronously)
     * Allows the user to send notifications to other users through the Send Message link.
     * @param emailenabled Whether send the notification via email. (required)
     * @param onscreenenabled Whether to display the notification on screen. (required)
     * @param smsenabled Whether to send the notification via text message. (required)
     * @param title Notification title. (required)
     * @param tousers Comma-separated Ids of users to send the notification. (optional)
     * @param togroups Comma-separated Ids of user groups to send the notification. (optional)
     * @param onscreenbody Body of the message for on-screen display. (optional)
     * @param onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
     * @param onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
     * @param onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
     * @param onscreenduration Time in seconds to display the notification. (optional)
     * @param showonstation Whether to show the notification in the sign-in station. (optional)
     * @param emailfromname Name of the email sender. (optional)
     * @param emailfrom Reply-to email. (optional)
     * @param emailsubject Subject of the email. (optional)
     * @param emailbody Body of the email. (optional)
     * @param textmessagebody Message for SMS. Max 160 characters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSendAsync(Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationSendValidateBeforeCall(emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationSendonscreen
     * @param notification The ID of the notification to send. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSendonscreenCall(UUID notification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notification/sendonscreen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (notification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification", notification));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationSendonscreenValidateBeforeCall(UUID notification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'notification' is set
        if (notification == null) {
            throw new ApiException("Missing the required parameter 'notification' when calling notificationSendonscreen(Async)");
        }
        

        okhttp3.Call localVarCall = notificationSendonscreenCall(notification, _callback);
        return localVarCall;

    }

    /**
     * Send on-screen notifications
     * 
     * @param notification The ID of the notification to send. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationSendonscreen(UUID notification) throws ApiException {
        notificationSendonscreenWithHttpInfo(notification);
    }

    /**
     * Send on-screen notifications
     * 
     * @param notification The ID of the notification to send. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationSendonscreenWithHttpInfo(UUID notification) throws ApiException {
        okhttp3.Call localVarCall = notificationSendonscreenValidateBeforeCall(notification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send on-screen notifications (asynchronously)
     * 
     * @param notification The ID of the notification to send. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationSendonscreenAsync(UUID notification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationSendonscreenValidateBeforeCall(notification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
