/*
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionregApi {
    private ApiClient localVarApiClient;

    public SessionregApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionregApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for sessionregAddcurrentuser
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregAddcurrentuserCall(UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/addcurrentuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregAddcurrentuserValidateBeforeCall(UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregAddcurrentuser(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregAddcurrentuser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregAddcurrentuserCall(eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Register current user to an event session
     * Allows the user to register themselves for an event.
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregAddcurrentuser(UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregAddcurrentuserWithHttpInfo(eventid, sessiondate);
    }

    /**
     * Register current user to an event session
     * Allows the user to register themselves for an event.
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregAddcurrentuserWithHttpInfo(UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregAddcurrentuserValidateBeforeCall(eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register current user to an event session (asynchronously)
     * Allows the user to register themselves for an event.
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregAddcurrentuserAsync(UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregAddcurrentuserValidateBeforeCall(eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregAdduser
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregAdduserCall(UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/adduser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregAdduserValidateBeforeCall(UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling sessionregAdduser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregAdduser(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregAdduser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregAdduserCall(userid, eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Register users for events
     * Allows the user to register another user for an upcoming event.
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregAdduser(UUID userid, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregAdduserWithHttpInfo(userid, eventid, sessiondate);
    }

    /**
     * Register users for events
     * Allows the user to register another user for an upcoming event.
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregAdduserWithHttpInfo(UUID userid, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregAdduserValidateBeforeCall(userid, eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register users for events (asynchronously)
     * Allows the user to register another user for an upcoming event.
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregAdduserAsync(UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregAdduserValidateBeforeCall(userid, eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregGetmysessions
     * @param date Start date to filter the sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregGetmysessionsCall(OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/getmysessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregGetmysessionsValidateBeforeCall(OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionregGetmysessionsCall(date, _callback);
        return localVarCall;

    }

    /**
     * View all the sessions the logged user is registered to
     * 
     * @param date Start date to filter the sessions. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregGetmysessions(OffsetDateTime date) throws ApiException {
        sessionregGetmysessionsWithHttpInfo(date);
    }

    /**
     * View all the sessions the logged user is registered to
     * 
     * @param date Start date to filter the sessions. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregGetmysessionsWithHttpInfo(OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = sessionregGetmysessionsValidateBeforeCall(date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the sessions the logged user is registered to (asynchronously)
     * 
     * @param date Start date to filter the sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregGetmysessionsAsync(OffsetDateTime date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregGetmysessionsValidateBeforeCall(date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregGetsessions
     * @param userid The user id to list sessions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregGetsessionsCall(UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/getsessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregGetsessionsValidateBeforeCall(UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling sessionregGetsessions(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregGetsessionsCall(userid, _callback);
        return localVarCall;

    }

    /**
     * Lists the registrations for a specific user
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param userid The user id to list sessions. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregGetsessions(UUID userid) throws ApiException {
        sessionregGetsessionsWithHttpInfo(userid);
    }

    /**
     * Lists the registrations for a specific user
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param userid The user id to list sessions. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregGetsessionsWithHttpInfo(UUID userid) throws ApiException {
        okhttp3.Call localVarCall = sessionregGetsessionsValidateBeforeCall(userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the registrations for a specific user (asynchronously)
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param userid The user id to list sessions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregGetsessionsAsync(UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregGetsessionsValidateBeforeCall(userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregGetsettings
     * @param locationid The id of the location to save settings. (optional)
     * @param eventid The id of the event to save settings. (optional)
     * @param sessiondate The date and time when the session starts. (optional)
     * @param noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregGetsettingsCall(UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/getsettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        if (noinherit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noinherit", noinherit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregGetsettingsValidateBeforeCall(UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionregGetsettingsCall(locationid, eventid, sessiondate, noinherit, _callback);
        return localVarCall;

    }

    /**
     * Get the settings for session registration
     * Allows the user to view a event&#39;s session registration settings.
     * @param locationid The id of the location to save settings. (optional)
     * @param eventid The id of the event to save settings. (optional)
     * @param sessiondate The date and time when the session starts. (optional)
     * @param noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregGetsettings(UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit) throws ApiException {
        sessionregGetsettingsWithHttpInfo(locationid, eventid, sessiondate, noinherit);
    }

    /**
     * Get the settings for session registration
     * Allows the user to view a event&#39;s session registration settings.
     * @param locationid The id of the location to save settings. (optional)
     * @param eventid The id of the event to save settings. (optional)
     * @param sessiondate The date and time when the session starts. (optional)
     * @param noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregGetsettingsWithHttpInfo(UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit) throws ApiException {
        okhttp3.Call localVarCall = sessionregGetsettingsValidateBeforeCall(locationid, eventid, sessiondate, noinherit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the settings for session registration (asynchronously)
     * Allows the user to view a event&#39;s session registration settings.
     * @param locationid The id of the location to save settings. (optional)
     * @param eventid The id of the event to save settings. (optional)
     * @param sessiondate The date and time when the session starts. (optional)
     * @param noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregGetsettingsAsync(UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregGetsettingsValidateBeforeCall(locationid, eventid, sessiondate, noinherit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregGetusers
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregGetusersCall(UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/getusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregGetusersValidateBeforeCall(UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregGetusers(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregGetusers(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregGetusersCall(eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Lists the registrations for a specific session
     * Allows the user to view the registration for a specified event session.
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregGetusers(UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregGetusersWithHttpInfo(eventid, sessiondate);
    }

    /**
     * Lists the registrations for a specific session
     * Allows the user to view the registration for a specified event session.
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregGetusersWithHttpInfo(UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregGetusersValidateBeforeCall(eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the registrations for a specific session (asynchronously)
     * Allows the user to view the registration for a specified event session.
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregGetusersAsync(UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregGetusersValidateBeforeCall(eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregListsessions
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregListsessionsCall(UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/listsessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregListsessionsValidateBeforeCall(UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregListsessions(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregListsessionsCall(eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * List the sessions available for a specific event
     * Allows the user to view all the sessions available for a recurring event.
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregListsessions(UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregListsessionsWithHttpInfo(eventid, sessiondate);
    }

    /**
     * List the sessions available for a specific event
     * Allows the user to view all the sessions available for a recurring event.
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregListsessionsWithHttpInfo(UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregListsessionsValidateBeforeCall(eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List the sessions available for a specific event (asynchronously)
     * Allows the user to view all the sessions available for a recurring event.
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregListsessionsAsync(UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregListsessionsValidateBeforeCall(eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregListupcoming
     * @param date Only sessions in the week of the specified date will be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregListupcomingCall(OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/listupcoming";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregListupcomingValidateBeforeCall(OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling sessionregListupcoming(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregListupcomingCall(date, _callback);
        return localVarCall;

    }

    /**
     * View a list of upcoming event sessions
     * Allows the user to view the full list of upcoming events.
     * @param date Only sessions in the week of the specified date will be returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregListupcoming(OffsetDateTime date) throws ApiException {
        sessionregListupcomingWithHttpInfo(date);
    }

    /**
     * View a list of upcoming event sessions
     * Allows the user to view the full list of upcoming events.
     * @param date Only sessions in the week of the specified date will be returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregListupcomingWithHttpInfo(OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = sessionregListupcomingValidateBeforeCall(date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of upcoming event sessions (asynchronously)
     * Allows the user to view the full list of upcoming events.
     * @param date Only sessions in the week of the specified date will be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregListupcomingAsync(OffsetDateTime date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregListupcomingValidateBeforeCall(date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregListupcomingevent
     * @param date Start date to filter the returned sessions. (required)
     * @param event The id of the event whose sessions will be returned (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregListupcomingeventCall(OffsetDateTime date, UUID event, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/listupcomingevent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregListupcomingeventValidateBeforeCall(OffsetDateTime date, UUID event, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling sessionregListupcomingevent(Async)");
        }
        
        // verify the required parameter 'event' is set
        if (event == null) {
            throw new ApiException("Missing the required parameter 'event' when calling sessionregListupcomingevent(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregListupcomingeventCall(date, event, _callback);
        return localVarCall;

    }

    /**
     * View a list of upcoming sessions of a particular event
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param date Start date to filter the returned sessions. (required)
     * @param event The id of the event whose sessions will be returned (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregListupcomingevent(OffsetDateTime date, UUID event) throws ApiException {
        sessionregListupcomingeventWithHttpInfo(date, event);
    }

    /**
     * View a list of upcoming sessions of a particular event
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param date Start date to filter the returned sessions. (required)
     * @param event The id of the event whose sessions will be returned (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregListupcomingeventWithHttpInfo(OffsetDateTime date, UUID event) throws ApiException {
        okhttp3.Call localVarCall = sessionregListupcomingeventValidateBeforeCall(date, event, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of upcoming sessions of a particular event (asynchronously)
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param date Start date to filter the returned sessions. (required)
     * @param event The id of the event whose sessions will be returned (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregListupcomingeventAsync(OffsetDateTime date, UUID event, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregListupcomingeventValidateBeforeCall(date, event, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregRemovecurrentuser
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregRemovecurrentuserCall(UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/removecurrentuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregRemovecurrentuserValidateBeforeCall(UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregRemovecurrentuser(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregRemovecurrentuser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregRemovecurrentuserCall(eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Unregister current user from an event session
     * Allows the user to un-register themselves from an event.
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregRemovecurrentuser(UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregRemovecurrentuserWithHttpInfo(eventid, sessiondate);
    }

    /**
     * Unregister current user from an event session
     * Allows the user to un-register themselves from an event.
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregRemovecurrentuserWithHttpInfo(UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregRemovecurrentuserValidateBeforeCall(eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unregister current user from an event session (asynchronously)
     * Allows the user to un-register themselves from an event.
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregRemovecurrentuserAsync(UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregRemovecurrentuserValidateBeforeCall(eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregRemoveuser
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregRemoveuserCall(UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreg/removeuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregRemoveuserValidateBeforeCall(UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling sessionregRemoveuser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregRemoveuser(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregRemoveuser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregRemoveuserCall(userid, eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Removes a user from an event session
     * Allows the user to un-register another user from an event.
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregRemoveuser(UUID userid, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregRemoveuserWithHttpInfo(userid, eventid, sessiondate);
    }

    /**
     * Removes a user from an event session
     * Allows the user to un-register another user from an event.
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregRemoveuserWithHttpInfo(UUID userid, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregRemoveuserValidateBeforeCall(userid, eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a user from an event session (asynchronously)
     * Allows the user to un-register another user from an event.
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregRemoveuserAsync(UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregRemoveuserValidateBeforeCall(userid, eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregSavesettings
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregSavesettingsCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/sessionreg/savesettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregSavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionregSavesettingsCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save the settings for an event&#39;s session registration
     * Allows the user to save the settings for an event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregSavesettings(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        sessionregSavesettingsWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save the settings for an event&#39;s session registration
     * Allows the user to save the settings for an event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregSavesettingsWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = sessionregSavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save the settings for an event&#39;s session registration (asynchronously)
     * Allows the user to save the settings for an event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregSavesettingsAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregSavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
