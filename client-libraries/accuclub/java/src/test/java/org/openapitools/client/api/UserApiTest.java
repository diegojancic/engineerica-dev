/*
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Change user&#39;s own password
     *
     * Allows the user to change their own password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userChangepwdTest() throws ApiException {
        UUID oldpass = null;
        UUID newpass = null;
        api.userChangepwd(oldpass, newpass);

        // TODO: test validations
    }
    
    /**
     * Changes the user password using a change password request id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userChangepwdbyreqTest() throws ApiException {
        String changereq = null;
        String newpass = null;
        api.userChangepwdbyreq(changereq, newpass);

        // TODO: test validations
    }
    
    /**
     * Delete a user
     *
     * Allows the user to delete a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteTest() throws ApiException {
        UUID id = null;
        oas_any_type_not_mapped body = null;
        api.userDelete(id, body);

        // TODO: test validations
    }
    
    /**
     * Finds similar users to prevent duplicates
     *
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userFindsimilarTest() throws ApiException {
        UUID currentid = null;
        String phonenumber = null;
        String cardnumber = null;
        api.userFindsimilar(currentid, phonenumber, cardnumber);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a user
     *
     * Allows the user to search and view a user and their details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetTest() throws ApiException {
        UUID id = null;
        Integer photosize = null;
        api.userGet(id, photosize);

        // TODO: test validations
    }
    
    /**
     * Search user by card number
     *
     * Allows the user to search for a user by their card number.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetbycardTest() throws ApiException {
        String card = null;
        Integer photosize = null;
        api.userGetbycard(card, photosize);

        // TODO: test validations
    }
    
    /**
     * View a list of users
     *
     * Allows the user to view the full list of users and is based on role permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userListTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        UUID roleid = null;
        String onlywithoutcard = null;
        Integer photosize = null;
        api.userList(from, count, roleid, onlywithoutcard, photosize);

        // TODO: test validations
    }
    
    /**
     * Upload a photo for a specific user
     *
     * Allows the user to upload a photo for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userLoadphotoTest() throws ApiException {
        String upload = null;
        String filename = null;
        UUID userid = null;
        Boolean automatch = null;
        api.userLoadphoto(upload, filename, userid, automatch);

        // TODO: test validations
    }
    
    /**
     * Move data between users
     *
     * Allows administrators to move data between users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userMovedataTest() throws ApiException {
        UUID source = null;
        UUID destination = null;
        api.userMovedata(source, destination);

        // TODO: test validations
    }
    
    /**
     * Requests a password change
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRequestpwdchangeTest() throws ApiException {
        String domain = null;
        String email = null;
        api.userRequestpwdchange(domain, email);

        // TODO: test validations
    }
    
    /**
     * Create or edit a user
     *
     * Allows the user to create or edit a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSaveTest() throws ApiException {
        UUID id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.userSave(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Send email to the specified user(s) to set/change their passwords
     *
     * Allows the user to trigger an email to another user asking them to set or change their password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSavepwdchangeTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.userSavepwdchange(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
}
