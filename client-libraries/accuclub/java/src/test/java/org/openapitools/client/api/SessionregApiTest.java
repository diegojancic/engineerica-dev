/*
 * AccuClub OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SessionregApi
 */
@Ignore
public class SessionregApiTest {

    private final SessionregApi api = new SessionregApi();

    
    /**
     * Register current user to an event session
     *
     * Allows the user to register themselves for an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregAddcurrentuserTest() throws ApiException {
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregAddcurrentuser(eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Register users for events
     *
     * Allows the user to register another user for an upcoming event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregAdduserTest() throws ApiException {
        UUID userid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregAdduser(userid, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * View all the sessions the logged user is registered to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregGetmysessionsTest() throws ApiException {
        OffsetDateTime date = null;
        api.sessionregGetmysessions(date);

        // TODO: test validations
    }
    
    /**
     * Lists the registrations for a specific user
     *
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregGetsessionsTest() throws ApiException {
        UUID userid = null;
        api.sessionregGetsessions(userid);

        // TODO: test validations
    }
    
    /**
     * Get the settings for session registration
     *
     * Allows the user to view a event&#39;s session registration settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregGetsettingsTest() throws ApiException {
        UUID locationid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        Boolean noinherit = null;
        api.sessionregGetsettings(locationid, eventid, sessiondate, noinherit);

        // TODO: test validations
    }
    
    /**
     * Lists the registrations for a specific session
     *
     * Allows the user to view the registration for a specified event session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregGetusersTest() throws ApiException {
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregGetusers(eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * List the sessions available for a specific event
     *
     * Allows the user to view all the sessions available for a recurring event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregListsessionsTest() throws ApiException {
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregListsessions(eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * View a list of upcoming event sessions
     *
     * Allows the user to view the full list of upcoming events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregListupcomingTest() throws ApiException {
        OffsetDateTime date = null;
        api.sessionregListupcoming(date);

        // TODO: test validations
    }
    
    /**
     * View a list of upcoming sessions of a particular event
     *
     * Allows the user to view the upcoming recurring sessions of a specified event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregListupcomingeventTest() throws ApiException {
        OffsetDateTime date = null;
        UUID event = null;
        api.sessionregListupcomingevent(date, event);

        // TODO: test validations
    }
    
    /**
     * Unregister current user from an event session
     *
     * Allows the user to un-register themselves from an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregRemovecurrentuserTest() throws ApiException {
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregRemovecurrentuser(eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Removes a user from an event session
     *
     * Allows the user to un-register another user from an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregRemoveuserTest() throws ApiException {
        UUID userid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregRemoveuser(userid, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Save the settings for an event&#39;s session registration
     *
     * Allows the user to save the settings for an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregSavesettingsTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionregSavesettings(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
}
