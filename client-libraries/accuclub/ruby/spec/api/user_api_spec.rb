=begin
#AccuClub OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::UserApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UserApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::UserApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserApi' do
    it 'should create an instance of UserApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::UserApi)
    end
  end

  # unit tests for user_changepwd
  # Change user&#39;s own password
  # Allows the user to change their own password.
  # @param oldpass The old password of the authenticated user.
  # @param newpass The new password of the authenticated user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_changepwd test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_changepwdbyreq
  # Changes the user password using a change password request id
  # @param changereq The change password request ID sent by email to the user.
  # @param newpass The new password of the user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_changepwdbyreq test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_delete
  # Delete a user
  # Allows the user to delete a user.
  # @param id The id of the user to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [AnyType] :body 
  # @return [nil]
  describe 'user_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_findsimilar
  # Finds similar users to prevent duplicates
  # Allows the user to be warned if a user they are creating has the same card number as another user.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currentid The id of the current user.
  # @option opts [String] :phonenumber A phone number to search for similar users.
  # @option opts [String] :cardnumber A card number to search for similar users.
  # @return [nil]
  describe 'user_findsimilar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_get
  # Search and view details of a user
  # Allows the user to search and view a user and their details.
  # @param id The id of the user to get.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'user_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_getbycard
  # Search user by card number
  # Allows the user to search for a user by their card number.
  # @param card The card number of the user to get.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'user_getbycard test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_list
  # View a list of users
  # Allows the user to view the full list of users and is based on role permissions.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
  # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'user_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_loadphoto
  # Upload a photo for a specific user
  # Allows the user to upload a photo for a user.
  # @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filename The local name of the uploaded file. For later reference.
  # @option opts [String] :userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.
  # @option opts [Boolean] :automatch Set this to true to find the specific user based on the file name. 
  # @return [nil]
  describe 'user_loadphoto test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_movedata
  # Move data between users
  # Allows administrators to move data between users.
  # @param source The id of the user that is the source of the data.
  # @param destination The id of the user that is the destination of the data.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_movedata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_requestpwdchange
  # Requests a password change
  # @param domain The domain of the account where the user exists.
  # @param email The email of the user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_requestpwdchange test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_save
  # Create or edit a user
  # Allows the user to create or edit a user.
  # @param id The id of the user to save (leave empty to create a new one).
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'user_save test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_savepwdchange
  # Send email to the specified user(s) to set/change their passwords
  # Allows the user to trigger an email to another user asking them to set or change their password.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'user_savepwdchange test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
