=begin
#AccuClub OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class SsoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate/reset single sign on access key.
    # Allows the user to generate or reset the access key for single sign-on.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sso_generatekey(opts = {})
      sso_generatekey_with_http_info(opts)
      nil
    end

    # Generate/reset single sign on access key.
    # Allows the user to generate or reset the access key for single sign-on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sso_generatekey_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoApi.sso_generatekey ...'
      end
      # resource path
      local_var_path = '/sso/generatekey'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoApi#sso_generatekey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View single sign on settings.
    # Allows the user to view settings for single sign-on.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sso_getsettings(opts = {})
      sso_getsettings_with_http_info(opts)
      nil
    end

    # View single sign on settings.
    # Allows the user to view settings for single sign-on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sso_getsettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoApi.sso_getsettings ...'
      end
      # resource path
      local_var_path = '/sso/getsettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoApi#sso_getsettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue single sign-on token
    # @param key [String] The single sign-on key of the account.
    # @param username [String] The email of the user to sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expires Specifies whether the session should expire when inactive.
    # @return [nil]
    def sso_issuetoken(key, username, opts = {})
      sso_issuetoken_with_http_info(key, username, opts)
      nil
    end

    # Issue single sign-on token
    # @param key [String] The single sign-on key of the account.
    # @param username [String] The email of the user to sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expires Specifies whether the session should expire when inactive.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sso_issuetoken_with_http_info(key, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoApi.sso_issuetoken ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling SsoApi.sso_issuetoken"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling SsoApi.sso_issuetoken"
      end
      # resource path
      local_var_path = '/sso/issuetoken'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key
      query_params[:'username'] = username
      query_params[:'expires'] = opts[:'expires'] if !opts[:'expires'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoApi#sso_issuetoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit single sign-on settings.
    # Allows the user to edit settings for single sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sso_savesettings(opts = {})
      sso_savesettings_with_http_info(opts)
      nil
    end

    # Edit single sign-on settings.
    # Allows the user to edit settings for single sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sso_savesettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoApi.sso_savesettings ...'
      end
      # resource path
      local_var_path = '/sso/savesettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoApi#sso_savesettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
