=begin
#AccuClub OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class QuickpanelApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes a widget from the Quick Panel
    # Allows the user to delete a widget that has been added to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def quickpanel_deletewidget(opts = {})
      quickpanel_deletewidget_with_http_info(opts)
      nil
    end

    # Deletes a widget from the Quick Panel
    # Allows the user to delete a widget that has been added to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanel_deletewidget_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickpanelApi.quickpanel_deletewidget ...'
      end
      # resource path
      local_var_path = '/quickpanel/deletewidget'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickpanelApi#quickpanel_deletewidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches the information for a specific widget.
    # @param widgetid [String] The ID of the data to fetch it&#39;s data.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanel_fetchwidget(widgetid, opts = {})
      quickpanel_fetchwidget_with_http_info(widgetid, opts)
      nil
    end

    # Fetches the information for a specific widget.
    # @param widgetid [String] The ID of the data to fetch it&#39;s data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanel_fetchwidget_with_http_info(widgetid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickpanelApi.quickpanel_fetchwidget ...'
      end
      # verify the required parameter 'widgetid' is set
      if @api_client.config.client_side_validation && widgetid.nil?
        fail ArgumentError, "Missing the required parameter 'widgetid' when calling QuickpanelApi.quickpanel_fetchwidget"
      end
      # resource path
      local_var_path = '/quickpanel/fetchwidget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'widgetid'] = widgetid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickpanelApi#quickpanel_fetchwidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a widget included in the Quick Panel
    # Allows the user to view a widget added in as Quick Panel.
    # @param id [String] The id of the widget to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanel_getwidget(id, opts = {})
      quickpanel_getwidget_with_http_info(id, opts)
      nil
    end

    # View details of a widget included in the Quick Panel
    # Allows the user to view a widget added in as Quick Panel.
    # @param id [String] The id of the widget to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanel_getwidget_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickpanelApi.quickpanel_getwidget ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QuickpanelApi.quickpanel_getwidget"
      end
      # resource path
      local_var_path = '/quickpanel/getwidget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickpanelApi#quickpanel_getwidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the initial information required to show the quick panels
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanel_init(opts = {})
      quickpanel_init_with_http_info(opts)
      nil
    end

    # Returns the initial information required to show the quick panels
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanel_init_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickpanelApi.quickpanel_init ...'
      end
      # resource path
      local_var_path = '/quickpanel/init'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickpanelApi#quickpanel_init\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the widgets that are added in the Quick Panel
    # Allows the user to view the widgets that have been added to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanel_listwidgets(opts = {})
      quickpanel_listwidgets_with_http_info(opts)
      nil
    end

    # Lists all the widgets that are added in the Quick Panel
    # Allows the user to view the widgets that have been added to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanel_listwidgets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickpanelApi.quickpanel_listwidgets ...'
      end
      # resource path
      local_var_path = '/quickpanel/listwidgets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickpanelApi#quickpanel_listwidgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the widget types available in the system
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanel_listwidgettypes(opts = {})
      quickpanel_listwidgettypes_with_http_info(opts)
      nil
    end

    # Lists all the widget types available in the system
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanel_listwidgettypes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickpanelApi.quickpanel_listwidgettypes ...'
      end
      # resource path
      local_var_path = '/quickpanel/listwidgettypes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickpanelApi#quickpanel_listwidgettypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorders the widgets and moves them to a specific column
    # @param sectionname [String] The section name where to sort the widgets.
    # @param orderids [String] CSV list of the widgets to reorder.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanel_reorderwidgets(sectionname, orderids, opts = {})
      quickpanel_reorderwidgets_with_http_info(sectionname, orderids, opts)
      nil
    end

    # Reorders the widgets and moves them to a specific column
    # @param sectionname [String] The section name where to sort the widgets.
    # @param orderids [String] CSV list of the widgets to reorder.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanel_reorderwidgets_with_http_info(sectionname, orderids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickpanelApi.quickpanel_reorderwidgets ...'
      end
      # verify the required parameter 'sectionname' is set
      if @api_client.config.client_side_validation && sectionname.nil?
        fail ArgumentError, "Missing the required parameter 'sectionname' when calling QuickpanelApi.quickpanel_reorderwidgets"
      end
      # verify the required parameter 'orderids' is set
      if @api_client.config.client_side_validation && orderids.nil?
        fail ArgumentError, "Missing the required parameter 'orderids' when calling QuickpanelApi.quickpanel_reorderwidgets"
      end
      # resource path
      local_var_path = '/quickpanel/reorderwidgets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sectionname'] = sectionname
      query_params[:'orderids'] = orderids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickpanelApi#quickpanel_reorderwidgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a widget for the Quick Panel
    # Allows the user to save a widget to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def quickpanel_savewidget(opts = {})
      quickpanel_savewidget_with_http_info(opts)
      nil
    end

    # Saves a widget for the Quick Panel
    # Allows the user to save a widget to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanel_savewidget_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickpanelApi.quickpanel_savewidget ...'
      end
      # resource path
      local_var_path = '/quickpanel/savewidget'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickpanelApi#quickpanel_savewidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
