=begin
#AccuCampus OpenAPI 3 Documentation

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # View a list of users action logs
    # Allows the user to view the audit logs for the account.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose action logs have to be returned.
    # @option opts [DateTime] :startdate The start date of the period to filter the logs.
    # @option opts [DateTime] :enddate The end date of the period to filter the logs.
    # @option opts [String] :resource The resource to filter the action logs.
    # @option opts [String] :actionfilter The action to filter the action logs.
    # @option opts [String] :argument The id of the entity that was the argument of the executed action.
    # @return [nil]
    def actionloglist(token, from, count, opts = {})
      actionloglist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of users action logs
    # Allows the user to view the audit logs for the account.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose action logs have to be returned.
    # @option opts [DateTime] :startdate The start date of the period to filter the logs.
    # @option opts [DateTime] :enddate The end date of the period to filter the logs.
    # @option opts [String] :resource The resource to filter the action logs.
    # @option opts [String] :actionfilter The action to filter the action logs.
    # @option opts [String] :argument The id of the entity that was the argument of the executed action.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionloglist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionloglist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionloglist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.actionloglist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.actionloglist"
      end
      # resource path
      local_var_path = '/actionloglist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?
      query_params[:'resource'] = opts[:'resource'] if !opts[:'resource'].nil?
      query_params[:'actionfilter'] = opts[:'actionfilter'] if !opts[:'actionfilter'].nil?
      query_params[:'argument'] = opts[:'argument'] if !opts[:'argument'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionloglist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds the missing permissions to a role. Requires access to advrole.save
    # @param token [String] The authentication token.
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroleaddmissing(token, roles, permissions, opts = {})
      advroleaddmissing_with_http_info(token, roles, permissions, opts)
      nil
    end

    # Adds the missing permissions to a role. Requires access to advrole.save
    # @param token [String] The authentication token.
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroleaddmissing_with_http_info(token, roles, permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroleaddmissing ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroleaddmissing"
      end
      # verify the required parameter 'roles' is set
      if @api_client.config.client_side_validation && roles.nil?
        fail ArgumentError, "Missing the required parameter 'roles' when calling DefaultApi.advroleaddmissing"
      end
      # verify the required parameter 'permissions' is set
      if @api_client.config.client_side_validation && permissions.nil?
        fail ArgumentError, "Missing the required parameter 'permissions' when calling DefaultApi.advroleaddmissing"
      end
      # resource path
      local_var_path = '/advroleaddmissing'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'roles'] = roles
      query_params[:'permissions'] = permissions

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroleaddmissing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks the permissions are assigned for the given roles
    # @param token [String] The authentication token.
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrolecheckperm(token, roles, permissions, opts = {})
      advrolecheckperm_with_http_info(token, roles, permissions, opts)
      nil
    end

    # Checks the permissions are assigned for the given roles
    # @param token [String] The authentication token.
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolecheckperm_with_http_info(token, roles, permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolecheckperm ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolecheckperm"
      end
      # verify the required parameter 'roles' is set
      if @api_client.config.client_side_validation && roles.nil?
        fail ArgumentError, "Missing the required parameter 'roles' when calling DefaultApi.advrolecheckperm"
      end
      # verify the required parameter 'permissions' is set
      if @api_client.config.client_side_validation && permissions.nil?
        fail ArgumentError, "Missing the required parameter 'permissions' when calling DefaultApi.advrolecheckperm"
      end
      # resource path
      local_var_path = '/advrolecheckperm'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'roles'] = roles
      query_params[:'permissions'] = permissions

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolecheckperm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role
    # Allows the user to delete a role from the list of available roles.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroledelete(token, id, opts = {})
      advroledelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a role
    # Allows the user to delete a role from the list of available roles.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroledelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroledelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroledelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.advroledelete"
      end
      # resource path
      local_var_path = '/advroledelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroledelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role mapping
    # Allows the user to delete a role from its mapped categories on the 'Role Mapping' page.
    # @param token [String] The authentication token.
    # @param map [String] The map name to save the role.
    # @param roleid [String] The id of the role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroledeletemapping(token, map, roleid, opts = {})
      advroledeletemapping_with_http_info(token, map, roleid, opts)
      nil
    end

    # Delete a role mapping
    # Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
    # @param token [String] The authentication token.
    # @param map [String] The map name to save the role.
    # @param roleid [String] The id of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroledeletemapping_with_http_info(token, map, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroledeletemapping ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroledeletemapping"
      end
      # verify the required parameter 'map' is set
      if @api_client.config.client_side_validation && map.nil?
        fail ArgumentError, "Missing the required parameter 'map' when calling DefaultApi.advroledeletemapping"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling DefaultApi.advroledeletemapping"
      end
      # resource path
      local_var_path = '/advroledeletemapping'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'map'] = map
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroledeletemapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a role
    # Allows the user to view a role and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroleget(token, id, opts = {})
      advroleget_with_http_info(token, id, opts)
      nil
    end

    # View details of a role
    # Allows the user to view a role and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroleget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroleget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroleget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.advroleget"
      end
      # resource path
      local_var_path = '/advroleget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroleget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the roles for the current account
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includepolicies True to include the policies, defaults to false.
    # @option opts [Boolean] :includeinternal True to include the internal roles too.
    # @option opts [String] :name Filter by name of the role.
    # @return [nil]
    def advrolelist(token, opts = {})
      advrolelist_with_http_info(token, opts)
      nil
    end

    # Lists the roles for the current account
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includepolicies True to include the policies, defaults to false.
    # @option opts [Boolean] :includeinternal True to include the internal roles too.
    # @option opts [String] :name Filter by name of the role.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolelist"
      end
      # resource path
      local_var_path = '/advrolelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'includepolicies'] = opts[:'includepolicies'] if !opts[:'includepolicies'].nil?
      query_params[:'includeinternal'] = opts[:'includeinternal'] if !opts[:'includeinternal'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the maps a roles is mapped to
    # @param token [String] The authentication token.
    # @param roleid [String] The id of the role to list the maps.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrolelistmaps(token, roleid, opts = {})
      advrolelistmaps_with_http_info(token, roleid, opts)
      nil
    end

    # Lists the maps a roles is mapped to
    # @param token [String] The authentication token.
    # @param roleid [String] The id of the role to list the maps.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolelistmaps_with_http_info(token, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolelistmaps ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolelistmaps"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling DefaultApi.advrolelistmaps"
      end
      # resource path
      local_var_path = '/advrolelistmaps'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolelistmaps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the roles mappings
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :map List only the roles in the specified map.
    # @return [nil]
    def advrolelistrolesmapped(token, opts = {})
      advrolelistrolesmapped_with_http_info(token, opts)
      nil
    end

    # Lists the roles mappings
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :map List only the roles in the specified map.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolelistrolesmapped_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolelistrolesmapped ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolelistrolesmapped"
      end
      # resource path
      local_var_path = '/advrolelistrolesmapped'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'map'] = opts[:'map'] if !opts[:'map'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolelistrolesmapped\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of role templates
    # Allows the user to view the full list of available role templates.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrolelisttemplates(token, opts = {})
      advrolelisttemplates_with_http_info(token, opts)
      nil
    end

    # View a list of role templates
    # Allows the user to view the full list of available role templates.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolelisttemplates_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolelisttemplates ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolelisttemplates"
      end
      # resource path
      local_var_path = '/advrolelisttemplates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolelisttemplates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a role
    # Allows the user to create or edit a role's permissions.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def advrolesave(opts = {})
      advrolesave_with_http_info(opts)
      nil
    end

    # Create or edit a role
    # Allows the user to create or edit a role&#39;s permissions.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolesave ...'
      end
      # resource path
      local_var_path = '/advrolesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a role mapping
    # Allows the user to add a role to a mapped category on the 'Role Mapping' page.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def advrolesavemapping(opts = {})
      advrolesavemapping_with_http_info(opts)
      nil
    end

    # Saves a role mapping
    # Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolesavemapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolesavemapping ...'
      end
      # resource path
      local_var_path = '/advrolesavemapping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolesavemapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users. Alias to user.list, use that one instead.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def advrolesuserlist(token, from, count, opts = {})
      advrolesuserlist_with_http_info(token, from, count, opts)
      nil
    end

    # List users. Alias to user.list, use that one instead.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolesuserlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolesuserlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolesuserlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.advrolesuserlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.advrolesuserlist"
      end
      # resource path
      local_var_path = '/advrolesuserlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'roleid'] = opts[:'roleid'] if !opts[:'roleid'].nil?
      query_params[:'onlywithoutcard'] = opts[:'onlywithoutcard'] if !opts[:'onlywithoutcard'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolesuserlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade a user to another role (requires permission to edit those roles)
    # Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
    # @param token [String] The authentication token.
    # @param userid [String] Id of the user to upgrade
    # @param roleid [String] Id of the role to add
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroleuserupgrade(token, userid, roleid, opts = {})
      advroleuserupgrade_with_http_info(token, userid, roleid, opts)
      nil
    end

    # Upgrade a user to another role (requires permission to edit those roles)
    # Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
    # @param token [String] The authentication token.
    # @param userid [String] Id of the user to upgrade
    # @param roleid [String] Id of the role to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroleuserupgrade_with_http_info(token, userid, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroleuserupgrade ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroleuserupgrade"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.advroleuserupgrade"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling DefaultApi.advroleuserupgrade"
      end
      # resource path
      local_var_path = '/advroleuserupgrade'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroleuserupgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the phone number of the current user
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appsharegetphone(token, opts = {})
      appsharegetphone_with_http_info(token, opts)
      nil
    end

    # Gets the phone number of the current user
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appsharegetphone_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appsharegetphone ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appsharegetphone"
      end
      # resource path
      local_var_path = '/appsharegetphone'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appsharegetphone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends an SMS with the link to the app
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phonenumber Phone number to where to send the link. Leave empty to the number on file.
    # @return [nil]
    def appsharesendtext(token, opts = {})
      appsharesendtext_with_http_info(token, opts)
      nil
    end

    # Sends an SMS with the link to the app
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phonenumber Phone number to where to send the link. Leave empty to the number on file.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appsharesendtext_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appsharesendtext ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appsharesendtext"
      end
      # resource path
      local_var_path = '/appsharesendtext'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'phonenumber'] = opts[:'phonenumber'] if !opts[:'phonenumber'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appsharesendtext\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a comment on an attendance log
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log comment to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelogcommentdelete(token, id, opts = {})
      attendancelogcommentdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a comment on an attendance log
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log comment to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogcommentdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogcommentdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogcommentdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancelogcommentdelete"
      end
      # resource path
      local_var_path = '/attendancelogcommentdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogcommentdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a comment on an attendance log
    # @param token [String] The authentication token.
    # @param id [String] The id of the comment to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelogcommentget(token, id, opts = {})
      attendancelogcommentget_with_http_info(token, id, opts)
      nil
    end

    # View a comment on an attendance log
    # @param token [String] The authentication token.
    # @param id [String] The id of the comment to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogcommentget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogcommentget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogcommentget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancelogcommentget"
      end
      # resource path
      local_var_path = '/attendancelogcommentget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogcommentget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the comments on a specific attendance log
    # @param attendancelog [String] The id of the attendance log whose comments have to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def attendancelogcommentlist(attendancelog, opts = {})
      attendancelogcommentlist_with_http_info(attendancelog, opts)
      nil
    end

    # View all the comments on a specific attendance log
    # @param attendancelog [String] The id of the attendance log whose comments have to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogcommentlist_with_http_info(attendancelog, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogcommentlist ...'
      end
      # verify the required parameter 'attendancelog' is set
      if @api_client.config.client_side_validation && attendancelog.nil?
        fail ArgumentError, "Missing the required parameter 'attendancelog' when calling DefaultApi.attendancelogcommentlist"
      end
      # resource path
      local_var_path = '/attendancelogcommentlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attendancelog'] = attendancelog
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogcommentlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save a comment on an attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def attendancelogcommentsave(opts = {})
      attendancelogcommentsave_with_http_info(opts)
      nil
    end

    # Save a comment on an attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogcommentsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogcommentsave ...'
      end
      # resource path
      local_var_path = '/attendancelogcommentsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogcommentsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an attendance log
    # Allows the user to delete an existing attendance log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelogdelete(token, id, opts = {})
      attendancelogdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an attendance log
    # Allows the user to delete an existing attendance log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancelogdelete"
      end
      # resource path
      local_var_path = '/attendancelogdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an attendance log
    # Allows the user to view an individual attendance log and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelogget(token, id, opts = {})
      attendancelogget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of an attendance log
    # Allows the user to view an individual attendance log and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancelogget"
      end
      # resource path
      local_var_path = '/attendancelogget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an attendance log's swipe history
    # Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendanceloggetchangehistory(token, id, opts = {})
      attendanceloggetchangehistory_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of an attendance log&#39;s swipe history
    # Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendanceloggetchangehistory_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendanceloggetchangehistory ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendanceloggetchangehistory"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendanceloggetchangehistory"
      end
      # resource path
      local_var_path = '/attendanceloggetchangehistory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendanceloggetchangehistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of attendance logs
    # Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @option opts [String] :userid The user ID of the user to get the logs.
    # @return [nil]
    def attendanceloglist(from, count, opts = {})
      attendanceloglist_with_http_info(from, count, opts)
      nil
    end

    # View a list of attendance logs
    # Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @option opts [String] :userid The user ID of the user to get the logs.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendanceloglist_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendanceloglist ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.attendanceloglist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.attendanceloglist"
      end
      # resource path
      local_var_path = '/attendanceloglist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendanceloglist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the attendance logs of the current user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @return [nil]
    def attendanceloglistmine(from, count, opts = {})
      attendanceloglistmine_with_http_info(from, count, opts)
      nil
    end

    # Gets the attendance logs of the current user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendanceloglistmine_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendanceloglistmine ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.attendanceloglistmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.attendanceloglistmine"
      end
      # resource path
      local_var_path = '/attendanceloglistmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendanceloglistmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit an attendance log
    # Allows the user to create or edit an attendance log.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def attendancelogsave(opts = {})
      attendancelogsave_with_http_info(opts)
      nil
    end

    # Create or edit an attendance log
    # Allows the user to create or edit an attendance log.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogsave ...'
      end
      # resource path
      local_var_path = '/attendancelogsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign out an attendance log
    # Allows the user to sign out am attendance log from the Who's In page.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the attendance log to sign-out.
    # @option opts [String] :location The id of the location to filter the users to sign out.
    # @option opts [String] :event The id of the event to filter the users to sign out.
    # @option opts [DateTime] :datetime Specifies the date and time when the specified logs have to be signed out.
    # @return [nil]
    def attendancelogsignout(token, opts = {})
      attendancelogsignout_with_http_info(token, opts)
      nil
    end

    # Sign out an attendance log
    # Allows the user to sign out am attendance log from the Who&#39;s In page.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the attendance log to sign-out.
    # @option opts [String] :location The id of the location to filter the users to sign out.
    # @option opts [String] :event The id of the event to filter the users to sign out.
    # @option opts [DateTime] :datetime Specifies the date and time when the specified logs have to be signed out.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogsignout_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogsignout ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogsignout"
      end
      # resource path
      local_var_path = '/attendancelogsignout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'datetime'] = opts[:'datetime'] if !opts[:'datetime'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogsignout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View who's in a location
    # Allows the user to view the Who's In page and view all users who are logged into locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :location The id of the location to search for users that are in.
    # @option opts [String] :event The id of the event to search for users that are in.
    # @option opts [String] :sorting Field to sort by. Either first-name, last-name or sign-in-time.
    # @option opts [String] :roles The comma-separated list of ids of the roles to search for users that are in.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [String] :extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).
    # @option opts [Boolean] :export True to export the results as CSV
    # @return [nil]
    def attendancelogwhosin(from, count, opts = {})
      attendancelogwhosin_with_http_info(from, count, opts)
      nil
    end

    # View who&#39;s in a location
    # Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :location The id of the location to search for users that are in.
    # @option opts [String] :event The id of the event to search for users that are in.
    # @option opts [String] :sorting Field to sort by. Either first-name, last-name or sign-in-time.
    # @option opts [String] :roles The comma-separated list of ids of the roles to search for users that are in.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [String] :extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).
    # @option opts [Boolean] :export True to export the results as CSV
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogwhosin_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogwhosin ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.attendancelogwhosin"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.attendancelogwhosin"
      end
      # resource path
      local_var_path = '/attendancelogwhosin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'roles'] = opts[:'roles'] if !opts[:'roles'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?
      query_params[:'extensions'] = opts[:'extensions'] if !opts[:'extensions'].nil?
      query_params[:'export'] = opts[:'export'] if !opts[:'export'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogwhosin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get background job status
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobid The ID of the job to get the status. 10 most recent will be returned if not specified.
    # @option opts [String] :jobtype The job type to filter by.
    # @return [nil]
    def bgjobgetstatus(token, opts = {})
      bgjobgetstatus_with_http_info(token, opts)
      nil
    end

    # Get background job status
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobid The ID of the job to get the status. 10 most recent will be returned if not specified.
    # @option opts [String] :jobtype The job type to filter by.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def bgjobgetstatus_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.bgjobgetstatus ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.bgjobgetstatus"
      end
      # resource path
      local_var_path = '/bgjobgetstatus'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'jobid'] = opts[:'jobid'] if !opts[:'jobid'].nil?
      query_params[:'jobtype'] = opts[:'jobtype'] if !opts[:'jobtype'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#bgjobgetstatus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a captcha challenge that the user must complete to do certain requests.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def captchagetchallenge(opts = {})
      captchagetchallenge_with_http_info(opts)
      nil
    end

    # Gets a captcha challenge that the user must complete to do certain requests.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def captchagetchallenge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.captchagetchallenge ...'
      end
      # resource path
      local_var_path = '/captchagetchallenge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#captchagetchallenge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a captcha image that the user must complete to do certain requests.
    # @param captchatoken [String] The captcha token or ID returned by the captcha.getchallenge action
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def captchagetimage(captchatoken, opts = {})
      captchagetimage_with_http_info(captchatoken, opts)
      nil
    end

    # Gets a captcha image that the user must complete to do certain requests.
    # @param captchatoken [String] The captcha token or ID returned by the captcha.getchallenge action
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def captchagetimage_with_http_info(captchatoken, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.captchagetimage ...'
      end
      # verify the required parameter 'captchatoken' is set
      if @api_client.config.client_side_validation && captchatoken.nil?
        fail ArgumentError, "Missing the required parameter 'captchatoken' when calling DefaultApi.captchagetimage"
      end
      # resource path
      local_var_path = '/captchagetimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'captchatoken'] = captchatoken

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#captchagetimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the application change log
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def changelog(token, opts = {})
      changelog_with_http_info(token, opts)
      nil
    end

    # Get the application change log
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def changelog_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.changelog ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.changelog"
      end
      # resource path
      local_var_path = '/changelog'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#changelog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get client
    # @param token [String] The authentication token.
    # @param client [String] The unique id of the client.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clientname The custom name of the client.
    # @return [nil]
    def clientget(token, client, opts = {})
      clientget_with_http_info(token, client, opts)
      nil
    end

    # Get client
    # @param token [String] The authentication token.
    # @param client [String] The unique id of the client.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clientname The custom name of the client.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clientget_with_http_info(token, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clientget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.clientget"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling DefaultApi.clientget"
      end
      # resource path
      local_var_path = '/clientget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'client'] = client
      query_params[:'clientname'] = opts[:'clientname'] if !opts[:'clientname'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clientget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the clients of the specified conference
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clientlist(token, from, count, opts = {})
      clientlist_with_http_info(token, from, count, opts)
      nil
    end

    # Gets the clients of the specified conference
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clientlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clientlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.clientlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.clientlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.clientlist"
      end
      # resource path
      local_var_path = '/clientlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clientlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a client
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def clientsave(opts = {})
      clientsave_with_http_info(opts)
      nil
    end

    # Saves a client
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clientsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clientsave ...'
      end
      # resource path
      local_var_path = '/clientsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clientsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a message to a client
    # @param token [String] The authentication token.
    # @param uniqueclientid [String] The unique id of the client.
    # @param message [String] The body of the message to send.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clientsendmessage(token, uniqueclientid, message, opts = {})
      clientsendmessage_with_http_info(token, uniqueclientid, message, opts)
      nil
    end

    # Send a message to a client
    # @param token [String] The authentication token.
    # @param uniqueclientid [String] The unique id of the client.
    # @param message [String] The body of the message to send.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clientsendmessage_with_http_info(token, uniqueclientid, message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clientsendmessage ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.clientsendmessage"
      end
      # verify the required parameter 'uniqueclientid' is set
      if @api_client.config.client_side_validation && uniqueclientid.nil?
        fail ArgumentError, "Missing the required parameter 'uniqueclientid' when calling DefaultApi.clientsendmessage"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling DefaultApi.clientsendmessage"
      end
      # resource path
      local_var_path = '/clientsendmessage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'uniqueclientid'] = uniqueclientid
      query_params[:'message'] = message

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clientsendmessage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a credit
    # Allows the user to delete credits.
    # @param token [String] The authentication token.
    # @param id [String] The id of the credit to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditdelete(token, id, opts = {})
      creditdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a credit
    # Allows the user to delete credits.
    # @param token [String] The authentication token.
    # @param id [String] The id of the credit to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.creditdelete"
      end
      # resource path
      local_var_path = '/creditdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the valid discount methods.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditdiscountmethods(opts = {})
      creditdiscountmethods_with_http_info(opts)
      nil
    end

    # Gets the valid discount methods.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditdiscountmethods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditdiscountmethods ...'
      end
      # resource path
      local_var_path = '/creditdiscountmethods'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditdiscountmethods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of assigned credit
    # Allows the user to view an credit and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the credit to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditget(token, id, opts = {})
      creditget_with_http_info(token, id, opts)
      nil
    end

    # View details of assigned credit
    # Allows the user to view an credit and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the credit to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.creditget"
      end
      # resource path
      local_var_path = '/creditget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the total amount of credits of the specified user
    # Allows the user to view the total amount of credits of a specified user.
    # @param token [String] The authentication token.
    # @param user [String] The id of the user whose balance has to be returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditgetuserbalance(token, user, opts = {})
      creditgetuserbalance_with_http_info(token, user, opts)
      nil
    end

    # Get the total amount of credits of the specified user
    # Allows the user to view the total amount of credits of a specified user.
    # @param token [String] The authentication token.
    # @param user [String] The id of the user whose balance has to be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditgetuserbalance_with_http_info(token, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditgetuserbalance ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditgetuserbalance"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.creditgetuserbalance"
      end
      # resource path
      local_var_path = '/creditgetuserbalance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditgetuserbalance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of credits for a specific user
    # Allows the user to view the full list of credits for a user.
    # @param token [String] The authentication token.
    # @param user [String] The id of the user.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditlist(token, user, from, count, opts = {})
      creditlist_with_http_info(token, user, from, count, opts)
      nil
    end

    # View a list of credits for a specific user
    # Allows the user to view the full list of credits for a user.
    # @param token [String] The authentication token.
    # @param user [String] The id of the user.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditlist_with_http_info(token, user, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditlist"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.creditlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.creditlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.creditlist"
      end
      # resource path
      local_var_path = '/creditlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'user'] = user
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the credit usage details
    # @param token [String] The authentication token.
    # @param credit [String] The id of the credit to look up for details.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditlistdetails(token, credit, from, count, opts = {})
      creditlistdetails_with_http_info(token, credit, from, count, opts)
      nil
    end

    # Gets the credit usage details
    # @param token [String] The authentication token.
    # @param credit [String] The id of the credit to look up for details.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditlistdetails_with_http_info(token, credit, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditlistdetails ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditlistdetails"
      end
      # verify the required parameter 'credit' is set
      if @api_client.config.client_side_validation && credit.nil?
        fail ArgumentError, "Missing the required parameter 'credit' when calling DefaultApi.creditlistdetails"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.creditlistdetails"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.creditlistdetails"
      end
      # resource path
      local_var_path = '/creditlistdetails'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'credit'] = credit
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditlistdetails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the list of credits of the current user
    # Allows the current user to view his full list of credits.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditlistmine(token, from, count, opts = {})
      creditlistmine_with_http_info(token, from, count, opts)
      nil
    end

    # View the list of credits of the current user
    # Allows the current user to view his full list of credits.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditlistmine_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditlistmine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditlistmine"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.creditlistmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.creditlistmine"
      end
      # resource path
      local_var_path = '/creditlistmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditlistmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a credit plan
    # @param token [String] The authentication token.
    # @param id [String] The id of the credit plan to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditplandelete(token, id, opts = {})
      creditplandelete_with_http_info(token, id, opts)
      nil
    end

    # Deletes a credit plan
    # @param token [String] The authentication token.
    # @param id [String] The id of the credit plan to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditplandelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditplandelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditplandelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.creditplandelete"
      end
      # resource path
      local_var_path = '/creditplandelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditplandelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a credit plan
    # @param token [String] The authentication token.
    # @param id [String] The id of the credit plan to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditplanget(token, id, opts = {})
      creditplanget_with_http_info(token, id, opts)
      nil
    end

    # Gets a credit plan
    # @param token [String] The authentication token.
    # @param id [String] The id of the credit plan to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditplanget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditplanget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditplanget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.creditplanget"
      end
      # resource path
      local_var_path = '/creditplanget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditplanget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the credit plans available
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def creditplanlist(token, from, count, opts = {})
      creditplanlist_with_http_info(token, from, count, opts)
      nil
    end

    # Gets the credit plans available
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditplanlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditplanlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.creditplanlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.creditplanlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.creditplanlist"
      end
      # resource path
      local_var_path = '/creditplanlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditplanlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a credit plan
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def creditplansave(opts = {})
      creditplansave_with_http_info(opts)
      nil
    end

    # Saves a credit plan
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditplansave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditplansave ...'
      end
      # resource path
      local_var_path = '/creditplansave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditplansave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit credit for a user
    # Allows the user to create or edit credit for a user
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def creditsave(opts = {})
      creditsave_with_http_info(opts)
      nil
    end

    # Create or edit credit for a user
    # Allows the user to create or edit credit for a user
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditsave ...'
      end
      # resource path
      local_var_path = '/creditsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit credit details
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def creditsavedetails(opts = {})
      creditsavedetails_with_http_info(opts)
      nil
    end

    # Create or edit credit details
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def creditsavedetails_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.creditsavedetails ...'
      end
      # resource path
      local_var_path = '/creditsavedetails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#creditsavedetails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the documentation
    # Retrieves the list of actions available in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :excludeanonymous If true it excludes the anonymous actions from the returned list.
    # @return [nil]
    def doc(opts = {})
      doc_with_http_info(opts)
      nil
    end

    # Get the documentation
    # Retrieves the list of actions available in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :excludeanonymous If true it excludes the anonymous actions from the returned list.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def doc_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.doc ...'
      end
      # resource path
      local_var_path = '/doc'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'excludeanonymous'] = opts[:'excludeanonymous'] if !opts[:'excludeanonymous'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#doc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds background image for the login
    # Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def easyloginaddbgimage(token, upload, filename, opts = {})
      easyloginaddbgimage_with_http_info(token, upload, filename, opts)
      nil
    end

    # Adds background image for the login
    # Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def easyloginaddbgimage_with_http_info(token, upload, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.easyloginaddbgimage ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.easyloginaddbgimage"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.easyloginaddbgimage"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling DefaultApi.easyloginaddbgimage"
      end
      # resource path
      local_var_path = '/easyloginaddbgimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'upload'] = upload
      query_params[:'filename'] = filename

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#easyloginaddbgimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a course
    # Allows the user to delete an existing course.
    # @param token [String] The authentication token.
    # @param id [String] The id of the event to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventdelete(token, id, opts = {})
      eventdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a course
    # Allows the user to delete an existing course.
    # @param token [String] The authentication token.
    # @param id [String] The id of the event to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.eventdelete"
      end
      # resource path
      local_var_path = '/eventdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a course
    # Allows the user to view an individual course and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the event to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventget(token, id, opts = {})
      eventget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a course
    # Allows the user to view an individual course and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the event to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.eventget"
      end
      # resource path
      local_var_path = '/eventget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of courses by date
    # Allows the user to view a list of courses by date.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The location to filter the events.
    # @option opts [DateTime] :date The date to filter the events. Today will be used if this parameter is omitted.
    # @option opts [String] :type Type of event to list.
    # @return [nil]
    def eventgetsessionsbydate(token, opts = {})
      eventgetsessionsbydate_with_http_info(token, opts)
      nil
    end

    # View a list of courses by date
    # Allows the user to view a list of courses by date.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The location to filter the events.
    # @option opts [DateTime] :date The date to filter the events. Today will be used if this parameter is omitted.
    # @option opts [String] :type Type of event to list.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventgetsessionsbydate_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventgetsessionsbydate ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventgetsessionsbydate"
      end
      # resource path
      local_var_path = '/eventgetsessionsbydate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventgetsessionsbydate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of courses
    # Allows the user to view the full list of courses.
    # @param token [String] The authentication token.
    # @param from [String] The first record to return.
    # @param count [String] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
    # @option opts [String] :termid Id of the term to list the events. Null to list all events.
    # @return [nil]
    def eventlist(token, from, count, opts = {})
      eventlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of courses
    # Allows the user to view the full list of courses.
    # @param token [String] The authentication token.
    # @param from [String] The first record to return.
    # @param count [String] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
    # @option opts [String] :termid Id of the term to list the events. Null to list all events.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.eventlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.eventlist"
      end
      # resource path
      local_var_path = '/eventlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'summaryonly'] = opts[:'summaryonly'] if !opts[:'summaryonly'].nil?
      query_params[:'termid'] = opts[:'termid'] if !opts[:'termid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a course
    # Allows the user to create or edit a course.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def eventsave(opts = {})
      eventsave_with_http_info(opts)
      nil
    end

    # Create or edit a course
    # Allows the user to create or edit a course.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventsave ...'
      end
      # resource path
      local_var_path = '/eventsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Searches for the available event groups
    # @param token [String] The authentication token.
    # @param query [String] Query to search event groups.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventsearchgroup(token, query, opts = {})
      eventsearchgroup_with_http_info(token, query, opts)
      nil
    end

    # Searches for the available event groups
    # @param token [String] The authentication token.
    # @param query [String] Query to search event groups.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventsearchgroup_with_http_info(token, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventsearchgroup ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventsearchgroup"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.eventsearchgroup"
      end
      # resource path
      local_var_path = '/eventsearchgroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventsearchgroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export AccuCampus data
    # Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
    # @param token [String] The authentication token.
    # @param exporttype [String] What to export.
    # @param exportformat [String] The format of the resulting file. Valid types are CSV, HTML, XLS.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [nil]
    def export(token, exporttype, exportformat, opts = {})
      export_with_http_info(token, exporttype, exportformat, opts)
      nil
    end

    # Export AccuCampus data
    # Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
    # @param token [String] The authentication token.
    # @param exporttype [String] What to export.
    # @param exportformat [String] The format of the resulting file. Valid types are CSV, HTML, XLS.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def export_with_http_info(token, exporttype, exportformat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.export ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.export"
      end
      # verify the required parameter 'exporttype' is set
      if @api_client.config.client_side_validation && exporttype.nil?
        fail ArgumentError, "Missing the required parameter 'exporttype' when calling DefaultApi.export"
      end
      # verify the required parameter 'exportformat' is set
      if @api_client.config.client_side_validation && exportformat.nil?
        fail ArgumentError, "Missing the required parameter 'exportformat' when calling DefaultApi.export"
      end
      # resource path
      local_var_path = '/export'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'exporttype'] = exporttype
      query_params[:'exportformat'] = exportformat
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists available export types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def exportlisttypes(token, opts = {})
      exportlisttypes_with_http_info(token, opts)
      nil
    end

    # Lists available export types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def exportlisttypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.exportlisttypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.exportlisttypes"
      end
      # resource path
      local_var_path = '/exportlisttypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#exportlisttypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the available features.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def featurelist(token, opts = {})
      featurelist_with_http_info(token, opts)
      nil
    end

    # Lists the available features.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def featurelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.featurelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.featurelist"
      end
      # resource path
      local_var_path = '/featurelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#featurelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of entered holidays
    # Allows the user to view all holidays entered.
    # @param token [String] The authentication token.
    # @param term [String] The term to get holidays from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def holidaylist(token, term, opts = {})
      holidaylist_with_http_info(token, term, opts)
      nil
    end

    # View a list of entered holidays
    # Allows the user to view all holidays entered.
    # @param token [String] The authentication token.
    # @param term [String] The term to get holidays from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def holidaylist_with_http_info(token, term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.holidaylist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.holidaylist"
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling DefaultApi.holidaylist"
      end
      # resource path
      local_var_path = '/holidaylist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'term'] = term

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#holidaylist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a list of holidays
    # Allows the user to create or edit holidays.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def holidaysave(opts = {})
      holidaysave_with_http_info(opts)
      nil
    end

    # Create or edit a list of holidays
    # Allows the user to create or edit holidays.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def holidaysave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.holidaysave ...'
      end
      # resource path
      local_var_path = '/holidaysave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#holidaysave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the holiday suggestions in the given term
    # Allows the user to view the holiday suggestions for each term.
    # @param token [String] The authentication token.
    # @param term [String] The term to get holidays from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def holidaysuggest(token, term, opts = {})
      holidaysuggest_with_http_info(token, term, opts)
      nil
    end

    # View the holiday suggestions in the given term
    # Allows the user to view the holiday suggestions for each term.
    # @param token [String] The authentication token.
    # @param term [String] The term to get holidays from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def holidaysuggest_with_http_info(token, term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.holidaysuggest ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.holidaysuggest"
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling DefaultApi.holidaysuggest"
      end
      # resource path
      local_var_path = '/holidaysuggest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'term'] = term

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#holidaysuggest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import data into AccuCampus
    # Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
    # @param token [String] The authentication token.
    # @param importtype [String] The kind of data that is being uploaded.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.
    # @return [nil]
    def import(token, importtype, upload, opts = {})
      import_with_http_info(token, importtype, upload, opts)
      nil
    end

    # Import data into AccuCampus
    # Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
    # @param token [String] The authentication token.
    # @param importtype [String] The kind of data that is being uploaded.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def import_with_http_info(token, importtype, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.import ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.import"
      end
      # verify the required parameter 'importtype' is set
      if @api_client.config.client_side_validation && importtype.nil?
        fail ArgumentError, "Missing the required parameter 'importtype' when calling DefaultApi.import"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.import"
      end
      # resource path
      local_var_path = '/import'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'importtype'] = importtype
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists available import types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importlisttypes(token, opts = {})
      importlisttypes_with_http_info(token, opts)
      nil
    end

    # Lists available import types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def importlisttypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.importlisttypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.importlisttypes"
      end
      # resource path
      local_var_path = '/importlisttypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#importlisttypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept the license agreement
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def licenseacceptagreement(token, opts = {})
      licenseacceptagreement_with_http_info(token, opts)
      nil
    end

    # Accept the license agreement
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def licenseacceptagreement_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.licenseacceptagreement ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.licenseacceptagreement"
      end
      # resource path
      local_var_path = '/licenseacceptagreement'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#licenseacceptagreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if license agreement has been accepted
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def licensegetagreementstatus(token, opts = {})
      licensegetagreementstatus_with_http_info(token, opts)
      nil
    end

    # Check if license agreement has been accepted
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def licensegetagreementstatus_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.licensegetagreementstatus ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.licensegetagreementstatus"
      end
      # resource path
      local_var_path = '/licensegetagreementstatus'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#licensegetagreementstatus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current license information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def licensegetcurrent(opts = {})
      licensegetcurrent_with_http_info(opts)
      nil
    end

    # Gets the current license information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def licensegetcurrent_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.licensegetcurrent ...'
      end
      # resource path
      local_var_path = '/licensegetcurrent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#licensegetcurrent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Contact Engineerica in order to renew the AccuCampus subscription
    # Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
    # @param token [String] The authentication token.
    # @param email [String] The e-mail of the user sending the request.
    # @param phonenumber [String] The phone number of the user sending the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobtitle The job title of the user sending the request.
    # @option opts [String] :institution The institution of the user sending the request.
    # @option opts [String] :comments Comments entered by the user sending the request.
    # @return [nil]
    def licenserenew(token, email, phonenumber, opts = {})
      licenserenew_with_http_info(token, email, phonenumber, opts)
      nil
    end

    # Contact Engineerica in order to renew the AccuCampus subscription
    # Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
    # @param token [String] The authentication token.
    # @param email [String] The e-mail of the user sending the request.
    # @param phonenumber [String] The phone number of the user sending the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobtitle The job title of the user sending the request.
    # @option opts [String] :institution The institution of the user sending the request.
    # @option opts [String] :comments Comments entered by the user sending the request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def licenserenew_with_http_info(token, email, phonenumber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.licenserenew ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.licenserenew"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling DefaultApi.licenserenew"
      end
      # verify the required parameter 'phonenumber' is set
      if @api_client.config.client_side_validation && phonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'phonenumber' when calling DefaultApi.licenserenew"
      end
      # resource path
      local_var_path = '/licenserenew'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'email'] = email
      query_params[:'phonenumber'] = phonenumber
      query_params[:'jobtitle'] = opts[:'jobtitle'] if !opts[:'jobtitle'].nil?
      query_params[:'institution'] = opts[:'institution'] if !opts[:'institution'].nil?
      query_params[:'comments'] = opts[:'comments'] if !opts[:'comments'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#licenserenew\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the available timezones
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def listtimezones(opts = {})
      listtimezones_with_http_info(opts)
      nil
    end

    # Lists the available timezones
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def listtimezones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.listtimezones ...'
      end
      # resource path
      local_var_path = '/listtimezones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#listtimezones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a location
    # Allows the user to delete an existing location.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def locationdelete(token, id, opts = {})
      locationdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a location
    # Allows the user to delete an existing location.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def locationdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.locationdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.locationdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.locationdelete"
      end
      # resource path
      local_var_path = '/locationdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#locationdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a location
    # Allows the user to search and view an individual location and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def locationget(token, id, opts = {})
      locationget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a location
    # Allows the user to search and view an individual location and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def locationget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.locationget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.locationget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.locationget"
      end
      # resource path
      local_var_path = '/locationget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#locationget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of locations
    # Allows the user to view the list of all locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locations The comma-separated list containing the ids of the locations to list.
    # @option opts [Boolean] :sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false.
    # @return [nil]
    def locationlist(token, from, count, opts = {})
      locationlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of locations
    # Allows the user to view the list of all locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locations The comma-separated list containing the ids of the locations to list.
    # @option opts [Boolean] :sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def locationlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.locationlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.locationlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.locationlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.locationlist"
      end
      # resource path
      local_var_path = '/locationlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'locations'] = opts[:'locations'] if !opts[:'locations'].nil?
      query_params[:'sortbygroup'] = opts[:'sortbygroup'] if !opts[:'sortbygroup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#locationlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a location
    # Allows the user to create or edit a location.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def locationsave(opts = {})
      locationsave_with_http_info(opts)
      nil
    end

    # Create or edit a location
    # Allows the user to create or edit a location.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def locationsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.locationsave ...'
      end
      # resource path
      local_var_path = '/locationsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#locationsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login
    # @param domain [String] The account domain to login.
    # @param username [String] The username (email) of the user to login as.
    # @param password [String] The password of the user to login as.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :rememberme If true then the session will not expire.
    # @return [nil]
    def login(domain, username, password, method, opts = {})
      login_with_http_info(domain, username, password, method, opts)
      nil
    end

    # Login
    # @param domain [String] The account domain to login.
    # @param username [String] The username (email) of the user to login as.
    # @param password [String] The password of the user to login as.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :rememberme If true then the session will not expire.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def login_with_http_info(domain, username, password, method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DefaultApi.login"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.login"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling DefaultApi.login"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling DefaultApi.login"
      end
      # resource path
      local_var_path = '/login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain'] = domain
      query_params[:'username'] = username
      query_params[:'password'] = password
      query_params[:'method'] = method
      query_params[:'rememberme'] = opts[:'rememberme'] if !opts[:'rememberme'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logout
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token used to login.
    # @return [nil]
    def logout(opts = {})
      logout_with_http_info(opts)
      nil
    end

    # Logout
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token used to login.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logout ...'
      end
      # resource path
      local_var_path = '/logout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete memorized report
    # Allows the user to delete a memorized report that they have created.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report settings to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def memorizedreportdelete(token, id, opts = {})
      memorizedreportdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete memorized report
    # Allows the user to delete a memorized report that they have created.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report settings to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def memorizedreportdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.memorizedreportdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.memorizedreportdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.memorizedreportdelete"
      end
      # resource path
      local_var_path = '/memorizedreportdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#memorizedreportdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a memorized report
    # Allows the user to view an individual memorized report and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report configuration to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def memorizedreportget(token, id, opts = {})
      memorizedreportget_with_http_info(token, id, opts)
      nil
    end

    # View details of a memorized report
    # Allows the user to view an individual memorized report and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report configuration to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def memorizedreportget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.memorizedreportget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.memorizedreportget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.memorizedreportget"
      end
      # resource path
      local_var_path = '/memorizedreportget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#memorizedreportget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of all his memorized reports
    # Allows the user to view the list of all memorized reports that they have created.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customname If specified filters the memorized reports by custom name.
    # @return [nil]
    def memorizedreportlist(token, from, count, opts = {})
      memorizedreportlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of all his memorized reports
    # Allows the user to view the list of all memorized reports that they have created.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customname If specified filters the memorized reports by custom name.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def memorizedreportlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.memorizedreportlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.memorizedreportlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.memorizedreportlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.memorizedreportlist"
      end
      # resource path
      local_var_path = '/memorizedreportlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'customname'] = opts[:'customname'] if !opts[:'customname'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#memorizedreportlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a memorized report
    # Allows the user to create or edit a memorized report for themselves.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def memorizedreportsave(opts = {})
      memorizedreportsave_with_http_info(opts)
      nil
    end

    # Create or edit a memorized report
    # Allows the user to create or edit a memorized report for themselves.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def memorizedreportsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.memorizedreportsave ...'
      end
      # resource path
      local_var_path = '/memorizedreportsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#memorizedreportsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the items on the menu
    # @param menuid [String] The Id of the menu to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def menugetitems(menuid, opts = {})
      menugetitems_with_http_info(menuid, opts)
      nil
    end

    # Gets the items on the menu
    # @param menuid [String] The Id of the menu to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def menugetitems_with_http_info(menuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.menugetitems ...'
      end
      # verify the required parameter 'menuid' is set
      if @api_client.config.client_side_validation && menuid.nil?
        fail ArgumentError, "Missing the required parameter 'menuid' when calling DefaultApi.menugetitems"
      end
      # resource path
      local_var_path = '/menugetitems'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'menuid'] = menuid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#menugetitems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the logged in user account.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def myaccount(token, opts = {})
      myaccount_with_http_info(token, opts)
      nil
    end

    # Gets the logged in user account.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def myaccount_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.myaccount ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.myaccount"
      end
      # resource path
      local_var_path = '/myaccount'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#myaccount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current time zone's iana name
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def myianatimezone(token, opts = {})
      myianatimezone_with_http_info(token, opts)
      nil
    end

    # Gets the current time zone&#39;s iana name
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def myianatimezone_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.myianatimezone ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.myianatimezone"
      end
      # resource path
      local_var_path = '/myianatimezone'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#myianatimezone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the logged in user information.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def myprofile(token, opts = {})
      myprofile_with_http_info(token, opts)
      nil
    end

    # Gets the logged in user information.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def myprofile_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.myprofile ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.myprofile"
      end
      # resource path
      local_var_path = '/myprofile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#myprofile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of actions the user can execute.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def myrights(token, opts = {})
      myrights_with_http_info(token, opts)
      nil
    end

    # Gets the list of actions the user can execute.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def myrights_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.myrights ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.myrights"
      end
      # resource path
      local_var_path = '/myrights'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#myrights\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates logged user's profile information
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def mysaveprofile(opts = {})
      mysaveprofile_with_http_info(opts)
      nil
    end

    # Updates logged user&#39;s profile information
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mysaveprofile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mysaveprofile ...'
      end
      # resource path
      local_var_path = '/mysaveprofile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mysaveprofile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a notification
    # Allows the user to delete an existing notification.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationdelete(token, id, opts = {})
      notificationdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a notification
    # Allows the user to delete an existing notification.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.notificationdelete"
      end
      # resource path
      local_var_path = '/notificationdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a notification
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationget(token, id, opts = {})
      notificationget_with_http_info(token, id, opts)
      nil
    end

    # View a notification
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.notificationget"
      end
      # resource path
      local_var_path = '/notificationget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all public (in station) notifications for the specific user
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationgetforstation(station, user, opts = {})
      notificationgetforstation_with_http_info(station, user, opts)
      nil
    end

    # Gets all public (in station) notifications for the specific user
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationgetforstation_with_http_info(station, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationgetforstation ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.notificationgetforstation"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.notificationgetforstation"
      end
      # resource path
      local_var_path = '/notificationgetforstation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationgetforstation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the number of unread notifications
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationgetunreadcount(token, opts = {})
      notificationgetunreadcount_with_http_info(token, opts)
      nil
    end

    # Get the number of unread notifications
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationgetunreadcount_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationgetunreadcount ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationgetunreadcount"
      end
      # resource path
      local_var_path = '/notificationgetunreadcount'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationgetunreadcount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of all sent notifications
    # Allows the user to view the list of all sent notifications.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recipient The recipient whose notifications have to be listed.
    # @option opts [Integer] :status The status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @option opts [Boolean] :sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
    # @option opts [Boolean] :sentemail Specifies whether to list the notifications that were sent via e-mail or not.
    # @option opts [Boolean] :sentsms Specifies whether to list the notifications that were sent via sms or not.
    # @return [nil]
    def notificationlist(token, from, count, opts = {})
      notificationlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of all sent notifications
    # Allows the user to view the list of all sent notifications.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recipient The recipient whose notifications have to be listed.
    # @option opts [Integer] :status The status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @option opts [Boolean] :sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
    # @option opts [Boolean] :sentemail Specifies whether to list the notifications that were sent via e-mail or not.
    # @option opts [Boolean] :sentsms Specifies whether to list the notifications that were sent via sms or not.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.notificationlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.notificationlist"
      end
      # resource path
      local_var_path = '/notificationlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'recipient'] = opts[:'recipient'] if !opts[:'recipient'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?
      query_params[:'sentonscreen'] = opts[:'sentonscreen'] if !opts[:'sentonscreen'].nil?
      query_params[:'sentemail'] = opts[:'sentemail'] if !opts[:'sentemail'].nil?
      query_params[:'sentsms'] = opts[:'sentsms'] if !opts[:'sentsms'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the notifications sent to the current user
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status Specifies the status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notificationlistmine(token, from, count, opts = {})
      notificationlistmine_with_http_info(token, from, count, opts)
      nil
    end

    # View all the notifications sent to the current user
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status Specifies the status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationlistmine_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationlistmine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationlistmine"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.notificationlistmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.notificationlistmine"
      end
      # resource path
      local_var_path = '/notificationlistmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationlistmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark a notification as read
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notificationmarkasread(token, opts = {})
      notificationmarkasread_with_http_info(token, opts)
      nil
    end

    # Mark a notification as read
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationmarkasread_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationmarkasread ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationmarkasread"
      end
      # resource path
      local_var_path = '/notificationmarkasread'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationmarkasread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark a notification as unread
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notificationmarkasunread(token, opts = {})
      notificationmarkasunread_with_http_info(token, opts)
      nil
    end

    # Mark a notification as unread
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationmarkasunread_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationmarkasunread ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationmarkasunread"
      end
      # resource path
      local_var_path = '/notificationmarkasunread'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationmarkasunread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send notifications on screen, via email or text to users
    # Allows the user to send notifications to other users through the Send Message link.
    # @param token [String] The authentication token.
    # @param emailenabled [Boolean] Whether send the notification via email.
    # @param onscreenenabled [Boolean] Whether to display the notification on screen.
    # @param smsenabled [Boolean] Whether to send the notification via text message.
    # @param title [String] Notification title.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tousers Comma-separated Ids of users to send the notification.
    # @option opts [String] :togroups Comma-separated Ids of user groups to send the notification.
    # @option opts [String] :onscreenbody Body of the message for on-screen display.
    # @option opts [String] :onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
    # @option opts [String] :onscreenurl Url to redirect the user, if onscreenclick&#x3D;url.
    # @option opts [String] :onscreenclass How to display the notification. Valid values: info, success, warning, error
    # @option opts [Integer] :onscreenduration Time in seconds to display the notification.
    # @option opts [Integer] :showonstation Whether to show the notification in the sign-in station.
    # @option opts [String] :emailfromname Name of the email sender.
    # @option opts [String] :emailfrom Reply-to email.
    # @option opts [String] :emailsubject Subject of the email.
    # @option opts [String] :emailbody Body of the email.
    # @option opts [String] :textmessagebody Message for SMS. Max 160 characters.
    # @return [nil]
    def notificationsend(token, emailenabled, onscreenenabled, smsenabled, title, opts = {})
      notificationsend_with_http_info(token, emailenabled, onscreenenabled, smsenabled, title, opts)
      nil
    end

    # Send notifications on screen, via email or text to users
    # Allows the user to send notifications to other users through the Send Message link.
    # @param token [String] The authentication token.
    # @param emailenabled [Boolean] Whether send the notification via email.
    # @param onscreenenabled [Boolean] Whether to display the notification on screen.
    # @param smsenabled [Boolean] Whether to send the notification via text message.
    # @param title [String] Notification title.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tousers Comma-separated Ids of users to send the notification.
    # @option opts [String] :togroups Comma-separated Ids of user groups to send the notification.
    # @option opts [String] :onscreenbody Body of the message for on-screen display.
    # @option opts [String] :onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
    # @option opts [String] :onscreenurl Url to redirect the user, if onscreenclick&#x3D;url.
    # @option opts [String] :onscreenclass How to display the notification. Valid values: info, success, warning, error
    # @option opts [Integer] :onscreenduration Time in seconds to display the notification.
    # @option opts [Integer] :showonstation Whether to show the notification in the sign-in station.
    # @option opts [String] :emailfromname Name of the email sender.
    # @option opts [String] :emailfrom Reply-to email.
    # @option opts [String] :emailsubject Subject of the email.
    # @option opts [String] :emailbody Body of the email.
    # @option opts [String] :textmessagebody Message for SMS. Max 160 characters.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationsend_with_http_info(token, emailenabled, onscreenenabled, smsenabled, title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationsend ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationsend"
      end
      # verify the required parameter 'emailenabled' is set
      if @api_client.config.client_side_validation && emailenabled.nil?
        fail ArgumentError, "Missing the required parameter 'emailenabled' when calling DefaultApi.notificationsend"
      end
      # verify the required parameter 'onscreenenabled' is set
      if @api_client.config.client_side_validation && onscreenenabled.nil?
        fail ArgumentError, "Missing the required parameter 'onscreenenabled' when calling DefaultApi.notificationsend"
      end
      # verify the required parameter 'smsenabled' is set
      if @api_client.config.client_side_validation && smsenabled.nil?
        fail ArgumentError, "Missing the required parameter 'smsenabled' when calling DefaultApi.notificationsend"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.notificationsend"
      end
      # resource path
      local_var_path = '/notificationsend'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'emailenabled'] = emailenabled
      query_params[:'onscreenenabled'] = onscreenenabled
      query_params[:'smsenabled'] = smsenabled
      query_params[:'title'] = title
      query_params[:'tousers'] = opts[:'tousers'] if !opts[:'tousers'].nil?
      query_params[:'togroups'] = opts[:'togroups'] if !opts[:'togroups'].nil?
      query_params[:'onscreenbody'] = opts[:'onscreenbody'] if !opts[:'onscreenbody'].nil?
      query_params[:'onscreenclick'] = opts[:'onscreenclick'] if !opts[:'onscreenclick'].nil?
      query_params[:'onscreenurl'] = opts[:'onscreenurl'] if !opts[:'onscreenurl'].nil?
      query_params[:'onscreenclass'] = opts[:'onscreenclass'] if !opts[:'onscreenclass'].nil?
      query_params[:'onscreenduration'] = opts[:'onscreenduration'] if !opts[:'onscreenduration'].nil?
      query_params[:'showonstation'] = opts[:'showonstation'] if !opts[:'showonstation'].nil?
      query_params[:'emailfromname'] = opts[:'emailfromname'] if !opts[:'emailfromname'].nil?
      query_params[:'emailfrom'] = opts[:'emailfrom'] if !opts[:'emailfrom'].nil?
      query_params[:'emailsubject'] = opts[:'emailsubject'] if !opts[:'emailsubject'].nil?
      query_params[:'emailbody'] = opts[:'emailbody'] if !opts[:'emailbody'].nil?
      query_params[:'textmessagebody'] = opts[:'textmessagebody'] if !opts[:'textmessagebody'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationsend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send on-screen notifications
    # @param token [String] The authentication token.
    # @param notification [String] The ID of the notification to send.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationsendonscreen(token, notification, opts = {})
      notificationsendonscreen_with_http_info(token, notification, opts)
      nil
    end

    # Send on-screen notifications
    # @param token [String] The authentication token.
    # @param notification [String] The ID of the notification to send.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationsendonscreen_with_http_info(token, notification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationsendonscreen ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationsendonscreen"
      end
      # verify the required parameter 'notification' is set
      if @api_client.config.client_side_validation && notification.nil?
        fail ArgumentError, "Missing the required parameter 'notification' when calling DefaultApi.notificationsendonscreen"
      end
      # resource path
      local_var_path = '/notificationsendonscreen'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'notification'] = notification

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationsendonscreen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a notification topic
    # Allows the user to delete an existing notification topic.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification topic to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationtopicdelete(token, id, opts = {})
      notificationtopicdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a notification topic
    # Allows the user to delete an existing notification topic.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification topic to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopicdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopicdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationtopicdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.notificationtopicdelete"
      end
      # resource path
      local_var_path = '/notificationtopicdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopicdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a notification topic
    # Allows the user to view an individual notification topic and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification topic to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationtopicget(token, id, opts = {})
      notificationtopicget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a notification topic
    # Allows the user to view an individual notification topic and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification topic to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopicget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopicget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationtopicget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.notificationtopicget"
      end
      # resource path
      local_var_path = '/notificationtopicget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopicget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the notification topics
    # Allows the user to view the list of all notification topics.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationtopiclist(token, from, count, opts = {})
      notificationtopiclist_with_http_info(token, from, count, opts)
      nil
    end

    # List all the notification topics
    # Allows the user to view the list of all notification topics.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopiclist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopiclist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationtopiclist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.notificationtopiclist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.notificationtopiclist"
      end
      # resource path
      local_var_path = '/notificationtopiclist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopiclist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the notification topics available to subscribe
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationtopiclistsubscribe(token, opts = {})
      notificationtopiclistsubscribe_with_http_info(token, opts)
      nil
    end

    # List all the notification topics available to subscribe
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopiclistsubscribe_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopiclistsubscribe ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationtopiclistsubscribe"
      end
      # resource path
      local_var_path = '/notificationtopiclistsubscribe'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopiclistsubscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a notification topic
    # Allows the user to create and edit a notification topic.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def notificationtopicsave(opts = {})
      notificationtopicsave_with_http_info(opts)
      nil
    end

    # Create or edit a notification topic
    # Allows the user to create and edit a notification topic.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopicsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopicsave ...'
      end
      # resource path
      local_var_path = '/notificationtopicsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopicsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deregisters the current device to receive push notifications
    # @param devicetoken [String] The device token where to send the notification.
    # @param platform [String] Either ios or android
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pushderegister(devicetoken, platform, opts = {})
      pushderegister_with_http_info(devicetoken, platform, opts)
      nil
    end

    # Deregisters the current device to receive push notifications
    # @param devicetoken [String] The device token where to send the notification.
    # @param platform [String] Either ios or android
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pushderegister_with_http_info(devicetoken, platform, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pushderegister ...'
      end
      # verify the required parameter 'devicetoken' is set
      if @api_client.config.client_side_validation && devicetoken.nil?
        fail ArgumentError, "Missing the required parameter 'devicetoken' when calling DefaultApi.pushderegister"
      end
      # verify the required parameter 'platform' is set
      if @api_client.config.client_side_validation && platform.nil?
        fail ArgumentError, "Missing the required parameter 'platform' when calling DefaultApi.pushderegister"
      end
      # resource path
      local_var_path = '/pushderegister'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'devicetoken'] = devicetoken
      query_params[:'platform'] = platform

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pushderegister\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Registers the current device to receive push notifications
    # @param devicetoken [String] The device token where to send the notification.
    # @param platform [String] Either ios or android
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pushregister(devicetoken, platform, opts = {})
      pushregister_with_http_info(devicetoken, platform, opts)
      nil
    end

    # Registers the current device to receive push notifications
    # @param devicetoken [String] The device token where to send the notification.
    # @param platform [String] Either ios or android
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pushregister_with_http_info(devicetoken, platform, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pushregister ...'
      end
      # verify the required parameter 'devicetoken' is set
      if @api_client.config.client_side_validation && devicetoken.nil?
        fail ArgumentError, "Missing the required parameter 'devicetoken' when calling DefaultApi.pushregister"
      end
      # verify the required parameter 'platform' is set
      if @api_client.config.client_side_validation && platform.nil?
        fail ArgumentError, "Missing the required parameter 'platform' when calling DefaultApi.pushregister"
      end
      # resource path
      local_var_path = '/pushregister'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'devicetoken'] = devicetoken
      query_params[:'platform'] = platform

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pushregister\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print and email QR labels
    # Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose label needs to be printed.
    # @option opts [String] :group The id of the group whose members&#39; labels need to be printed.
    # @return [nil]
    def qrlabelsprint(token, opts = {})
      qrlabelsprint_with_http_info(token, opts)
      nil
    end

    # Print and email QR labels
    # Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose label needs to be printed.
    # @option opts [String] :group The id of the group whose members&#39; labels need to be printed.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def qrlabelsprint_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.qrlabelsprint ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.qrlabelsprint"
      end
      # resource path
      local_var_path = '/qrlabelsprint'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#qrlabelsprint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an image of a QR token
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def qrloginget(token, opts = {})
      qrloginget_with_http_info(token, opts)
      nil
    end

    # Gets an image of a QR token
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def qrloginget_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.qrloginget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.qrloginget"
      end
      # resource path
      local_var_path = '/qrloginget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#qrloginget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login
    # @param onetimetoken [String] The token read from the QR code.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def qrloginlogin(onetimetoken, opts = {})
      qrloginlogin_with_http_info(onetimetoken, opts)
      nil
    end

    # Login
    # @param onetimetoken [String] The token read from the QR code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def qrloginlogin_with_http_info(onetimetoken, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.qrloginlogin ...'
      end
      # verify the required parameter 'onetimetoken' is set
      if @api_client.config.client_side_validation && onetimetoken.nil?
        fail ArgumentError, "Missing the required parameter 'onetimetoken' when calling DefaultApi.qrloginlogin"
      end
      # resource path
      local_var_path = '/qrloginlogin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'onetimetoken'] = onetimetoken

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#qrloginlogin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a widget from the Quick Panel
    # Allows the user to delete a widget that has been added to the Quick Panel.
    # @param token [String] The authentication token.
    # @param id [String] The id of the widget.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpaneldeletewidget(token, id, opts = {})
      quickpaneldeletewidget_with_http_info(token, id, opts)
      nil
    end

    # Deletes a widget from the Quick Panel
    # Allows the user to delete a widget that has been added to the Quick Panel.
    # @param token [String] The authentication token.
    # @param id [String] The id of the widget.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpaneldeletewidget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpaneldeletewidget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpaneldeletewidget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.quickpaneldeletewidget"
      end
      # resource path
      local_var_path = '/quickpaneldeletewidget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpaneldeletewidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches the information for a specific widget.
    # @param token [String] The authentication token.
    # @param widgetid [String] The ID of the data to fetch it&#39;s data.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanelfetchwidget(token, widgetid, opts = {})
      quickpanelfetchwidget_with_http_info(token, widgetid, opts)
      nil
    end

    # Fetches the information for a specific widget.
    # @param token [String] The authentication token.
    # @param widgetid [String] The ID of the data to fetch it&#39;s data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelfetchwidget_with_http_info(token, widgetid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelfetchwidget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanelfetchwidget"
      end
      # verify the required parameter 'widgetid' is set
      if @api_client.config.client_side_validation && widgetid.nil?
        fail ArgumentError, "Missing the required parameter 'widgetid' when calling DefaultApi.quickpanelfetchwidget"
      end
      # resource path
      local_var_path = '/quickpanelfetchwidget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'widgetid'] = widgetid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelfetchwidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a widget included in the Quick Panel
    # Allows the user to view a widget added in as Quick Panel.
    # @param token [String] The authentication token.
    # @param id [String] The id of the widget to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanelgetwidget(token, id, opts = {})
      quickpanelgetwidget_with_http_info(token, id, opts)
      nil
    end

    # View details of a widget included in the Quick Panel
    # Allows the user to view a widget added in as Quick Panel.
    # @param token [String] The authentication token.
    # @param id [String] The id of the widget to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelgetwidget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelgetwidget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanelgetwidget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.quickpanelgetwidget"
      end
      # resource path
      local_var_path = '/quickpanelgetwidget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelgetwidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the initial information required to show the quick panels
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanelinit(token, opts = {})
      quickpanelinit_with_http_info(token, opts)
      nil
    end

    # Returns the initial information required to show the quick panels
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelinit_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelinit ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanelinit"
      end
      # resource path
      local_var_path = '/quickpanelinit'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelinit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the widgets that are added in the Quick Panel
    # Allows the user to view the widgets that have been added to the Quick Panel.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanellistwidgets(token, opts = {})
      quickpanellistwidgets_with_http_info(token, opts)
      nil
    end

    # Lists all the widgets that are added in the Quick Panel
    # Allows the user to view the widgets that have been added to the Quick Panel.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanellistwidgets_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanellistwidgets ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanellistwidgets"
      end
      # resource path
      local_var_path = '/quickpanellistwidgets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanellistwidgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the widget types available in the system
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanellistwidgettypes(token, opts = {})
      quickpanellistwidgettypes_with_http_info(token, opts)
      nil
    end

    # Lists all the widget types available in the system
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanellistwidgettypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanellistwidgettypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanellistwidgettypes"
      end
      # resource path
      local_var_path = '/quickpanellistwidgettypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanellistwidgettypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorders the widgets and moves them to a specific column
    # @param token [String] The authentication token.
    # @param sectionname [String] The section name where to sort the widgets.
    # @param orderids [String] CSV list of the widgets to reorder.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanelreorderwidgets(token, sectionname, orderids, opts = {})
      quickpanelreorderwidgets_with_http_info(token, sectionname, orderids, opts)
      nil
    end

    # Reorders the widgets and moves them to a specific column
    # @param token [String] The authentication token.
    # @param sectionname [String] The section name where to sort the widgets.
    # @param orderids [String] CSV list of the widgets to reorder.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelreorderwidgets_with_http_info(token, sectionname, orderids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelreorderwidgets ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanelreorderwidgets"
      end
      # verify the required parameter 'sectionname' is set
      if @api_client.config.client_side_validation && sectionname.nil?
        fail ArgumentError, "Missing the required parameter 'sectionname' when calling DefaultApi.quickpanelreorderwidgets"
      end
      # verify the required parameter 'orderids' is set
      if @api_client.config.client_side_validation && orderids.nil?
        fail ArgumentError, "Missing the required parameter 'orderids' when calling DefaultApi.quickpanelreorderwidgets"
      end
      # resource path
      local_var_path = '/quickpanelreorderwidgets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'sectionname'] = sectionname
      query_params[:'orderids'] = orderids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelreorderwidgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a widget for the Quick Panel
    # Allows the user to save a widget to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def quickpanelsavewidget(opts = {})
      quickpanelsavewidget_with_http_info(opts)
      nil
    end

    # Saves a widget for the Quick Panel
    # Allows the user to save a widget to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelsavewidget_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelsavewidget ...'
      end
      # resource path
      local_var_path = '/quickpanelsavewidget'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelsavewidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of available reports
    # Allows the user to view the complete list of available, canned reports.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reportlist(token, opts = {})
      reportlist_with_http_info(token, opts)
      nil
    end

    # View a list of available reports
    # Allows the user to view the complete list of available, canned reports.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportlist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportlist"
      end
      # resource path
      local_var_path = '/reportlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permissions by user report
    # Lists all the users in the system including their corresponding permissions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [nil]
    def reportpermissionsbyuser(token, opts = {})
      reportpermissionsbyuser_with_http_info(token, opts)
      nil
    end

    # Permissions by user report
    # Lists all the users in the system including their corresponding permissions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportpermissionsbyuser_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportpermissionsbyuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportpermissionsbyuser"
      end
      # resource path
      local_var_path = '/reportpermissionsbyuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportpermissionsbyuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries and loads the specified report, in background.
    # Allows the user to run reports, in background, with the exception of attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :repformat The format of the resulting report. Json, pdf, csv, ...
    # @option opts [String] :fillgroupid If specified, the result is used to fill the group with the given ID
    # @option opts [String] :groupby How to group the records. In the format &#39;col1+col2|col3+col4
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @option opts [String] :filtertext The user friendly text of the applied filters.
    # @return [nil]
    def reportprepare(token, reportname, opts = {})
      reportprepare_with_http_info(token, reportname, opts)
      nil
    end

    # Queries and loads the specified report, in background.
    # Allows the user to run reports, in background, with the exception of attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :repformat The format of the resulting report. Json, pdf, csv, ...
    # @option opts [String] :fillgroupid If specified, the result is used to fill the group with the given ID
    # @option opts [String] :groupby How to group the records. In the format &#39;col1+col2|col3+col4
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @option opts [String] :filtertext The user friendly text of the applied filters.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportprepare_with_http_info(token, reportname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportprepare ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportprepare"
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling DefaultApi.reportprepare"
      end
      # resource path
      local_var_path = '/reportprepare'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'reportname'] = reportname
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'repformat'] = opts[:'repformat'] if !opts[:'repformat'].nil?
      query_params[:'fillgroupid'] = opts[:'fillgroupid'] if !opts[:'fillgroupid'].nil?
      query_params[:'groupby'] = opts[:'groupby'] if !opts[:'groupby'].nil?
      query_params[:'refreshgroup'] = opts[:'refreshgroup'] if !opts[:'refreshgroup'].nil?
      query_params[:'filtertext'] = opts[:'filtertext'] if !opts[:'filtertext'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportprepare\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query and load a specified report
    # Allows the user to run reports with the exception of attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [nil]
    def reportquery(token, reportname, opts = {})
      reportquery_with_http_info(token, reportname, opts)
      nil
    end

    # Query and load a specified report
    # Allows the user to run reports with the exception of attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportquery_with_http_info(token, reportname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportquery ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportquery"
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling DefaultApi.reportquery"
      end
      # resource path
      local_var_path = '/reportquery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'reportname'] = reportname
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportquery\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a list of roles
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Filter by name of the role.
    # @return [nil]
    def rolelist(token, opts = {})
      rolelist_with_http_info(token, opts)
      nil
    end

    # Show a list of roles
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Filter by name of the role.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rolelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rolelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rolelist"
      end
      # resource path
      local_var_path = '/rolelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rolelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a rule
    # Allows the user to delete an existing rule.
    # @param token [String] The authentication token.
    # @param id [String] The id of the rule to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ruledelete(token, id, opts = {})
      ruledelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a rule
    # Allows the user to delete an existing rule.
    # @param token [String] The authentication token.
    # @param id [String] The id of the rule to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ruledelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ruledelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ruledelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ruledelete"
      end
      # resource path
      local_var_path = '/ruledelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ruledelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a rule
    # Allows the user to view an individual rule and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the rule to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ruleget(token, id, opts = {})
      ruleget_with_http_info(token, id, opts)
      nil
    end

    # View details of a rule
    # Allows the user to view an individual rule and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the rule to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ruleget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ruleget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ruleget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ruleget"
      end
      # resource path
      local_var_path = '/ruleget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ruleget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a rule event type
    # Allows the user to view the trigger and its available conditions for the rule.
    # @param token [String] The authentication token.
    # @param event [String] The name of the event to refresh.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rulegeteventtype(token, event, opts = {})
      rulegeteventtype_with_http_info(token, event, opts)
      nil
    end

    # View details of a rule event type
    # Allows the user to view the trigger and its available conditions for the rule.
    # @param token [String] The authentication token.
    # @param event [String] The name of the event to refresh.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulegeteventtype_with_http_info(token, event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulegeteventtype ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulegeteventtype"
      end
      # verify the required parameter 'event' is set
      if @api_client.config.client_side_validation && event.nil?
        fail ArgumentError, "Missing the required parameter 'event' when calling DefaultApi.rulegeteventtype"
      end
      # resource path
      local_var_path = '/rulegeteventtype'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'event'] = event

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulegeteventtype\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of user rules
    # Allows the user to view the list of all rules.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rulelist(token, from, count, opts = {})
      rulelist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of user rules
    # Allows the user to view the list of all rules.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulelist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.rulelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.rulelist"
      end
      # resource path
      local_var_path = '/rulelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of rule actions available
    # Allows the user to view all the available rule actions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rulelistactions(token, opts = {})
      rulelistactions_with_http_info(token, opts)
      nil
    end

    # View a list of rule actions available
    # Allows the user to view all the available rule actions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulelistactions_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulelistactions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulelistactions"
      end
      # resource path
      local_var_path = '/rulelistactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulelistactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of rule event types
    # Allows the user to view a list of available triggers for rules.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rulelisteventtypes(token, opts = {})
      rulelisteventtypes_with_http_info(token, opts)
      nil
    end

    # View a list of rule event types
    # Allows the user to view a list of available triggers for rules.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulelisteventtypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulelisteventtypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulelisteventtypes"
      end
      # resource path
      local_var_path = '/rulelisteventtypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulelisteventtypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the http requests sent as a result of a rule
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :failed If true only failed requests will be returned
    # @option opts [Integer] :status The http status to filter the requests
    # @return [nil]
    def rulelisthttprequests(token, from, count, opts = {})
      rulelisthttprequests_with_http_info(token, from, count, opts)
      nil
    end

    # View all the http requests sent as a result of a rule
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :failed If true only failed requests will be returned
    # @option opts [Integer] :status The http status to filter the requests
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulelisthttprequests_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulelisthttprequests ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulelisthttprequests"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.rulelisthttprequests"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.rulelisthttprequests"
      end
      # resource path
      local_var_path = '/rulelisthttprequests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'failed'] = opts[:'failed'] if !opts[:'failed'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulelisthttprequests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a rule
    # Allows the user to create or edit a rule.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def rulesave(opts = {})
      rulesave_with_http_info(opts)
      nil
    end

    # Create or edit a rule
    # Allows the user to create or edit a rule.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulesave ...'
      end
      # resource path
      local_var_path = '/rulesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search
    # @param token [String] The authentication token.
    # @param query [String] The query to search for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Current page to show, zero-based.
    # @return [nil]
    def search(token, query, opts = {})
      search_with_http_info(token, query, opts)
      nil
    end

    # Search
    # @param token [String] The authentication token.
    # @param query [String] The query to search for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Current page to show, zero-based.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def search_with_http_info(token, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.search"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search"
      end
      # resource path
      local_var_path = '/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'query'] = query
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the information of the entities that can be searched
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def searchgetentities(token, opts = {})
      searchgetentities_with_http_info(token, opts)
      nil
    end

    # Get the information of the entities that can be searched
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def searchgetentities_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.searchgetentities ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.searchgetentities"
      end
      # resource path
      local_var_path = '/searchgetentities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#searchgetentities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the list of users for a specific permission
    # @param token [String] The authentication token.
    # @param commandname [String] Name of the action or command to get the roles.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def securityassesspermission(token, commandname, opts = {})
      securityassesspermission_with_http_info(token, commandname, opts)
      nil
    end

    # Returns the list of users for a specific permission
    # @param token [String] The authentication token.
    # @param commandname [String] Name of the action or command to get the roles.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def securityassesspermission_with_http_info(token, commandname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.securityassesspermission ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.securityassesspermission"
      end
      # verify the required parameter 'commandname' is set
      if @api_client.config.client_side_validation && commandname.nil?
        fail ArgumentError, "Missing the required parameter 'commandname' when calling DefaultApi.securityassesspermission"
      end
      # resource path
      local_var_path = '/securityassesspermission'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'commandname'] = commandname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#securityassesspermission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the list of permissions for a specific role
    # @param token [String] The authentication token.
    # @param roleid [String] Role ID to list the effective permissions.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def securityassessrole(token, roleid, opts = {})
      securityassessrole_with_http_info(token, roleid, opts)
      nil
    end

    # Returns the list of permissions for a specific role
    # @param token [String] The authentication token.
    # @param roleid [String] Role ID to list the effective permissions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def securityassessrole_with_http_info(token, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.securityassessrole ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.securityassessrole"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling DefaultApi.securityassessrole"
      end
      # resource path
      local_var_path = '/securityassessrole'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#securityassessrole\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the list of users for a specific user
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid Location ID to list the users with that scope.
    # @return [nil]
    def securityassessscope(token, opts = {})
      securityassessscope_with_http_info(token, opts)
      nil
    end

    # Returns the list of users for a specific user
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid Location ID to list the users with that scope.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def securityassessscope_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.securityassessscope ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.securityassessscope"
      end
      # resource path
      local_var_path = '/securityassessscope'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#securityassessscope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the list of permissions for a specific user
    # @param token [String] The authentication token.
    # @param userid [String] User ID to list the effective permissions.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def securityassessuser(token, userid, opts = {})
      securityassessuser_with_http_info(token, userid, opts)
      nil
    end

    # Returns the list of permissions for a specific user
    # @param token [String] The authentication token.
    # @param userid [String] User ID to list the effective permissions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def securityassessuser_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.securityassessuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.securityassessuser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.securityassessuser"
      end
      # resource path
      local_var_path = '/securityassessuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#securityassessuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register current user to an event session
    # Allows the user to register themselves for an event.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionregaddcurrentuser(token, eventid, sessiondate, opts = {})
      sessionregaddcurrentuser_with_http_info(token, eventid, sessiondate, opts)
      nil
    end

    # Register current user to an event session
    # Allows the user to register themselves for an event.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregaddcurrentuser_with_http_info(token, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregaddcurrentuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionregaddcurrentuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionregaddcurrentuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionregaddcurrentuser"
      end
      # resource path
      local_var_path = '/sessionregaddcurrentuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregaddcurrentuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register users for events
    # Allows the user to register another user for an upcoming event.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionregadduser(token, userid, eventid, sessiondate, opts = {})
      sessionregadduser_with_http_info(token, userid, eventid, sessiondate, opts)
      nil
    end

    # Register users for events
    # Allows the user to register another user for an upcoming event.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregadduser_with_http_info(token, userid, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregadduser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionregadduser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.sessionregadduser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionregadduser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionregadduser"
      end
      # resource path
      local_var_path = '/sessionregadduser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregadduser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the sessions the logged user is registered to
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Start date to filter the sessions.
    # @return [nil]
    def sessionreggetmysessions(token, opts = {})
      sessionreggetmysessions_with_http_info(token, opts)
      nil
    end

    # View all the sessions the logged user is registered to
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Start date to filter the sessions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreggetmysessions_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreggetmysessions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreggetmysessions"
      end
      # resource path
      local_var_path = '/sessionreggetmysessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreggetmysessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the registrations for a specific user
    # Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list sessions.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreggetsessions(token, userid, opts = {})
      sessionreggetsessions_with_http_info(token, userid, opts)
      nil
    end

    # Lists the registrations for a specific user
    # Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list sessions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreggetsessions_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreggetsessions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreggetsessions"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.sessionreggetsessions"
      end
      # resource path
      local_var_path = '/sessionreggetsessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreggetsessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the settings for session registration
    # Allows the user to view a event's session registration settings.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid The id of the location to save settings.
    # @option opts [String] :eventid The id of the event to save settings.
    # @option opts [DateTime] :sessiondate The date and time when the session starts.
    # @option opts [Boolean] :noinherit True to get the location/event/session specific settings without looking for the more global settings.
    # @return [nil]
    def sessionreggetsettings(token, opts = {})
      sessionreggetsettings_with_http_info(token, opts)
      nil
    end

    # Get the settings for session registration
    # Allows the user to view a event&#39;s session registration settings.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid The id of the location to save settings.
    # @option opts [String] :eventid The id of the event to save settings.
    # @option opts [DateTime] :sessiondate The date and time when the session starts.
    # @option opts [Boolean] :noinherit True to get the location/event/session specific settings without looking for the more global settings.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreggetsettings_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreggetsettings ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreggetsettings"
      end
      # resource path
      local_var_path = '/sessionreggetsettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'sessiondate'] = opts[:'sessiondate'] if !opts[:'sessiondate'].nil?
      query_params[:'noinherit'] = opts[:'noinherit'] if !opts[:'noinherit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreggetsettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the registrations for a specific session
    # Allows the user to view the registration for a specified event session.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list sessions.
    # @param sessiondate [DateTime] The date of the session to find.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreggetusers(token, eventid, sessiondate, opts = {})
      sessionreggetusers_with_http_info(token, eventid, sessiondate, opts)
      nil
    end

    # Lists the registrations for a specific session
    # Allows the user to view the registration for a specified event session.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list sessions.
    # @param sessiondate [DateTime] The date of the session to find.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreggetusers_with_http_info(token, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreggetusers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreggetusers"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionreggetusers"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionreggetusers"
      end
      # resource path
      local_var_path = '/sessionreggetusers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreggetusers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the sessions available for a specific event
    # Allows the user to view all the sessions available for a recurring event.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :sessiondate The date of the session to find.
    # @return [nil]
    def sessionreglistsessions(token, eventid, opts = {})
      sessionreglistsessions_with_http_info(token, eventid, opts)
      nil
    end

    # List the sessions available for a specific event
    # Allows the user to view all the sessions available for a recurring event.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :sessiondate The date of the session to find.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreglistsessions_with_http_info(token, eventid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreglistsessions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreglistsessions"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionreglistsessions"
      end
      # resource path
      local_var_path = '/sessionreglistsessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = opts[:'sessiondate'] if !opts[:'sessiondate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreglistsessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of upcoming event sessions
    # Allows the user to view the full list of upcoming events.
    # @param token [String] The authentication token.
    # @param date [DateTime] Only sessions in the week of the specified date will be returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreglistupcoming(token, date, opts = {})
      sessionreglistupcoming_with_http_info(token, date, opts)
      nil
    end

    # View a list of upcoming event sessions
    # Allows the user to view the full list of upcoming events.
    # @param token [String] The authentication token.
    # @param date [DateTime] Only sessions in the week of the specified date will be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreglistupcoming_with_http_info(token, date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreglistupcoming ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreglistupcoming"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling DefaultApi.sessionreglistupcoming"
      end
      # resource path
      local_var_path = '/sessionreglistupcoming'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreglistupcoming\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of upcoming sessions of a particular event
    # Allows the user to view the upcoming recurring sessions of a specified event.
    # @param token [String] The authentication token.
    # @param date [DateTime] Start date to filter the returned sessions.
    # @param event [String] The id of the event whose sessions will be returned
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreglistupcomingevent(token, date, event, opts = {})
      sessionreglistupcomingevent_with_http_info(token, date, event, opts)
      nil
    end

    # View a list of upcoming sessions of a particular event
    # Allows the user to view the upcoming recurring sessions of a specified event.
    # @param token [String] The authentication token.
    # @param date [DateTime] Start date to filter the returned sessions.
    # @param event [String] The id of the event whose sessions will be returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreglistupcomingevent_with_http_info(token, date, event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreglistupcomingevent ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreglistupcomingevent"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling DefaultApi.sessionreglistupcomingevent"
      end
      # verify the required parameter 'event' is set
      if @api_client.config.client_side_validation && event.nil?
        fail ArgumentError, "Missing the required parameter 'event' when calling DefaultApi.sessionreglistupcomingevent"
      end
      # resource path
      local_var_path = '/sessionreglistupcomingevent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'date'] = date
      query_params[:'event'] = event

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreglistupcomingevent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregister current user from an event session
    # Allows the user to un-register themselves from an event.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionregremovecurrentuser(token, eventid, sessiondate, opts = {})
      sessionregremovecurrentuser_with_http_info(token, eventid, sessiondate, opts)
      nil
    end

    # Unregister current user from an event session
    # Allows the user to un-register themselves from an event.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregremovecurrentuser_with_http_info(token, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregremovecurrentuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionregremovecurrentuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionregremovecurrentuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionregremovecurrentuser"
      end
      # resource path
      local_var_path = '/sessionregremovecurrentuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregremovecurrentuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a user from an event session
    # Allows the user to un-register another user from an event.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionregremoveuser(token, userid, eventid, sessiondate, opts = {})
      sessionregremoveuser_with_http_info(token, userid, eventid, sessiondate, opts)
      nil
    end

    # Removes a user from an event session
    # Allows the user to un-register another user from an event.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregremoveuser_with_http_info(token, userid, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregremoveuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionregremoveuser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.sessionregremoveuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionregremoveuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionregremoveuser"
      end
      # resource path
      local_var_path = '/sessionregremoveuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregremoveuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save the settings for an event's session registration
    # Allows the user to save the settings for an event.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionregsavesettings(opts = {})
      sessionregsavesettings_with_http_info(opts)
      nil
    end

    # Save the settings for an event&#39;s session registration
    # Allows the user to save the settings for an event.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregsavesettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregsavesettings ...'
      end
      # resource path
      local_var_path = '/sessionregsavesettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregsavesettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a logo to the account
    # Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def settingaddlogo(token, upload, filename, opts = {})
      settingaddlogo_with_http_info(token, upload, filename, opts)
      nil
    end

    # Add a logo to the account
    # Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def settingaddlogo_with_http_info(token, upload, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settingaddlogo ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.settingaddlogo"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.settingaddlogo"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling DefaultApi.settingaddlogo"
      end
      # resource path
      local_var_path = '/settingaddlogo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'upload'] = upload
      query_params[:'filename'] = filename

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settingaddlogo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get settings for the account or the specified scope
    # @param keys [String] The option keys to get values for. Enter multiple separated by comma.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :domain The account domain, in case of reading settings annonymously.
    # @option opts [String] :scope The scope of the settings to get.
    # @return [nil]
    def settingget(keys, opts = {})
      settingget_with_http_info(keys, opts)
      nil
    end

    # Get settings for the account or the specified scope
    # @param keys [String] The option keys to get values for. Enter multiple separated by comma.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :domain The account domain, in case of reading settings annonymously.
    # @option opts [String] :scope The scope of the settings to get.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def settingget_with_http_info(keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settingget ...'
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling DefaultApi.settingget"
      end
      # resource path
      local_var_path = '/settingget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keys'] = keys
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settingget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save settings for the account or the specified scope
    # Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def settingsave(opts = {})
      settingsave_with_http_info(opts)
      nil
    end

    # Save settings for the account or the specified scope
    # Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def settingsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settingsave ...'
      end
      # resource path
      local_var_path = '/settingsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settingsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View general settings for the account
    # Allows the user to view the settings' general section.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def settingviewgeneral(token, opts = {})
      settingviewgeneral_with_http_info(token, opts)
      nil
    end

    # View general settings for the account
    # Allows the user to view the settings&#39; general section.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def settingviewgeneral_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settingviewgeneral ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.settingviewgeneral"
      end
      # resource path
      local_var_path = '/settingviewgeneral'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settingviewgeneral\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate/reset single sign on access key.
    # Allows the user to generate or reset the access key for single sign-on.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ssogeneratekey(token, opts = {})
      ssogeneratekey_with_http_info(token, opts)
      nil
    end

    # Generate/reset single sign on access key.
    # Allows the user to generate or reset the access key for single sign-on.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ssogeneratekey_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ssogeneratekey ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ssogeneratekey"
      end
      # resource path
      local_var_path = '/ssogeneratekey'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ssogeneratekey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View single sign on settings.
    # Allows the user to view settings for single sign-on.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ssogetsettings(token, opts = {})
      ssogetsettings_with_http_info(token, opts)
      nil
    end

    # View single sign on settings.
    # Allows the user to view settings for single sign-on.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ssogetsettings_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ssogetsettings ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ssogetsettings"
      end
      # resource path
      local_var_path = '/ssogetsettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ssogetsettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue single sign-on token
    # @param key [String] The single sign-on key of the account.
    # @param username [String] The email of the user to sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expires Specifies whether the session should expire when inactive.
    # @return [nil]
    def ssoissuetoken(key, username, opts = {})
      ssoissuetoken_with_http_info(key, username, opts)
      nil
    end

    # Issue single sign-on token
    # @param key [String] The single sign-on key of the account.
    # @param username [String] The email of the user to sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expires Specifies whether the session should expire when inactive.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ssoissuetoken_with_http_info(key, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ssoissuetoken ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.ssoissuetoken"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.ssoissuetoken"
      end
      # resource path
      local_var_path = '/ssoissuetoken'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key
      query_params[:'username'] = username
      query_params[:'expires'] = opts[:'expires'] if !opts[:'expires'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ssoissuetoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit single sign-on settings.
    # Allows the user to edit settings for single sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def ssosavesettings(opts = {})
      ssosavesettings_with_http_info(opts)
      nil
    end

    # Edit single sign-on settings.
    # Allows the user to edit settings for single sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ssosavesettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ssosavesettings ...'
      end
      # resource path
      local_var_path = '/ssosavesettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ssosavesettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a sign-in station
    # Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
    # @param token [String] The authentication token.
    # @param id [String] The id of the sign-in station to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationdelete(token, id, opts = {})
      stationdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a sign-in station
    # Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
    # @param token [String] The authentication token.
    # @param id [String] The id of the sign-in station to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.stationdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stationdelete"
      end
      # resource path
      local_var_path = '/stationdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a sign-in station
    # Allows the user to view an individual sign-in station and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationget(token, id, opts = {})
      stationget_with_http_info(token, id, opts)
      nil
    end

    # View details of a sign-in station
    # Allows the user to view an individual sign-in station and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.stationget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stationget"
      end
      # resource path
      local_var_path = '/stationget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the current terms
    # @param station [String] The id of the sign-in station whose account&#39;s current terms have to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationgetcurrentterms(station, opts = {})
      stationgetcurrentterms_with_http_info(station, opts)
      nil
    end

    # Get all the current terms
    # @param station [String] The id of the sign-in station whose account&#39;s current terms have to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationgetcurrentterms_with_http_info(station, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationgetcurrentterms ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.stationgetcurrentterms"
      end
      # resource path
      local_var_path = '/stationgetcurrentterms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationgetcurrentterms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a the info to display in the sign-in station by it's ID.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :event The id of the event, to override the one by schedule.
    # @return [nil]
    def stationgetinfo(id, opts = {})
      stationgetinfo_with_http_info(id, opts)
      nil
    end

    # Gets a the info to display in the sign-in station by it&#39;s ID.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :event The id of the event, to override the one by schedule.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationgetinfo_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationgetinfo ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stationgetinfo"
      end
      # resource path
      local_var_path = '/stationgetinfo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationgetinfo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current license information
    # @param station [String] The id of the sign-in station whose account&#39;s license has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationgetlicense(station, opts = {})
      stationgetlicense_with_http_info(station, opts)
      nil
    end

    # Gets the current license information
    # @param station [String] The id of the sign-in station whose account&#39;s license has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationgetlicense_with_http_info(station, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationgetlicense ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.stationgetlicense"
      end
      # resource path
      local_var_path = '/stationgetlicense'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationgetlicense\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of sign-in stations
    # Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationlist(token, from, count, opts = {})
      stationlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of sign-in stations
    # Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.stationlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.stationlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.stationlist"
      end
      # resource path
      local_var_path = '/stationlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a sign-in station
    # Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def stationsave(opts = {})
      stationsave_with_http_info(opts)
      nil
    end

    # Create or edit a sign-in station
    # Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationsave ...'
      end
      # resource path
      local_var_path = '/stationsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlocks the sign-in station.
    # @param id [String] The id of the sign-in station to unlock.
    # @param passcode [String] The passcode to unlock the station.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationunlock(id, passcode, method, opts = {})
      stationunlock_with_http_info(id, passcode, method, opts)
      nil
    end

    # Unlocks the sign-in station.
    # @param id [String] The id of the sign-in station to unlock.
    # @param passcode [String] The passcode to unlock the station.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationunlock_with_http_info(id, passcode, method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationunlock ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stationunlock"
      end
      # verify the required parameter 'passcode' is set
      if @api_client.config.client_side_validation && passcode.nil?
        fail ArgumentError, "Missing the required parameter 'passcode' when calling DefaultApi.stationunlock"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling DefaultApi.stationunlock"
      end
      # resource path
      local_var_path = '/stationunlock'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'passcode'] = passcode
      query_params[:'method'] = method

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationunlock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a swipe
    # Allows the user to delete an existing attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def swipedelete(token, id, opts = {})
      swipedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a swipe
    # Allows the user to delete an existing attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.swipedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.swipedelete"
      end
      # resource path
      local_var_path = '/swipedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a swipe
    # Allows the user to view an individual attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def swipeget(token, id, opts = {})
      swipeget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a swipe
    # Allows the user to view an individual attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipeget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipeget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.swipeget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.swipeget"
      end
      # resource path
      local_var_path = '/swipeget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipeget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of swipes
    # Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def swipelist(from, count, opts = {})
      swipelist_with_http_info(from, count, opts)
      nil
    end

    # View a list of swipes
    # Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipelist_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipelist ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.swipelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.swipelist"
      end
      # resource path
      local_var_path = '/swipelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a swipe, and if possible, save the related attendance log
    # Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def swipesave(opts = {})
      swipesave_with_http_info(opts)
      nil
    end

    # Create or edit a swipe, and if possible, save the related attendance log
    # Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipesave ...'
      end
      # resource path
      local_var_path = '/swipesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new swipe from a sign-in station, and if possible, creates the attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def swipesaveanonym(opts = {})
      swipesaveanonym_with_http_info(opts)
      nil
    end

    # Creates a new swipe from a sign-in station, and if possible, creates the attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipesaveanonym_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipesaveanonym ...'
      end
      # resource path
      local_var_path = '/swipesaveanonym'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipesaveanonym\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a tag
    # Allows the user to delete an existing tag.
    # @param token [String] The authentication token.
    # @param id [String] The id of the tag to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tagdelete(token, id, opts = {})
      tagdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a tag
    # Allows the user to delete an existing tag.
    # @param token [String] The authentication token.
    # @param id [String] The id of the tag to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tagdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tagdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.tagdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.tagdelete"
      end
      # resource path
      local_var_path = '/tagdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tagdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a specified tag
    # Allows the user to click on and view the settings for a tag.
    # @param token [String] The authentication token.
    # @param id [String] The id of the tag to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tagget(token, id, opts = {})
      tagget_with_http_info(token, id, opts)
      nil
    end

    # View details of a specified tag
    # Allows the user to click on and view the settings for a tag.
    # @param token [String] The authentication token.
    # @param id [String] The id of the tag to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tagget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tagget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.tagget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.tagget"
      end
      # resource path
      local_var_path = '/tagget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tagget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of tags
    # Allows the user to view the list of tags.
    # @param token [String] The authentication token.
    # @param group [String] The group of the tags to return.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def taglist(token, group, from, count, opts = {})
      taglist_with_http_info(token, group, from, count, opts)
      nil
    end

    # View a list of tags
    # Allows the user to view the list of tags.
    # @param token [String] The authentication token.
    # @param group [String] The group of the tags to return.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def taglist_with_http_info(token, group, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.taglist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.taglist"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling DefaultApi.taglist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.taglist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.taglist"
      end
      # resource path
      local_var_path = '/taglist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'group'] = group
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#taglist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of entities that can be tagged
    # Allows the user to view the list of user roles that can be tagged, according to that tag's settings.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def taglistgroups(token, opts = {})
      taglistgroups_with_http_info(token, opts)
      nil
    end

    # View a list of entities that can be tagged
    # Allows the user to view the list of user roles that can be tagged, according to that tag&#39;s settings.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def taglistgroups_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.taglistgroups ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.taglistgroups"
      end
      # resource path
      local_var_path = '/taglistgroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#taglistgroups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a tag
    # Allows the user to create or edit a tag.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def tagsave(opts = {})
      tagsave_with_http_info(opts)
      nil
    end

    # Create or edit a tag
    # Allows the user to create or edit a tag.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tagsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tagsave ...'
      end
      # resource path
      local_var_path = '/tagsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tagsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for tags in the account
    # Allows the user to search for tags.
    # @param token [String] The authentication token.
    # @param query [String] The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allowcreatingnew Specifies whether an option to create a new tag should be retrieved.
    # @return [nil]
    def tagsearch(token, query, opts = {})
      tagsearch_with_http_info(token, query, opts)
      nil
    end

    # Search for tags in the account
    # Allows the user to search for tags.
    # @param token [String] The authentication token.
    # @param query [String] The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allowcreatingnew Specifies whether an option to create a new tag should be retrieved.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tagsearch_with_http_info(token, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tagsearch ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.tagsearch"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.tagsearch"
      end
      # resource path
      local_var_path = '/tagsearch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'query'] = query
      query_params[:'allowcreatingnew'] = opts[:'allowcreatingnew'] if !opts[:'allowcreatingnew'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tagsearch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an image to a template
    # Allows the user to add an image to a badge or certificate template.
    # @param token [String] The authentication token.
    # @param template [String] The id of the template where the image has to be added
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @return [nil]
    def templateaddimage(token, template, upload, opts = {})
      templateaddimage_with_http_info(token, template, upload, opts)
      nil
    end

    # Add an image to a template
    # Allows the user to add an image to a badge or certificate template.
    # @param token [String] The authentication token.
    # @param template [String] The id of the template where the image has to be added
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templateaddimage_with_http_info(token, template, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templateaddimage ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templateaddimage"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling DefaultApi.templateaddimage"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.templateaddimage"
      end
      # resource path
      local_var_path = '/templateaddimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'template'] = template
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templateaddimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a template
    # Allows the user to delete an existing template.
    # @param token [String] The authentication token.
    # @param id [String] The id of the template to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templatedelete(token, id, opts = {})
      templatedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a template
    # Allows the user to delete an existing template.
    # @param token [String] The authentication token.
    # @param id [String] The id of the template to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templatedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.templatedelete"
      end
      # resource path
      local_var_path = '/templatedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send generated templates by email
    # Allows the user to send generated templates via email through AccuCampus.
    # @param token [String] The authentication token.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param emailsubject [String] Args depending on the send-to flag.
    # @param emailbody [String] Args depending on the send-to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate).
    # @option opts [String] :emailfrom The name of the sender to be displayed in the receipients inbox
    # @option opts [String] :emailreplyto The reply-to field for the emails.
    # @return [nil]
    def templateemail(token, jobid, emailsubject, emailbody, opts = {})
      templateemail_with_http_info(token, jobid, emailsubject, emailbody, opts)
      nil
    end

    # Send generated templates by email
    # Allows the user to send generated templates via email through AccuCampus.
    # @param token [String] The authentication token.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param emailsubject [String] Args depending on the send-to flag.
    # @param emailbody [String] Args depending on the send-to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate).
    # @option opts [String] :emailfrom The name of the sender to be displayed in the receipients inbox
    # @option opts [String] :emailreplyto The reply-to field for the emails.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templateemail_with_http_info(token, jobid, emailsubject, emailbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templateemail ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templateemail"
      end
      # verify the required parameter 'jobid' is set
      if @api_client.config.client_side_validation && jobid.nil?
        fail ArgumentError, "Missing the required parameter 'jobid' when calling DefaultApi.templateemail"
      end
      # verify the required parameter 'emailsubject' is set
      if @api_client.config.client_side_validation && emailsubject.nil?
        fail ArgumentError, "Missing the required parameter 'emailsubject' when calling DefaultApi.templateemail"
      end
      # verify the required parameter 'emailbody' is set
      if @api_client.config.client_side_validation && emailbody.nil?
        fail ArgumentError, "Missing the required parameter 'emailbody' when calling DefaultApi.templateemail"
      end
      # resource path
      local_var_path = '/templateemail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'jobid'] = jobid
      query_params[:'emailsubject'] = emailsubject
      query_params[:'emailbody'] = emailbody
      query_params[:'templatekind'] = opts[:'templatekind'] if !opts[:'templatekind'].nil?
      query_params[:'emailfrom'] = opts[:'emailfrom'] if !opts[:'emailfrom'].nil?
      query_params[:'emailreplyto'] = opts[:'emailreplyto'] if !opts[:'emailreplyto'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templateemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate specified templates
    # Allows the user to generate an existing template as badges or certificates.
    # @param token [String] The authentication token.
    # @param template [String] The id of the template to generate.
    # @param source [String] The source key of the selected template data source.
    # @param singlefile [Boolean] True if all the templates should be placed in the same file, false if each one shoud be in its own file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.
    # @option opts [Boolean] :forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
    # @option opts [String] :role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
    # @option opts [String] :filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [nil]
    def templategenerate(token, template, source, singlefile, opts = {})
      templategenerate_with_http_info(token, template, source, singlefile, opts)
      nil
    end

    # Generate specified templates
    # Allows the user to generate an existing template as badges or certificates.
    # @param token [String] The authentication token.
    # @param template [String] The id of the template to generate.
    # @param source [String] The source key of the selected template data source.
    # @param singlefile [Boolean] True if all the templates should be placed in the same file, false if each one shoud be in its own file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.
    # @option opts [Boolean] :forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
    # @option opts [String] :role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
    # @option opts [String] :filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templategenerate_with_http_info(token, template, source, singlefile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templategenerate ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templategenerate"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling DefaultApi.templategenerate"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling DefaultApi.templategenerate"
      end
      # verify the required parameter 'singlefile' is set
      if @api_client.config.client_side_validation && singlefile.nil?
        fail ArgumentError, "Missing the required parameter 'singlefile' when calling DefaultApi.templategenerate"
      end
      # resource path
      local_var_path = '/templategenerate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'template'] = template
      query_params[:'source'] = source
      query_params[:'singlefile'] = singlefile
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?
      query_params[:'forsending'] = opts[:'forsending'] if !opts[:'forsending'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templategenerate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a template
    # Allows the user to view a template and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the template to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templateget(token, id, opts = {})
      templateget_with_http_info(token, id, opts)
      nil
    end

    # View details of a template
    # Allows the user to view a template and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the template to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templateget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templateget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templateget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.templateget"
      end
      # resource path
      local_var_path = '/templateget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templateget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View generated templates
    # Allows the user to view templates which have been generated as badges or certificates.
    # @param token [String] The authentication token.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templategetgenerated(token, jobid, opts = {})
      templategetgenerated_with_http_info(token, jobid, opts)
      nil
    end

    # View generated templates
    # Allows the user to view templates which have been generated as badges or certificates.
    # @param token [String] The authentication token.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templategetgenerated_with_http_info(token, jobid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templategetgenerated ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templategetgenerated"
      end
      # verify the required parameter 'jobid' is set
      if @api_client.config.client_side_validation && jobid.nil?
        fail ArgumentError, "Missing the required parameter 'jobid' when calling DefaultApi.templategetgenerated"
      end
      # resource path
      local_var_path = '/templategetgenerated'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'jobid'] = jobid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templategetgenerated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of defined templates
    # Allows the user to view the full list of created templates.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
    # @return [nil]
    def templatelist(token, from, count, kind, opts = {})
      templatelist_with_http_info(token, from, count, kind, opts)
      nil
    end

    # View a list of defined templates
    # Allows the user to view the full list of created templates.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatelist_with_http_info(token, from, count, kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templatelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.templatelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.templatelist"
      end
      # verify the required parameter 'kind' is set
      if @api_client.config.client_side_validation && kind.nil?
        fail ArgumentError, "Missing the required parameter 'kind' when calling DefaultApi.templatelist"
      end
      # resource path
      local_var_path = '/templatelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'kind'] = kind
      query_params[:'designedonly'] = opts[:'designedonly'] if !opts[:'designedonly'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of templates' data sources
    # Allows the user to see tokens to be used in the template
    # @param token [String] The authentication token.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templatelistsources(token, kind, opts = {})
      templatelistsources_with_http_info(token, kind, opts)
      nil
    end

    # View a list of templates&#39; data sources
    # Allows the user to see tokens to be used in the template
    # @param token [String] The authentication token.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatelistsources_with_http_info(token, kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatelistsources ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templatelistsources"
      end
      # verify the required parameter 'kind' is set
      if @api_client.config.client_side_validation && kind.nil?
        fail ArgumentError, "Missing the required parameter 'kind' when calling DefaultApi.templatelistsources"
      end
      # resource path
      local_var_path = '/templatelistsources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'kind'] = kind

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatelistsources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a template
    # Allows the user to create or edit a template.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def templatesave(opts = {})
      templatesave_with_http_info(opts)
      nil
    end

    # Create or edit a template
    # Allows the user to create or edit a template.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatesave ...'
      end
      # resource path
      local_var_path = '/templatesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save the layout of a template
    # Allows the user to edit a template's layout.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def templatesavelayout(opts = {})
      templatesavelayout_with_http_info(opts)
      nil
    end

    # Save the layout of a template
    # Allows the user to edit a template&#39;s layout.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatesavelayout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatesavelayout ...'
      end
      # resource path
      local_var_path = '/templatesavelayout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatesavelayout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a term
    # Allows the user to delete a term from the existing list.
    # @param token [String] The authentication token.
    # @param id [String] The id of the term to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def termdelete(token, id, opts = {})
      termdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a term
    # Allows the user to delete a term from the existing list.
    # @param token [String] The authentication token.
    # @param id [String] The id of the term to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def termdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.termdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.termdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.termdelete"
      end
      # resource path
      local_var_path = '/termdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#termdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a term
    # Allows the user to view a term and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the term to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def termget(token, id, opts = {})
      termget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a term
    # Allows the user to view a term and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the term to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def termget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.termget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.termget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.termget"
      end
      # resource path
      local_var_path = '/termget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#termget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of all terms
    # Allows the user to view the full list of existing term.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [Boolean] :notpast Specifies whether the terms in the past should be returned or not.
    # @return [nil]
    def termlist(token, opts = {})
      termlist_with_http_info(token, opts)
      nil
    end

    # Search and view details of all terms
    # Allows the user to view the full list of existing term.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [Boolean] :notpast Specifies whether the terms in the past should be returned or not.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def termlist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.termlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.termlist"
      end
      # resource path
      local_var_path = '/termlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'notpast'] = opts[:'notpast'] if !opts[:'notpast'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#termlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create and edit terms
    # Allows the user to create and edit terms.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def termsave(opts = {})
      termsave_with_http_info(opts)
      nil
    end

    # Create and edit terms
    # Allows the user to create and edit terms.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def termsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.termsave ...'
      end
      # resource path
      local_var_path = '/termsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#termsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the remaining text credits for the account
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def textcreditremaining(token, opts = {})
      textcreditremaining_with_http_info(token, opts)
      nil
    end

    # Gets the remaining text credits for the account
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def textcreditremaining_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.textcreditremaining ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.textcreditremaining"
      end
      # resource path
      local_var_path = '/textcreditremaining'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#textcreditremaining\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generates a dynamic image from text
    # @param token [String] The authentication token.
    # @param text [String] The text to convert to an image, use double pipes (||) as a new line.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fontcolor The color of the text, in hex format, without the #.
    # @option opts [Integer] :fontsize The size of the text, in points.
    # @option opts [String] :direction Either vertical or horizontal, default horizontal.
    # @option opts [Integer] :width The image width in pixels (or height if the direction is vertical).
    # @return [nil]
    def texttoimage(token, text, opts = {})
      texttoimage_with_http_info(token, text, opts)
      nil
    end

    # Generates a dynamic image from text
    # @param token [String] The authentication token.
    # @param text [String] The text to convert to an image, use double pipes (||) as a new line.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fontcolor The color of the text, in hex format, without the #.
    # @option opts [Integer] :fontsize The size of the text, in points.
    # @option opts [String] :direction Either vertical or horizontal, default horizontal.
    # @option opts [Integer] :width The image width in pixels (or height if the direction is vertical).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def texttoimage_with_http_info(token, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.texttoimage ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.texttoimage"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling DefaultApi.texttoimage"
      end
      # resource path
      local_var_path = '/texttoimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'text'] = text
      query_params[:'fontcolor'] = opts[:'fontcolor'] if !opts[:'fontcolor'].nil?
      query_params[:'fontsize'] = opts[:'fontsize'] if !opts[:'fontsize'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#texttoimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the translations of the specified values
    # @param token [String] The authentication token.
    # @param universal [String] Pipe separated list of universal text to be translated.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def translationget(token, universal, opts = {})
      translationget_with_http_info(token, universal, opts)
      nil
    end

    # Gets the translations of the specified values
    # @param token [String] The authentication token.
    # @param universal [String] Pipe separated list of universal text to be translated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translationget_with_http_info(token, universal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.translationget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.translationget"
      end
      # verify the required parameter 'universal' is set
      if @api_client.config.client_side_validation && universal.nil?
        fail ArgumentError, "Missing the required parameter 'universal' when calling DefaultApi.translationget"
      end
      # resource path
      local_var_path = '/translationget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'universal'] = universal

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translationget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the file containing the translations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :account The id of the account whose translations file has to be retrieved.
    # @return [nil]
    def translationgetcachefile(opts = {})
      translationgetcachefile_with_http_info(opts)
      nil
    end

    # Get the file containing the translations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :account The id of the account whose translations file has to be retrieved.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translationgetcachefile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.translationgetcachefile ...'
      end
      # resource path
      local_var_path = '/translationgetcachefile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'account'] = opts[:'account'] if !opts[:'account'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translationgetcachefile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the available translations in the system
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Text to search/filter translations.
    # @option opts [Boolean] :nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
    # @option opts [Boolean] :appdefaultasuniversal If true then it uses the app default translation as the universal term.
    # @return [nil]
    def translationlist(token, opts = {})
      translationlist_with_http_info(token, opts)
      nil
    end

    # Lists all the available translations in the system
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Text to search/filter translations.
    # @option opts [Boolean] :nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
    # @option opts [Boolean] :appdefaultasuniversal If true then it uses the app default translation as the universal term.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translationlist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.translationlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.translationlist"
      end
      # resource path
      local_var_path = '/translationlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'nondefaultonly'] = opts[:'nondefaultonly'] if !opts[:'nondefaultonly'].nil?
      query_params[:'appdefaultasuniversal'] = opts[:'appdefaultasuniversal'] if !opts[:'appdefaultasuniversal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translationlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a translation
    # Allows the user to edit a translation for the entire account.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def translationsave(opts = {})
      translationsave_with_http_info(opts)
      nil
    end

    # Edit a translation
    # Allows the user to edit a translation for the entire account.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translationsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.translationsave ...'
      end
      # resource path
      local_var_path = '/translationsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translationsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change user's own password
    # Allows the user to change their own password.
    # @param token [String] The authentication token.
    # @param oldpass [String] The old password of the authenticated user.
    # @param newpass [String] The new password of the authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userchangepwd(token, oldpass, newpass, opts = {})
      userchangepwd_with_http_info(token, oldpass, newpass, opts)
      nil
    end

    # Change user&#39;s own password
    # Allows the user to change their own password.
    # @param token [String] The authentication token.
    # @param oldpass [String] The old password of the authenticated user.
    # @param newpass [String] The new password of the authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userchangepwd_with_http_info(token, oldpass, newpass, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userchangepwd ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userchangepwd"
      end
      # verify the required parameter 'oldpass' is set
      if @api_client.config.client_side_validation && oldpass.nil?
        fail ArgumentError, "Missing the required parameter 'oldpass' when calling DefaultApi.userchangepwd"
      end
      # verify the required parameter 'newpass' is set
      if @api_client.config.client_side_validation && newpass.nil?
        fail ArgumentError, "Missing the required parameter 'newpass' when calling DefaultApi.userchangepwd"
      end
      # resource path
      local_var_path = '/userchangepwd'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'oldpass'] = oldpass
      query_params[:'newpass'] = newpass

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userchangepwd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Changes the user password using a change password request id
    # @param changereq [String] The change password request ID sent by email to the user.
    # @param newpass [String] The new password of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userchangepwdbyreq(changereq, newpass, opts = {})
      userchangepwdbyreq_with_http_info(changereq, newpass, opts)
      nil
    end

    # Changes the user password using a change password request id
    # @param changereq [String] The change password request ID sent by email to the user.
    # @param newpass [String] The new password of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userchangepwdbyreq_with_http_info(changereq, newpass, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userchangepwdbyreq ...'
      end
      # verify the required parameter 'changereq' is set
      if @api_client.config.client_side_validation && changereq.nil?
        fail ArgumentError, "Missing the required parameter 'changereq' when calling DefaultApi.userchangepwdbyreq"
      end
      # verify the required parameter 'newpass' is set
      if @api_client.config.client_side_validation && newpass.nil?
        fail ArgumentError, "Missing the required parameter 'newpass' when calling DefaultApi.userchangepwdbyreq"
      end
      # resource path
      local_var_path = '/userchangepwdbyreq'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'changereq'] = changereq
      query_params[:'newpass'] = newpass

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userchangepwdbyreq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user
    # Allows the user to delete a user.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userdelete(token, id, opts = {})
      userdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a user
    # Allows the user to delete a user.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.userdelete"
      end
      # resource path
      local_var_path = '/userdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds similar users to prevent duplicates
    # Allows the user to be warned if a user they are creating has the same card number as another user.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currentid The id of the current user.
    # @option opts [String] :phonenumber A phone number to search for similar users.
    # @option opts [String] :cardnumber A card number to search for similar users.
    # @return [nil]
    def userfindsimilar(token, opts = {})
      userfindsimilar_with_http_info(token, opts)
      nil
    end

    # Finds similar users to prevent duplicates
    # Allows the user to be warned if a user they are creating has the same card number as another user.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currentid The id of the current user.
    # @option opts [String] :phonenumber A phone number to search for similar users.
    # @option opts [String] :cardnumber A card number to search for similar users.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userfindsimilar_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userfindsimilar ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userfindsimilar"
      end
      # resource path
      local_var_path = '/userfindsimilar'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'currentid'] = opts[:'currentid'] if !opts[:'currentid'].nil?
      query_params[:'phonenumber'] = opts[:'phonenumber'] if !opts[:'phonenumber'].nil?
      query_params[:'cardnumber'] = opts[:'cardnumber'] if !opts[:'cardnumber'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userfindsimilar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a user
    # Allows the user to search and view a user and their details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def userget(token, id, opts = {})
      userget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a user
    # Allows the user to search and view a user and their details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.userget"
      end
      # resource path
      local_var_path = '/userget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search user by card number
    # Allows the user to search for a user by their card number.
    # @param token [String] The authentication token.
    # @param card [String] The card number of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def usergetbycard(token, card, opts = {})
      usergetbycard_with_http_info(token, card, opts)
      nil
    end

    # Search user by card number
    # Allows the user to search for a user by their card number.
    # @param token [String] The authentication token.
    # @param card [String] The card number of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergetbycard_with_http_info(token, card, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergetbycard ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergetbycard"
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling DefaultApi.usergetbycard"
      end
      # resource path
      local_var_path = '/usergetbycard'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'card'] = card
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergetbycard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a user to a group
    # Allows the user to add a user to a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupaddmember(token, userid, groupid, opts = {})
      usergroupaddmember_with_http_info(token, userid, groupid, opts)
      nil
    end

    # Add a user to a group
    # Allows the user to add a user to a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupaddmember_with_http_info(token, userid, groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupaddmember ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupaddmember"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.usergroupaddmember"
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling DefaultApi.usergroupaddmember"
      end
      # resource path
      local_var_path = '/usergroupaddmember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupaddmember\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a group
    # Allows the user to delete a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param id [String] The id of the group to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupdelete(token, id, opts = {})
      usergroupdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a group
    # Allows the user to delete a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param id [String] The id of the group to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.usergroupdelete"
      end
      # resource path
      local_var_path = '/usergroupdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a user group
    # Allows the user to view a user group and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupget(token, id, opts = {})
      usergroupget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a user group
    # Allows the user to view a user group and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.usergroupget"
      end
      # resource path
      local_var_path = '/usergroupget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the members of a user group
    # Allows the user to view the list of users in a group that they have permission to view.
    # @param token [String] The authentication token.
    # @param groupid [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupgetmembers(token, groupid, opts = {})
      usergroupgetmembers_with_http_info(token, groupid, opts)
      nil
    end

    # View the members of a user group
    # Allows the user to view the list of users in a group that they have permission to view.
    # @param token [String] The authentication token.
    # @param groupid [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupgetmembers_with_http_info(token, groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupgetmembers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupgetmembers"
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling DefaultApi.usergroupgetmembers"
      end
      # resource path
      local_var_path = '/usergroupgetmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupgetmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the groups which a user is registered to
    # Allows the user to view the groups an individual user is registered to, based on group and user permissions.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to get his groups.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupgetuser(token, userid, opts = {})
      usergroupgetuser_with_http_info(token, userid, opts)
      nil
    end

    # View the groups which a user is registered to
    # Allows the user to view the groups an individual user is registered to, based on group and user permissions.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to get his groups.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupgetuser_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupgetuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupgetuser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.usergroupgetuser"
      end
      # resource path
      local_var_path = '/usergroupgetuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupgetuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of user groups
    # Allows the user to view the list of groups that they have permission to view.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [String] :type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.
    # @return [nil]
    def usergrouplist(token, opts = {})
      usergrouplist_with_http_info(token, opts)
      nil
    end

    # View a list of user groups
    # Allows the user to view the list of groups that they have permission to view.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [String] :type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergrouplist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergrouplist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergrouplist"
      end
      # resource path
      local_var_path = '/usergrouplist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergrouplist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh the dynamic group
    # Allows the user to refresh a dynamic group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param group [String] The ID of the group to refresh.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergrouprefresh(token, group, opts = {})
      usergrouprefresh_with_http_info(token, group, opts)
      nil
    end

    # Refresh the dynamic group
    # Allows the user to refresh a dynamic group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param group [String] The ID of the group to refresh.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergrouprefresh_with_http_info(token, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergrouprefresh ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergrouprefresh"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling DefaultApi.usergrouprefresh"
      end
      # resource path
      local_var_path = '/usergrouprefresh'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'group'] = group

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergrouprefresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a group
    # Allows the user to remove a user from a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupremovemember(token, userid, groupid, opts = {})
      usergroupremovemember_with_http_info(token, userid, groupid, opts)
      nil
    end

    # Remove a user from a group
    # Allows the user to remove a user from a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupremovemember_with_http_info(token, userid, groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupremovemember ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupremovemember"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.usergroupremovemember"
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling DefaultApi.usergroupremovemember"
      end
      # resource path
      local_var_path = '/usergroupremovemember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupremovemember\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a group
    # Allows the user to create a new group or edit a group that they have permission to edit.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usergroupsave(opts = {})
      usergroupsave_with_http_info(opts)
      nil
    end

    # Create or edit a group
    # Allows the user to create a new group or edit a group that they have permission to edit.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupsave ...'
      end
      # resource path
      local_var_path = '/usergroupsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of users
    # Allows the user to view the full list of users and is based on role permissions.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def userlist(token, from, count, opts = {})
      userlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of users
    # Allows the user to view the full list of users and is based on role permissions.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.userlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.userlist"
      end
      # resource path
      local_var_path = '/userlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'roleid'] = opts[:'roleid'] if !opts[:'roleid'].nil?
      query_params[:'onlywithoutcard'] = opts[:'onlywithoutcard'] if !opts[:'onlywithoutcard'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a photo for a specific user
    # Allows the user to upload a photo for a user.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.
    # @option opts [Boolean] :automatch Set this to true to find the specific user based on the file name. 
    # @return [nil]
    def userloadphoto(token, upload, opts = {})
      userloadphoto_with_http_info(token, upload, opts)
      nil
    end

    # Upload a photo for a specific user
    # Allows the user to upload a photo for a user.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.
    # @option opts [Boolean] :automatch Set this to true to find the specific user based on the file name. 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userloadphoto_with_http_info(token, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userloadphoto ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userloadphoto"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.userloadphoto"
      end
      # resource path
      local_var_path = '/userloadphoto'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?
      query_params[:'automatch'] = opts[:'automatch'] if !opts[:'automatch'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userloadphoto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move data between users
    # Allows administrators to move data between users.
    # @param token [String] The authentication token.
    # @param source [String] The id of the user that is the source of the data.
    # @param destination [String] The id of the user that is the destination of the data.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usermovedata(token, source, destination, opts = {})
      usermovedata_with_http_info(token, source, destination, opts)
      nil
    end

    # Move data between users
    # Allows administrators to move data between users.
    # @param token [String] The authentication token.
    # @param source [String] The id of the user that is the source of the data.
    # @param destination [String] The id of the user that is the destination of the data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usermovedata_with_http_info(token, source, destination, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usermovedata ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usermovedata"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling DefaultApi.usermovedata"
      end
      # verify the required parameter 'destination' is set
      if @api_client.config.client_side_validation && destination.nil?
        fail ArgumentError, "Missing the required parameter 'destination' when calling DefaultApi.usermovedata"
      end
      # resource path
      local_var_path = '/usermovedata'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'source'] = source
      query_params[:'destination'] = destination

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usermovedata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Requests a password change
    # @param domain [String] The domain of the account where the user exists.
    # @param email [String] The email of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userrequestpwdchange(domain, email, opts = {})
      userrequestpwdchange_with_http_info(domain, email, opts)
      nil
    end

    # Requests a password change
    # @param domain [String] The domain of the account where the user exists.
    # @param email [String] The email of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userrequestpwdchange_with_http_info(domain, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userrequestpwdchange ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DefaultApi.userrequestpwdchange"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling DefaultApi.userrequestpwdchange"
      end
      # resource path
      local_var_path = '/userrequestpwdchange'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain'] = domain
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userrequestpwdchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a user
    # Allows the user to create or edit a user.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usersave(opts = {})
      usersave_with_http_info(opts)
      nil
    end

    # Create or edit a user
    # Allows the user to create or edit a user.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersave ...'
      end
      # resource path
      local_var_path = '/usersave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send email to the specified user(s) to set/change their passwords
    # Allows the user to trigger an email to another user asking them to set or change their password.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usersavepwdchange(opts = {})
      usersavepwdchange_with_http_info(opts)
      nil
    end

    # Send email to the specified user(s) to set/change their passwords
    # Allows the user to trigger an email to another user asking them to set or change their password.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersavepwdchange_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersavepwdchange ...'
      end
      # resource path
      local_var_path = '/usersavepwdchange'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersavepwdchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists available user settings
    # @param token [String] The authentication token.
    # @param keys [String] Setting key to get. Can be multiple separated by commas.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user id whose settings have to be returned.
    # @return [nil]
    def usersettingsget(token, keys, opts = {})
      usersettingsget_with_http_info(token, keys, opts)
      nil
    end

    # Lists available user settings
    # @param token [String] The authentication token.
    # @param keys [String] Setting key to get. Can be multiple separated by commas.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user id whose settings have to be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersettingsget_with_http_info(token, keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersettingsget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usersettingsget"
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling DefaultApi.usersettingsget"
      end
      # resource path
      local_var_path = '/usersettingsget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'keys'] = keys
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersettingsget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get multiple user settings
    # @param token [String] The authentication token.
    # @param keys [String] Setting key to get. Can be multiple separated by commas.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user id whose settings have to be returned.
    # @return [nil]
    def usersettingsgetmultiple(token, keys, opts = {})
      usersettingsgetmultiple_with_http_info(token, keys, opts)
      nil
    end

    # Get multiple user settings
    # @param token [String] The authentication token.
    # @param keys [String] Setting key to get. Can be multiple separated by commas.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user id whose settings have to be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersettingsgetmultiple_with_http_info(token, keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersettingsgetmultiple ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usersettingsgetmultiple"
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling DefaultApi.usersettingsgetmultiple"
      end
      # resource path
      local_var_path = '/usersettingsgetmultiple'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'keys'] = keys
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersettingsgetmultiple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a user setting
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usersettingssave(opts = {})
      usersettingssave_with_http_info(opts)
      nil
    end

    # Saves a user setting
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersettingssave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersettingssave ...'
      end
      # resource path
      local_var_path = '/usersettingssave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersettingssave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save multiple user settings at once
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usersettingssavemultiple(opts = {})
      usersettingssavemultiple_with_http_info(opts)
      nil
    end

    # Save multiple user settings at once
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersettingssavemultiple_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersettingssavemultiple ...'
      end
      # resource path
      local_var_path = '/usersettingssavemultiple'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersettingssavemultiple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current version information
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def version(token, opts = {})
      version_with_http_info(token, opts)
      nil
    end

    # Get current version information
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def version_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.version ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.version"
      end
      # resource path
      local_var_path = '/version'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
