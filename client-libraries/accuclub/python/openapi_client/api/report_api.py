# coding: utf-8

"""
    AccuClub OpenAPI 3

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ReportApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def report_list(self, **kwargs):  # noqa: E501
        """View a list of available reports  # noqa: E501

        Allows the user to view the complete list of available, canned reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.report_list_with_http_info(**kwargs)  # noqa: E501

    def report_list_with_http_info(self, **kwargs):  # noqa: E501
        """View a list of available reports  # noqa: E501

        Allows the user to view the complete list of available, canned reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/report/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report_permissionsbyuser(self, **kwargs):  # noqa: E501
        """Permissions by user report  # noqa: E501

        Lists all the users in the system including their corresponding permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_permissionsbyuser(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str params: A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.report_permissionsbyuser_with_http_info(**kwargs)  # noqa: E501

    def report_permissionsbyuser_with_http_info(self, **kwargs):  # noqa: E501
        """Permissions by user report  # noqa: E501

        Lists all the users in the system including their corresponding permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_permissionsbyuser_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str params: A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'params'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_permissionsbyuser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'params' in local_var_params and local_var_params['params'] is not None:  # noqa: E501
            query_params.append(('params', local_var_params['params']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/report/permissionsbyuser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report_prepare(self, reportname, **kwargs):  # noqa: E501
        """Queries and loads the specified report, in background.  # noqa: E501

        Allows the user to run reports, in background, with the exception of attendance analytics reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_prepare(reportname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str reportname: The name of the report to execute (required)
        :param str params: A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
        :param str repformat: The format of the resulting report. Json, pdf, csv, ...
        :param str fillgroupid: If specified, the result is used to fill the group with the given ID
        :param str groupby: How to group the records. In the format 'col1+col2|col3+col4
        :param str refreshgroup: The ID of the group to check (and refresh) before processing the report.
        :param str filtertext: The user friendly text of the applied filters.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.report_prepare_with_http_info(reportname, **kwargs)  # noqa: E501

    def report_prepare_with_http_info(self, reportname, **kwargs):  # noqa: E501
        """Queries and loads the specified report, in background.  # noqa: E501

        Allows the user to run reports, in background, with the exception of attendance analytics reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_prepare_with_http_info(reportname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str reportname: The name of the report to execute (required)
        :param str params: A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
        :param str repformat: The format of the resulting report. Json, pdf, csv, ...
        :param str fillgroupid: If specified, the result is used to fill the group with the given ID
        :param str groupby: How to group the records. In the format 'col1+col2|col3+col4
        :param str refreshgroup: The ID of the group to check (and refresh) before processing the report.
        :param str filtertext: The user friendly text of the applied filters.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'reportname',
            'params',
            'repformat',
            'fillgroupid',
            'groupby',
            'refreshgroup',
            'filtertext'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_prepare" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'reportname' is set
        if self.api_client.client_side_validation and ('reportname' not in local_var_params or  # noqa: E501
                                                        local_var_params['reportname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `reportname` when calling `report_prepare`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reportname' in local_var_params and local_var_params['reportname'] is not None:  # noqa: E501
            query_params.append(('reportname', local_var_params['reportname']))  # noqa: E501
        if 'params' in local_var_params and local_var_params['params'] is not None:  # noqa: E501
            query_params.append(('params', local_var_params['params']))  # noqa: E501
        if 'repformat' in local_var_params and local_var_params['repformat'] is not None:  # noqa: E501
            query_params.append(('repformat', local_var_params['repformat']))  # noqa: E501
        if 'fillgroupid' in local_var_params and local_var_params['fillgroupid'] is not None:  # noqa: E501
            query_params.append(('fillgroupid', local_var_params['fillgroupid']))  # noqa: E501
        if 'groupby' in local_var_params and local_var_params['groupby'] is not None:  # noqa: E501
            query_params.append(('groupby', local_var_params['groupby']))  # noqa: E501
        if 'refreshgroup' in local_var_params and local_var_params['refreshgroup'] is not None:  # noqa: E501
            query_params.append(('refreshgroup', local_var_params['refreshgroup']))  # noqa: E501
        if 'filtertext' in local_var_params and local_var_params['filtertext'] is not None:  # noqa: E501
            query_params.append(('filtertext', local_var_params['filtertext']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/report/prepare', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report_query(self, reportname, **kwargs):  # noqa: E501
        """Query and load a specified report  # noqa: E501

        Allows the user to run reports with the exception of attendance analytics reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_query(reportname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str reportname: The name of the report to execute (required)
        :param str params: A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.report_query_with_http_info(reportname, **kwargs)  # noqa: E501

    def report_query_with_http_info(self, reportname, **kwargs):  # noqa: E501
        """Query and load a specified report  # noqa: E501

        Allows the user to run reports with the exception of attendance analytics reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_query_with_http_info(reportname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str reportname: The name of the report to execute (required)
        :param str params: A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'reportname',
            'params'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_query" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'reportname' is set
        if self.api_client.client_side_validation and ('reportname' not in local_var_params or  # noqa: E501
                                                        local_var_params['reportname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `reportname` when calling `report_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reportname' in local_var_params and local_var_params['reportname'] is not None:  # noqa: E501
            query_params.append(('reportname', local_var_params['reportname']))  # noqa: E501
        if 'params' in local_var_params and local_var_params['params'] is not None:  # noqa: E501
            query_params.append(('params', local_var_params['params']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/report/query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
