<?php
/**
 * DefaultApiTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AccuCampus OpenAPI 3 Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for actionassignmentdelete
     *
     * Remove an action item from an action plan.
     *
     */
    public function testActionassignmentdelete()
    {
    }

    /**
     * Test case for actionassignmentget
     *
     * Search and view details of an action item assigned to a user.
     *
     */
    public function testActionassignmentget()
    {
    }

    /**
     * Test case for actionassignmentlist
     *
     * View a list of action items in a user's plan.
     *
     */
    public function testActionassignmentlist()
    {
    }

    /**
     * Test case for actionassignmentlisthistory
     *
     * View the history of an action item assigned to a user.
     *
     */
    public function testActionassignmentlisthistory()
    {
    }

    /**
     * Test case for actionassignmentlistmine
     *
     * List public action assignments assigned to the logged user.
     *
     */
    public function testActionassignmentlistmine()
    {
    }

    /**
     * Test case for actionassignmentlistpublichistory
     *
     * List public action assignment history.
     *
     */
    public function testActionassignmentlistpublichistory()
    {
    }

    /**
     * Test case for actionassignmentmarkcomplete
     *
     * Bulk complete action items.
     *
     */
    public function testActionassignmentmarkcomplete()
    {
    }

    /**
     * Test case for actionassignmentsave
     *
     * Add an action item to a user's action plan.
     *
     */
    public function testActionassignmentsave()
    {
    }

    /**
     * Test case for actionassignmentsavehistory
     *
     * Update an action item assigned to a user.
     *
     */
    public function testActionassignmentsavehistory()
    {
    }

    /**
     * Test case for actionitemdelete
     *
     * Delete an action item.
     *
     */
    public function testActionitemdelete()
    {
    }

    /**
     * Test case for actionitemget
     *
     * Search and view details of an action item.
     *
     */
    public function testActionitemget()
    {
    }

    /**
     * Test case for actionitemlist
     *
     * View a list of action items.
     *
     */
    public function testActionitemlist()
    {
    }

    /**
     * Test case for actionitemsave
     *
     * Create or edit an action item.
     *
     */
    public function testActionitemsave()
    {
    }

    /**
     * Test case for actionloglist
     *
     * View a list of users action logs.
     *
     */
    public function testActionloglist()
    {
    }

    /**
     * Test case for actionpackassign
     *
     * Assign an action item pack to a user.
     *
     */
    public function testActionpackassign()
    {
    }

    /**
     * Test case for actionpackdelete
     *
     * Delete an action item pack.
     *
     */
    public function testActionpackdelete()
    {
    }

    /**
     * Test case for actionpackget
     *
     * View details of an action item pack.
     *
     */
    public function testActionpackget()
    {
    }

    /**
     * Test case for actionpacklist
     *
     * View a list of action item packs.
     *
     */
    public function testActionpacklist()
    {
    }

    /**
     * Test case for actionpacksave
     *
     * Create or edit an action item pack.
     *
     */
    public function testActionpacksave()
    {
    }

    /**
     * Test case for actiontypedelete
     *
     * Delete an action item type.
     *
     */
    public function testActiontypedelete()
    {
    }

    /**
     * Test case for actiontypeget
     *
     * View details of an action item type.
     *
     */
    public function testActiontypeget()
    {
    }

    /**
     * Test case for actiontypelist
     *
     * View a list of action item types.
     *
     */
    public function testActiontypelist()
    {
    }

    /**
     * Test case for actiontypesave
     *
     * Create or edit an action item type.
     *
     */
    public function testActiontypesave()
    {
    }

    /**
     * Test case for adhocquerycheckexecution
     *
     * Check the status of an ad hoc query execution.
     *
     */
    public function testAdhocquerycheckexecution()
    {
    }

    /**
     * Test case for adhocquerydelete
     *
     * Delete an ad hoc query.
     *
     */
    public function testAdhocquerydelete()
    {
    }

    /**
     * Test case for adhocqueryexecute
     *
     * Execute an ad hoc query.
     *
     */
    public function testAdhocqueryexecute()
    {
    }

    /**
     * Test case for adhocqueryget
     *
     * View details of an ad hoc query.
     *
     */
    public function testAdhocqueryget()
    {
    }

    /**
     * Test case for adhocquerygetschema
     *
     * View the database schema for making ad hoc queries.
     *
     */
    public function testAdhocquerygetschema()
    {
    }

    /**
     * Test case for adhocquerylist
     *
     * View a list of saved ad hoc queries.
     *
     */
    public function testAdhocquerylist()
    {
    }

    /**
     * Test case for adhocquerylistexecutions
     *
     * View a list of ad hoc queries executions.
     *
     */
    public function testAdhocquerylistexecutions()
    {
    }

    /**
     * Test case for adhocquerysave
     *
     * Create or edit an ad hoc query.
     *
     */
    public function testAdhocquerysave()
    {
    }

    /**
     * Test case for adhocquerystopexecution
     *
     * Stops the execution of an ad hoc query.
     *
     */
    public function testAdhocquerystopexecution()
    {
    }

    /**
     * Test case for adhocreportsreqaccess
     *
     * Request access to the ad-hoc reports.
     *
     */
    public function testAdhocreportsreqaccess()
    {
    }

    /**
     * Test case for advancedstationcheckunknownuser
     *
     * Check whether the user is known by the system..
     *
     */
    public function testAdvancedstationcheckunknownuser()
    {
    }

    /**
     * Test case for advancedstationcheckuserrole
     *
     * Check whether the user is a staff member, an attendee or both..
     *
     */
    public function testAdvancedstationcheckuserrole()
    {
    }

    /**
     * Test case for advancedstationcreateuser
     *
     * Creates a user via a sign-in station..
     *
     */
    public function testAdvancedstationcreateuser()
    {
    }

    /**
     * Test case for advancedstationgetevents
     *
     * Gets the courses available for a specific location and a specific student..
     *
     */
    public function testAdvancedstationgetevents()
    {
    }

    /**
     * Test case for advancedstationgetinfo
     *
     * Gets the info to display in the sign-in station by it's ID..
     *
     */
    public function testAdvancedstationgetinfo()
    {
    }

    /**
     * Test case for advancedstationgetlocations
     *
     * Gets the locations available in a sign-in station..
     *
     */
    public function testAdvancedstationgetlocations()
    {
    }

    /**
     * Test case for advancedstationgetlogstaff
     *
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log..
     *
     */
    public function testAdvancedstationgetlogstaff()
    {
    }

    /**
     * Test case for advancedstationgetroles
     *
     * Gets the user roles of the user trying to sign-in..
     *
     */
    public function testAdvancedstationgetroles()
    {
    }

    /**
     * Test case for advancedstationgetservices
     *
     * Gets the services available for a specific location..
     *
     */
    public function testAdvancedstationgetservices()
    {
    }

    /**
     * Test case for advancedstationgetstaff
     *
     * Gets the staff/tutors available for a specific location, course and service..
     *
     */
    public function testAdvancedstationgetstaff()
    {
    }

    /**
     * Test case for advancedstationissignedin
     *
     * Gets whether a user is signed-in or not..
     *
     */
    public function testAdvancedstationissignedin()
    {
    }

    /**
     * Test case for advroleaddmissing
     *
     * Adds the missing permissions to a role. Requires access to advrole.save.
     *
     */
    public function testAdvroleaddmissing()
    {
    }

    /**
     * Test case for advrolecheckperm
     *
     * Checks the permissions are assigned for the given roles.
     *
     */
    public function testAdvrolecheckperm()
    {
    }

    /**
     * Test case for advroledelete
     *
     * Delete a role.
     *
     */
    public function testAdvroledelete()
    {
    }

    /**
     * Test case for advroledeletemapping
     *
     * Delete a role mapping.
     *
     */
    public function testAdvroledeletemapping()
    {
    }

    /**
     * Test case for advroleget
     *
     * View details of a role.
     *
     */
    public function testAdvroleget()
    {
    }

    /**
     * Test case for advrolelist
     *
     * Lists the roles for the current account.
     *
     */
    public function testAdvrolelist()
    {
    }

    /**
     * Test case for advrolelistmaps
     *
     * Lists the maps a roles is mapped to.
     *
     */
    public function testAdvrolelistmaps()
    {
    }

    /**
     * Test case for advrolelistrolesmapped
     *
     * Lists the roles mappings.
     *
     */
    public function testAdvrolelistrolesmapped()
    {
    }

    /**
     * Test case for advrolelisttemplates
     *
     * View a list of role templates.
     *
     */
    public function testAdvrolelisttemplates()
    {
    }

    /**
     * Test case for advrolesave
     *
     * Create or edit a role.
     *
     */
    public function testAdvrolesave()
    {
    }

    /**
     * Test case for advrolesavemapping
     *
     * Saves a role mapping.
     *
     */
    public function testAdvrolesavemapping()
    {
    }

    /**
     * Test case for advrolesuserlist
     *
     * List users. Alias to user.list, use that one instead..
     *
     */
    public function testAdvrolesuserlist()
    {
    }

    /**
     * Test case for advroleuserupgrade
     *
     * Upgrade a user to another role (requires permission to edit those roles).
     *
     */
    public function testAdvroleuserupgrade()
    {
    }

    /**
     * Test case for appointmentcancel
     *
     * Cancel an appointment.
     *
     */
    public function testAppointmentcancel()
    {
    }

    /**
     * Test case for appointmentcheckisvalid
     *
     * Check if an appointment is valid or not.
     *
     */
    public function testAppointmentcheckisvalid()
    {
    }

    /**
     * Test case for appointmenteditanyway
     *
     * Edit an appointment even if it breaks activated rules.
     *
     */
    public function testAppointmenteditanyway()
    {
    }

    /**
     * Test case for appointmenteditpresence
     *
     * Edit the no-show status of an appointment.
     *
     */
    public function testAppointmenteditpresence()
    {
    }

    /**
     * Test case for appointmentfindallstaffslots
     *
     * Finds all staff available slots filtered by service, date, etc.
     *
     */
    public function testAppointmentfindallstaffslots()
    {
    }

    /**
     * Test case for appointmentfindslots
     *
     * Finds available slots filtered by service, date, staff, etc.
     *
     */
    public function testAppointmentfindslots()
    {
    }

    /**
     * Test case for appointmentfindstaff
     *
     * Finds staff available by service, date, event, etc.
     *
     */
    public function testAppointmentfindstaff()
    {
    }

    /**
     * Test case for appointmentget
     *
     * Search and view details of an appointment.
     *
     */
    public function testAppointmentget()
    {
    }

    /**
     * Test case for appointmentgetcurrent
     *
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station..
     *
     */
    public function testAppointmentgetcurrent()
    {
    }

    /**
     * Test case for appointmentgetlocations
     *
     * Find locations where a service is available.
     *
     */
    public function testAppointmentgetlocations()
    {
    }

    /**
     * Test case for appointmentlist
     *
     * View a list of appointments.
     *
     */
    public function testAppointmentlist()
    {
    }

    /**
     * Test case for appointmentlistmine
     *
     * View all my upcoming appointments.
     *
     */
    public function testAppointmentlistmine()
    {
    }

    /**
     * Test case for appointmentlistupcoming
     *
     * Search and view details of all my upcoming appointments.
     *
     */
    public function testAppointmentlistupcoming()
    {
    }

    /**
     * Test case for appointmentrescheduleoutlook
     *
     * Reschedule an appointment from MS Outlook..
     *
     */
    public function testAppointmentrescheduleoutlook()
    {
    }

    /**
     * Test case for appointmentrestore
     *
     * Restore an appointment.
     *
     */
    public function testAppointmentrestore()
    {
    }

    /**
     * Test case for appointmentrestoreanyway
     *
     * Restore an appointment even if it breaks activated rules.
     *
     */
    public function testAppointmentrestoreanyway()
    {
    }

    /**
     * Test case for appointmentsave
     *
     * Schedule an appointment.
     *
     */
    public function testAppointmentsave()
    {
    }

    /**
     * Test case for appointmentsetasvalid
     *
     * Schedule an appointment even if it breaks activated rules.
     *
     */
    public function testAppointmentsetasvalid()
    {
    }

    /**
     * Test case for appointmentsuggestlocations
     *
     * View the locations with most appointments.
     *
     */
    public function testAppointmentsuggestlocations()
    {
    }

    /**
     * Test case for appointmentsuggestservices
     *
     * View the services with most appointments.
     *
     */
    public function testAppointmentsuggestservices()
    {
    }

    /**
     * Test case for appointmentvoid
     *
     * Void an appointment.
     *
     */
    public function testAppointmentvoid()
    {
    }

    /**
     * Test case for appsharegetphone
     *
     * Gets the phone number of the current user.
     *
     */
    public function testAppsharegetphone()
    {
    }

    /**
     * Test case for appsharesendtext
     *
     * Sends an SMS with the link to the app.
     *
     */
    public function testAppsharesendtext()
    {
    }

    /**
     * Test case for attendancelogcommentdelete
     *
     * Delete a comment on an attendance log.
     *
     */
    public function testAttendancelogcommentdelete()
    {
    }

    /**
     * Test case for attendancelogcommentget
     *
     * View a comment on an attendance log.
     *
     */
    public function testAttendancelogcommentget()
    {
    }

    /**
     * Test case for attendancelogcommentlist
     *
     * View all the comments on a specific attendance log.
     *
     */
    public function testAttendancelogcommentlist()
    {
    }

    /**
     * Test case for attendancelogcommentsave
     *
     * Save a comment on an attendance log.
     *
     */
    public function testAttendancelogcommentsave()
    {
    }

    /**
     * Test case for attendancelogdelete
     *
     * Delete an attendance log.
     *
     */
    public function testAttendancelogdelete()
    {
    }

    /**
     * Test case for attendancelogget
     *
     * Search and view details of an attendance log.
     *
     */
    public function testAttendancelogget()
    {
    }

    /**
     * Test case for attendanceloggetchangehistory
     *
     * Search and view details of an attendance log's swipe history.
     *
     */
    public function testAttendanceloggetchangehistory()
    {
    }

    /**
     * Test case for attendanceloglist
     *
     * View a list of attendance logs.
     *
     */
    public function testAttendanceloglist()
    {
    }

    /**
     * Test case for attendanceloglistmine
     *
     * Gets the attendance logs of the current user.
     *
     */
    public function testAttendanceloglistmine()
    {
    }

    /**
     * Test case for attendancelogliststaff
     *
     * Gets the attendance logs that the current user is involved in as staff.
     *
     */
    public function testAttendancelogliststaff()
    {
    }

    /**
     * Test case for attendancelogsave
     *
     * Create or edit an attendance log.
     *
     */
    public function testAttendancelogsave()
    {
    }

    /**
     * Test case for attendancelogsignout
     *
     * Sign out an attendance log.
     *
     */
    public function testAttendancelogsignout()
    {
    }

    /**
     * Test case for attendancelogwhosin
     *
     * View who's in a location.
     *
     */
    public function testAttendancelogwhosin()
    {
    }

    /**
     * Test case for attendancerestrictiondelete
     *
     * Delete an attendance restriction.
     *
     */
    public function testAttendancerestrictiondelete()
    {
    }

    /**
     * Test case for attendancerestrictionget
     *
     * View details of an attendance restriction.
     *
     */
    public function testAttendancerestrictionget()
    {
    }

    /**
     * Test case for attendancerestrictionlist
     *
     * View a list of attendance restrictions.
     *
     */
    public function testAttendancerestrictionlist()
    {
    }

    /**
     * Test case for attendancerestrictionsave
     *
     * Create or edit an attendance restriction.
     *
     */
    public function testAttendancerestrictionsave()
    {
    }

    /**
     * Test case for beacondelete
     *
     * Delete a beacon profile.
     *
     */
    public function testBeacondelete()
    {
    }

    /**
     * Test case for beacondisable
     *
     * Disable beacon support account wide.
     *
     */
    public function testBeacondisable()
    {
    }

    /**
     * Test case for beaconget
     *
     * View details of a beacon profile.
     *
     */
    public function testBeaconget()
    {
    }

    /**
     * Test case for beacongetlocations
     *
     * Get the sign-in stations assigned to specific beacons..
     *
     */
    public function testBeacongetlocations()
    {
    }

    /**
     * Test case for beacongetstationlocation
     *
     * Get the location settings in the specified sign-in station..
     *
     */
    public function testBeacongetstationlocation()
    {
    }

    /**
     * Test case for beacongetuuid
     *
     * View the identifier for the account's beacon region (for sign-in stations)..
     *
     */
    public function testBeacongetuuid()
    {
    }

    /**
     * Test case for beaconlist
     *
     * View a list of beacon profiles.
     *
     */
    public function testBeaconlist()
    {
    }

    /**
     * Test case for beaconlistprofiles
     *
     * View a list of beacon profiles with their characteristics.
     *
     */
    public function testBeaconlistprofiles()
    {
    }

    /**
     * Test case for beaconresetuuid
     *
     * Generate or reset the identifier for the account's beacon region..
     *
     */
    public function testBeaconresetuuid()
    {
    }

    /**
     * Test case for beaconsave
     *
     * Create or edit a beacon profile.
     *
     */
    public function testBeaconsave()
    {
    }

    /**
     * Test case for beaconscanlocations
     *
     * Check if there's location available to sign-in / out..
     *
     */
    public function testBeaconscanlocations()
    {
    }

    /**
     * Test case for beaconsetuuid
     *
     * Set the identifier for the account's beacon region (for sign-in stations)..
     *
     */
    public function testBeaconsetuuid()
    {
    }

    /**
     * Test case for beaconsilentregions
     *
     * View all the beacon regions defined for silent tracking.
     *
     */
    public function testBeaconsilentregions()
    {
    }

    /**
     * Test case for beaconsilentsignin
     *
     * Sign-in silently from the location specified by a beacon.
     *
     */
    public function testBeaconsilentsignin()
    {
    }

    /**
     * Test case for beaconsilentsignout
     *
     * Sign-out silently from the location specified by a beacon.
     *
     */
    public function testBeaconsilentsignout()
    {
    }

    /**
     * Test case for bgjobgetstatus
     *
     * Get background job status.
     *
     */
    public function testBgjobgetstatus()
    {
    }

    /**
     * Test case for captchagetchallenge
     *
     * Gets a captcha challenge that the user must complete to do certain requests..
     *
     */
    public function testCaptchagetchallenge()
    {
    }

    /**
     * Test case for captchagetimage
     *
     * Gets a captcha image that the user must complete to do certain requests..
     *
     */
    public function testCaptchagetimage()
    {
    }

    /**
     * Test case for changelog
     *
     * Get the application change log.
     *
     */
    public function testChangelog()
    {
    }

    /**
     * Test case for clientget
     *
     * Get client.
     *
     */
    public function testClientget()
    {
    }

    /**
     * Test case for clientlist
     *
     * Gets the clients of the specified conference.
     *
     */
    public function testClientlist()
    {
    }

    /**
     * Test case for clientsave
     *
     * Saves a client.
     *
     */
    public function testClientsave()
    {
    }

    /**
     * Test case for clientsendmessage
     *
     * Send a message to a client.
     *
     */
    public function testClientsendmessage()
    {
    }

    /**
     * Test case for communityinvite
     *
     * Sends an invitation to everyone to AccuCampus Communities.
     *
     */
    public function testCommunityinvite()
    {
    }

    /**
     * Test case for communityjoin
     *
     * Sends an invitation for myself to AccuCampus Communities.
     *
     */
    public function testCommunityjoin()
    {
    }

    /**
     * Test case for compasscategorydelete
     *
     * Delete a compass category.
     *
     */
    public function testCompasscategorydelete()
    {
    }

    /**
     * Test case for compasscategoryget
     *
     * View details of a compass category.
     *
     */
    public function testCompasscategoryget()
    {
    }

    /**
     * Test case for compasscategorylist
     *
     * View a list of compass categories.
     *
     */
    public function testCompasscategorylist()
    {
    }

    /**
     * Test case for compasscategorysave
     *
     * Create or edit a compass category.
     *
     */
    public function testCompasscategorysave()
    {
    }

    /**
     * Test case for compassservicelist
     *
     * View all the services added to the compass.
     *
     */
    public function testCompassservicelist()
    {
    }

    /**
     * Test case for compassservicelistlocations
     *
     * View all the locations where a service added to the compass is available.
     *
     */
    public function testCompassservicelistlocations()
    {
    }

    /**
     * Test case for computerlabdeletecomputer
     *
     * Delete a computer.
     *
     */
    public function testComputerlabdeletecomputer()
    {
    }

    /**
     * Test case for computerlabgetcomputer
     *
     * Search and view details of a computer.
     *
     */
    public function testComputerlabgetcomputer()
    {
    }

    /**
     * Test case for computerlabgetsettings
     *
     * Loads the settings for a computer lab.
     *
     */
    public function testComputerlabgetsettings()
    {
    }

    /**
     * Test case for computerlabissignedin
     *
     * Gets whether a user is signed-in or not..
     *
     */
    public function testComputerlabissignedin()
    {
    }

    /**
     * Test case for computerlablistcomputers
     *
     * View a list of computers.
     *
     */
    public function testComputerlablistcomputers()
    {
    }

    /**
     * Test case for computerlablistlabs
     *
     * View a list of the locations that use the Computer Lab add-on.
     *
     */
    public function testComputerlablistlabs()
    {
    }

    /**
     * Test case for computerlabliststations
     *
     * View a list of sign-in stations available for computer labs..
     *
     */
    public function testComputerlabliststations()
    {
    }

    /**
     * Test case for computerlabsavecomputer
     *
     * Create or edit a computer.
     *
     */
    public function testComputerlabsavecomputer()
    {
    }

    /**
     * Test case for computerlabsavesettings
     *
     * Saves the settings for a computer lab.
     *
     */
    public function testComputerlabsavesettings()
    {
    }

    /**
     * Test case for computerlabsaveswipe
     *
     * Save a new swipe from a computer in a computer lab..
     *
     */
    public function testComputerlabsaveswipe()
    {
    }

    /**
     * Test case for deadendrecordingdelete
     *
     * Deletes a dead-end record group.
     *
     */
    public function testDeadendrecordingdelete()
    {
    }

    /**
     * Test case for deadendrecordinglist
     *
     * Lists the recorded dead ends, if enabled.
     *
     */
    public function testDeadendrecordinglist()
    {
    }

    /**
     * Test case for deadendrecordinglistcomments
     *
     * Lists the comments for a specific dead end.
     *
     */
    public function testDeadendrecordinglistcomments()
    {
    }

    /**
     * Test case for deadendrecordingsave
     *
     * Saves a dead-end record.
     *
     */
    public function testDeadendrecordingsave()
    {
    }

    /**
     * Test case for departmentdelete
     *
     * Delete a college department.
     *
     */
    public function testDepartmentdelete()
    {
    }

    /**
     * Test case for departmentget
     *
     * Search and view details of a college department.
     *
     */
    public function testDepartmentget()
    {
    }

    /**
     * Test case for departmentlist
     *
     * View a list of college departments.
     *
     */
    public function testDepartmentlist()
    {
    }

    /**
     * Test case for departmentsave
     *
     * Create or edit a college department.
     *
     */
    public function testDepartmentsave()
    {
    }

    /**
     * Test case for doc
     *
     * Get the documentation.
     *
     */
    public function testDoc()
    {
    }

    /**
     * Test case for easyloginaddbgimage
     *
     * Adds background image for the login.
     *
     */
    public function testEasyloginaddbgimage()
    {
    }

    /**
     * Test case for eventchecksessions
     *
     * Edit an event's sessions according to their schedule.
     *
     */
    public function testEventchecksessions()
    {
    }

    /**
     * Test case for eventdelete
     *
     * Delete a course.
     *
     */
    public function testEventdelete()
    {
    }

    /**
     * Test case for eventget
     *
     * Search and view details of a course.
     *
     */
    public function testEventget()
    {
    }

    /**
     * Test case for eventgetsessionsbydate
     *
     * View a list of courses by date.
     *
     */
    public function testEventgetsessionsbydate()
    {
    }

    /**
     * Test case for eventlist
     *
     * View a list of courses.
     *
     */
    public function testEventlist()
    {
    }

    /**
     * Test case for eventlistregistered
     *
     * View a list of courses I am registered to.
     *
     */
    public function testEventlistregistered()
    {
    }

    /**
     * Test case for eventregaddme
     *
     * Register current user to a course.
     *
     */
    public function testEventregaddme()
    {
    }

    /**
     * Test case for eventregaddmetoall
     *
     * Register current user to all courses.
     *
     */
    public function testEventregaddmetoall()
    {
    }

    /**
     * Test case for eventregaddmetogroup
     *
     * Register current user to a course group.
     *
     */
    public function testEventregaddmetogroup()
    {
    }

    /**
     * Test case for eventregadduser
     *
     * Register a user to a course for attendance.
     *
     */
    public function testEventregadduser()
    {
    }

    /**
     * Test case for eventregaddusertoall
     *
     * Register a user to assist with all courses.
     *
     */
    public function testEventregaddusertoall()
    {
    }

    /**
     * Test case for eventregaddusertogroup
     *
     * Register a user to an course group.
     *
     */
    public function testEventregaddusertogroup()
    {
    }

    /**
     * Test case for eventreggetevents
     *
     * View course registration by user.
     *
     */
    public function testEventreggetevents()
    {
    }

    /**
     * Test case for eventreggetgroups
     *
     * Lists the course group registrations of a user.
     *
     */
    public function testEventreggetgroups()
    {
    }

    /**
     * Test case for eventreggetmyevents
     *
     * View the event registrations of the current user.
     *
     */
    public function testEventreggetmyevents()
    {
    }

    /**
     * Test case for eventreggetmygroups
     *
     * View all current user registrations to course groups.
     *
     */
    public function testEventreggetmygroups()
    {
    }

    /**
     * Test case for eventreggetusers
     *
     * View course registration.
     *
     */
    public function testEventreggetusers()
    {
    }

    /**
     * Test case for eventreggetusersfromgroup
     *
     * Lists the registrations for a course group.
     *
     */
    public function testEventreggetusersfromgroup()
    {
    }

    /**
     * Test case for eventreggetuserstoall
     *
     * View the users that are registered to all courses.
     *
     */
    public function testEventreggetuserstoall()
    {
    }

    /**
     * Test case for eventregremoveme
     *
     * Unregister current user from a course.
     *
     */
    public function testEventregremoveme()
    {
    }

    /**
     * Test case for eventregremovemefromall
     *
     * Remove current user from the registration to all courses.
     *
     */
    public function testEventregremovemefromall()
    {
    }

    /**
     * Test case for eventregremovemefromgroup
     *
     * Remove current user from a course group.
     *
     */
    public function testEventregremovemefromgroup()
    {
    }

    /**
     * Test case for eventregremoveuser
     *
     * Remove a user from a course.
     *
     */
    public function testEventregremoveuser()
    {
    }

    /**
     * Test case for eventregremoveuserfromall
     *
     * Remove a user from the registration to all courses.
     *
     */
    public function testEventregremoveuserfromall()
    {
    }

    /**
     * Test case for eventregremoveuserfromgroup
     *
     * Remove a user from a course group.
     *
     */
    public function testEventregremoveuserfromgroup()
    {
    }

    /**
     * Test case for eventsave
     *
     * Create or edit a course.
     *
     */
    public function testEventsave()
    {
    }

    /**
     * Test case for eventsearchgroup
     *
     * Searches for the available event groups.
     *
     */
    public function testEventsearchgroup()
    {
    }

    /**
     * Test case for export
     *
     * Export AccuCampus data.
     *
     */
    public function testExport()
    {
    }

    /**
     * Test case for exportlisttypes
     *
     * Lists available export types.
     *
     */
    public function testExportlisttypes()
    {
    }

    /**
     * Test case for featurelist
     *
     * Lists the available features..
     *
     */
    public function testFeaturelist()
    {
    }

    /**
     * Test case for holidaylist
     *
     * View a list of entered holidays.
     *
     */
    public function testHolidaylist()
    {
    }

    /**
     * Test case for holidaysave
     *
     * Create or edit a list of holidays.
     *
     */
    public function testHolidaysave()
    {
    }

    /**
     * Test case for holidaysuggest
     *
     * View the holiday suggestions in the given term.
     *
     */
    public function testHolidaysuggest()
    {
    }

    /**
     * Test case for import
     *
     * Import data into AccuCampus.
     *
     */
    public function testImport()
    {
    }

    /**
     * Test case for importlisttypes
     *
     * Lists available import types.
     *
     */
    public function testImportlisttypes()
    {
    }

    /**
     * Test case for interactiondelete
     *
     * Delete an interaction.
     *
     */
    public function testInteractiondelete()
    {
    }

    /**
     * Test case for interactionfeed
     *
     * Get the interactions feed.
     *
     */
    public function testInteractionfeed()
    {
    }

    /**
     * Test case for interactionget
     *
     * View an interaction.
     *
     */
    public function testInteractionget()
    {
    }

    /**
     * Test case for interactionlistprivatesummary
     *
     * Get current user's latest private interactions.
     *
     */
    public function testInteractionlistprivatesummary()
    {
    }

    /**
     * Test case for interactionsave
     *
     * Save an interaction.
     *
     */
    public function testInteractionsave()
    {
    }

    /**
     * Test case for licenseacceptagreement
     *
     * Accept the license agreement.
     *
     */
    public function testLicenseacceptagreement()
    {
    }

    /**
     * Test case for licensegetagreementstatus
     *
     * Check if license agreement has been accepted.
     *
     */
    public function testLicensegetagreementstatus()
    {
    }

    /**
     * Test case for licensegetcurrent
     *
     * Gets the current license information.
     *
     */
    public function testLicensegetcurrent()
    {
    }

    /**
     * Test case for licenserenew
     *
     * Contact Engineerica in order to renew the AccuCampus subscription.
     *
     */
    public function testLicenserenew()
    {
    }

    /**
     * Test case for likedelete
     *
     * Delete a like.
     *
     */
    public function testLikedelete()
    {
    }

    /**
     * Test case for likelist
     *
     * View all the likes associated to a target.
     *
     */
    public function testLikelist()
    {
    }

    /**
     * Test case for likesave
     *
     * Save a like.
     *
     */
    public function testLikesave()
    {
    }

    /**
     * Test case for listtimezones
     *
     * Lists the available timezones.
     *
     */
    public function testListtimezones()
    {
    }

    /**
     * Test case for locationdelete
     *
     * Delete a location.
     *
     */
    public function testLocationdelete()
    {
    }

    /**
     * Test case for locationget
     *
     * Search and view details of a location.
     *
     */
    public function testLocationget()
    {
    }

    /**
     * Test case for locationlist
     *
     * View a list of locations.
     *
     */
    public function testLocationlist()
    {
    }

    /**
     * Test case for locationsave
     *
     * Create or edit a location.
     *
     */
    public function testLocationsave()
    {
    }

    /**
     * Test case for login
     *
     * Login.
     *
     */
    public function testLogin()
    {
    }

    /**
     * Test case for logout
     *
     * Logout.
     *
     */
    public function testLogout()
    {
    }

    /**
     * Test case for mediacheckin
     *
     * Check in media item.
     *
     */
    public function testMediacheckin()
    {
    }

    /**
     * Test case for mediacheckout
     *
     * Check out media item.
     *
     */
    public function testMediacheckout()
    {
    }

    /**
     * Test case for mediacheckoutlist
     *
     * View a list of past media checkouts.
     *
     */
    public function testMediacheckoutlist()
    {
    }

    /**
     * Test case for mediadelete
     *
     * Delete a media item.
     *
     */
    public function testMediadelete()
    {
    }

    /**
     * Test case for mediadeletecheckoutlog
     *
     * Delete a media checkout log.
     *
     */
    public function testMediadeletecheckoutlog()
    {
    }

    /**
     * Test case for mediaget
     *
     * Search and view details of a media item.
     *
     */
    public function testMediaget()
    {
    }

    /**
     * Test case for mediagetbycode
     *
     * Search media item by unique code.
     *
     */
    public function testMediagetbycode()
    {
    }

    /**
     * Test case for mediagetcheckout
     *
     * View details of a media item checkout information.
     *
     */
    public function testMediagetcheckout()
    {
    }

    /**
     * Test case for mediagetcheckoutlog
     *
     * View details of a media checkout log.
     *
     */
    public function testMediagetcheckoutlog()
    {
    }

    /**
     * Test case for medialist
     *
     * View a list of media items.
     *
     */
    public function testMedialist()
    {
    }

    /**
     * Test case for mediasave
     *
     * Create or edit a media item.
     *
     */
    public function testMediasave()
    {
    }

    /**
     * Test case for mediatypedelete
     *
     * Delete a media type.
     *
     */
    public function testMediatypedelete()
    {
    }

    /**
     * Test case for mediatypeget
     *
     * Search and view details of a media type.
     *
     */
    public function testMediatypeget()
    {
    }

    /**
     * Test case for mediatypelist
     *
     * View a list of media types.
     *
     */
    public function testMediatypelist()
    {
    }

    /**
     * Test case for mediatypesave
     *
     * Create or edit a media type.
     *
     */
    public function testMediatypesave()
    {
    }

    /**
     * Test case for memorizedreportdelete
     *
     * Delete memorized report.
     *
     */
    public function testMemorizedreportdelete()
    {
    }

    /**
     * Test case for memorizedreportget
     *
     * View details of a memorized report.
     *
     */
    public function testMemorizedreportget()
    {
    }

    /**
     * Test case for memorizedreportlist
     *
     * View a list of all his memorized reports.
     *
     */
    public function testMemorizedreportlist()
    {
    }

    /**
     * Test case for memorizedreportsave
     *
     * Create or edit a memorized report.
     *
     */
    public function testMemorizedreportsave()
    {
    }

    /**
     * Test case for menugetitems
     *
     * Gets the items on the menu.
     *
     */
    public function testMenugetitems()
    {
    }

    /**
     * Test case for myaccount
     *
     * Gets the logged in user account..
     *
     */
    public function testMyaccount()
    {
    }

    /**
     * Test case for myianatimezone
     *
     * Gets the current time zone's iana name.
     *
     */
    public function testMyianatimezone()
    {
    }

    /**
     * Test case for myprofile
     *
     * Gets the logged in user information..
     *
     */
    public function testMyprofile()
    {
    }

    /**
     * Test case for myrights
     *
     * Gets the list of actions the user can execute..
     *
     */
    public function testMyrights()
    {
    }

    /**
     * Test case for mysaveprofile
     *
     * Updates logged user's profile information.
     *
     */
    public function testMysaveprofile()
    {
    }

    /**
     * Test case for notificationdelete
     *
     * Delete a notification.
     *
     */
    public function testNotificationdelete()
    {
    }

    /**
     * Test case for notificationget
     *
     * View a notification.
     *
     */
    public function testNotificationget()
    {
    }

    /**
     * Test case for notificationgetforstation
     *
     * Gets all public (in station) notifications for the specific user.
     *
     */
    public function testNotificationgetforstation()
    {
    }

    /**
     * Test case for notificationgetunreadcount
     *
     * Get the number of unread notifications.
     *
     */
    public function testNotificationgetunreadcount()
    {
    }

    /**
     * Test case for notificationlist
     *
     * View a list of all sent notifications.
     *
     */
    public function testNotificationlist()
    {
    }

    /**
     * Test case for notificationlistmine
     *
     * View all the notifications sent to the current user.
     *
     */
    public function testNotificationlistmine()
    {
    }

    /**
     * Test case for notificationmarkasread
     *
     * Mark a notification as read.
     *
     */
    public function testNotificationmarkasread()
    {
    }

    /**
     * Test case for notificationmarkasunread
     *
     * Mark a notification as unread.
     *
     */
    public function testNotificationmarkasunread()
    {
    }

    /**
     * Test case for notificationsend
     *
     * Send notifications on screen, via email or text to users.
     *
     */
    public function testNotificationsend()
    {
    }

    /**
     * Test case for notificationsendonscreen
     *
     * Send on-screen notifications.
     *
     */
    public function testNotificationsendonscreen()
    {
    }

    /**
     * Test case for notificationtopicdelete
     *
     * Delete a notification topic.
     *
     */
    public function testNotificationtopicdelete()
    {
    }

    /**
     * Test case for notificationtopicget
     *
     * Search and view details of a notification topic.
     *
     */
    public function testNotificationtopicget()
    {
    }

    /**
     * Test case for notificationtopiclist
     *
     * List all the notification topics.
     *
     */
    public function testNotificationtopiclist()
    {
    }

    /**
     * Test case for notificationtopiclistsubscribe
     *
     * List all the notification topics available to subscribe.
     *
     */
    public function testNotificationtopiclistsubscribe()
    {
    }

    /**
     * Test case for notificationtopicsave
     *
     * Create or edit a notification topic.
     *
     */
    public function testNotificationtopicsave()
    {
    }

    /**
     * Test case for pushderegister
     *
     * Deregisters the current device to receive push notifications.
     *
     */
    public function testPushderegister()
    {
    }

    /**
     * Test case for pushregister
     *
     * Registers the current device to receive push notifications.
     *
     */
    public function testPushregister()
    {
    }

    /**
     * Test case for qrlabelsprint
     *
     * Print and email QR labels.
     *
     */
    public function testQrlabelsprint()
    {
    }

    /**
     * Test case for qrloginget
     *
     * Gets an image of a QR token.
     *
     */
    public function testQrloginget()
    {
    }

    /**
     * Test case for qrloginlogin
     *
     * Login.
     *
     */
    public function testQrloginlogin()
    {
    }

    /**
     * Test case for quickpaneldeletewidget
     *
     * Deletes a widget from the Quick Panel.
     *
     */
    public function testQuickpaneldeletewidget()
    {
    }

    /**
     * Test case for quickpanelfetchwidget
     *
     * Fetches the information for a specific widget..
     *
     */
    public function testQuickpanelfetchwidget()
    {
    }

    /**
     * Test case for quickpanelgetwidget
     *
     * View details of a widget included in the Quick Panel.
     *
     */
    public function testQuickpanelgetwidget()
    {
    }

    /**
     * Test case for quickpanelinit
     *
     * Returns the initial information required to show the quick panels.
     *
     */
    public function testQuickpanelinit()
    {
    }

    /**
     * Test case for quickpanellistwidgets
     *
     * Lists all the widgets that are added in the Quick Panel.
     *
     */
    public function testQuickpanellistwidgets()
    {
    }

    /**
     * Test case for quickpanellistwidgettypes
     *
     * Lists all the widget types available in the system.
     *
     */
    public function testQuickpanellistwidgettypes()
    {
    }

    /**
     * Test case for quickpanelreorderwidgets
     *
     * Reorders the widgets and moves them to a specific column.
     *
     */
    public function testQuickpanelreorderwidgets()
    {
    }

    /**
     * Test case for quickpanelsavewidget
     *
     * Saves a widget for the Quick Panel.
     *
     */
    public function testQuickpanelsavewidget()
    {
    }

    /**
     * Test case for ratingflag
     *
     * Flags one rating for moderation.
     *
     */
    public function testRatingflag()
    {
    }

    /**
     * Test case for ratingflagcomment
     *
     * Flags one comment for moderation.
     *
     */
    public function testRatingflagcomment()
    {
    }

    /**
     * Test case for ratingget
     *
     * Get rating for one or more entities.
     *
     */
    public function testRatingget()
    {
    }

    /**
     * Test case for ratinggetall
     *
     * Gets the full ratings and comments for a specific entity.
     *
     */
    public function testRatinggetall()
    {
    }

    /**
     * Test case for ratinggetcomments
     *
     * Gets all the comments for a rating.
     *
     */
    public function testRatinggetcomments()
    {
    }

    /**
     * Test case for ratinggetpending
     *
     * Gets info of pre-saved and pre-approved ratings.
     *
     */
    public function testRatinggetpending()
    {
    }

    /**
     * Test case for ratinggetpendingmoderation
     *
     * Shows a list of the ratings and comments that are pending for moderation.
     *
     */
    public function testRatinggetpendingmoderation()
    {
    }

    /**
     * Test case for ratingmoderate
     *
     * Allows the user to accept or reject a comment.
     *
     */
    public function testRatingmoderate()
    {
    }

    /**
     * Test case for ratingpostcomment
     *
     * Posts a comments for in a rating.
     *
     */
    public function testRatingpostcomment()
    {
    }

    /**
     * Test case for ratingrate
     *
     * Rates one entity.
     *
     */
    public function testRatingrate()
    {
    }

    /**
     * Test case for ratingratepending
     *
     * Rates a pre-saved and pre-approved entity.
     *
     */
    public function testRatingratepending()
    {
    }

    /**
     * Test case for ratingvote
     *
     * Votes up or down a rating.
     *
     */
    public function testRatingvote()
    {
    }

    /**
     * Test case for reportattanalyticsprepare
     *
     * Query and load an attendance analytics report.
     *
     */
    public function testReportattanalyticsprepare()
    {
    }

    /**
     * Test case for reportlist
     *
     * View a list of available reports.
     *
     */
    public function testReportlist()
    {
    }

    /**
     * Test case for reportpermissionsbyuser
     *
     * Permissions by user report.
     *
     */
    public function testReportpermissionsbyuser()
    {
    }

    /**
     * Test case for reportprepare
     *
     * Queries and loads the specified report, in background..
     *
     */
    public function testReportprepare()
    {
    }

    /**
     * Test case for reportquery
     *
     * Query and load a specified report.
     *
     */
    public function testReportquery()
    {
    }

    /**
     * Test case for reportscheduledelete
     *
     * Delete a report schedule.
     *
     */
    public function testReportscheduledelete()
    {
    }

    /**
     * Test case for reportscheduleget
     *
     * Get a report schedule.
     *
     */
    public function testReportscheduleget()
    {
    }

    /**
     * Test case for reportschedulelist
     *
     * View a list of the scheduled reports.
     *
     */
    public function testReportschedulelist()
    {
    }

    /**
     * Test case for reportschedulesave
     *
     * Create or edit a report schedule.
     *
     */
    public function testReportschedulesave()
    {
    }

    /**
     * Test case for reporttagresults
     *
     * Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users..
     *
     */
    public function testReporttagresults()
    {
    }

    /**
     * Test case for riskmodelcheckanalysis
     *
     * Check the status of the analysis of a specified risk assessment model.
     *
     */
    public function testRiskmodelcheckanalysis()
    {
    }

    /**
     * Test case for riskmodeldelete
     *
     * Delete a risk assessment model.
     *
     */
    public function testRiskmodeldelete()
    {
    }

    /**
     * Test case for riskmodelget
     *
     * View details of a risk assessment model.
     *
     */
    public function testRiskmodelget()
    {
    }

    /**
     * Test case for riskmodelgetscore
     *
     * View the risk score for a specific user.
     *
     */
    public function testRiskmodelgetscore()
    {
    }

    /**
     * Test case for riskmodellist
     *
     * View a list of risk assessment models.
     *
     */
    public function testRiskmodellist()
    {
    }

    /**
     * Test case for riskmodelpredict
     *
     * Predict risk based on an assessment model.
     *
     */
    public function testRiskmodelpredict()
    {
    }

    /**
     * Test case for riskmodelprocess
     *
     * Process a risk assessment model.
     *
     */
    public function testRiskmodelprocess()
    {
    }

    /**
     * Test case for riskmodelrefresh
     *
     * Refresh the information used in a risk assessment model.
     *
     */
    public function testRiskmodelrefresh()
    {
    }

    /**
     * Test case for riskmodelsave
     *
     * Create or edit a risk assessment model.
     *
     */
    public function testRiskmodelsave()
    {
    }

    /**
     * Test case for riskmodeltermprecedences
     *
     * View all default term precedences.
     *
     */
    public function testRiskmodeltermprecedences()
    {
    }

    /**
     * Test case for rolelist
     *
     * Show a list of roles.
     *
     */
    public function testRolelist()
    {
    }

    /**
     * Test case for ruledelete
     *
     * Delete a rule.
     *
     */
    public function testRuledelete()
    {
    }

    /**
     * Test case for ruleget
     *
     * View details of a rule.
     *
     */
    public function testRuleget()
    {
    }

    /**
     * Test case for rulegeteventtype
     *
     * View details of a rule event type.
     *
     */
    public function testRulegeteventtype()
    {
    }

    /**
     * Test case for rulelist
     *
     * View a list of user rules.
     *
     */
    public function testRulelist()
    {
    }

    /**
     * Test case for rulelistactions
     *
     * View a list of rule actions available.
     *
     */
    public function testRulelistactions()
    {
    }

    /**
     * Test case for rulelisteventtypes
     *
     * View a list of rule event types.
     *
     */
    public function testRulelisteventtypes()
    {
    }

    /**
     * Test case for rulelisthttprequests
     *
     * View all the http requests sent as a result of a rule.
     *
     */
    public function testRulelisthttprequests()
    {
    }

    /**
     * Test case for rulesave
     *
     * Create or edit a rule.
     *
     */
    public function testRulesave()
    {
    }

    /**
     * Test case for scheduledelete
     *
     * Delete a schedule slot.
     *
     */
    public function testScheduledelete()
    {
    }

    /**
     * Test case for scheduledeletemine
     *
     * Delete a specific block from a user's own schedule.
     *
     */
    public function testScheduledeletemine()
    {
    }

    /**
     * Test case for scheduleenable
     *
     * Enable or disable the schedule for a specific person.
     *
     */
    public function testScheduleenable()
    {
    }

    /**
     * Test case for scheduleenablemine
     *
     * Enable or disable current user's schedule.
     *
     */
    public function testScheduleenablemine()
    {
    }

    /**
     * Test case for schedulefindallstaffslots
     *
     * Search available schedule slots by service, event, date.
     *
     */
    public function testSchedulefindallstaffslots()
    {
    }

    /**
     * Test case for schedulefindslots
     *
     * Search available schedule slots by service, event, date and/or staff.
     *
     */
    public function testSchedulefindslots()
    {
    }

    /**
     * Test case for schedulefindstaffavail
     *
     * Search available staff members slots by service, event, and/or date.
     *
     */
    public function testSchedulefindstaffavail()
    {
    }

    /**
     * Test case for scheduleget
     *
     * Search and view details of a specific schedule slot.
     *
     */
    public function testScheduleget()
    {
    }

    /**
     * Test case for schedulegetmine
     *
     * View details of a specific schedule block, for current user.
     *
     */
    public function testSchedulegetmine()
    {
    }

    /**
     * Test case for schedulegetstaff
     *
     * View a list of schedule information of a specified person.
     *
     */
    public function testSchedulegetstaff()
    {
    }

    /**
     * Test case for schedulegetstaffmine
     *
     * View current user's schedule information.
     *
     */
    public function testSchedulegetstaffmine()
    {
    }

    /**
     * Test case for scheduleintegrationdeleteitem
     *
     * Delete a schedule item looking up by a third party ID.
     *
     */
    public function testScheduleintegrationdeleteitem()
    {
    }

    /**
     * Test case for scheduleintegrationdeleteitemsbymasterid
     *
     * Delete multiple schedule items looking up by a third party master ID.
     *
     */
    public function testScheduleintegrationdeleteitemsbymasterid()
    {
    }

    /**
     * Test case for scheduleintegrationgetitem
     *
     * Get a schedule item looking up by a third party ID.
     *
     */
    public function testScheduleintegrationgetitem()
    {
    }

    /**
     * Test case for scheduleintegrationsaveitem
     *
     * Save a schedule item looking up by a third party ID.
     *
     */
    public function testScheduleintegrationsaveitem()
    {
    }

    /**
     * Test case for scheduleintegrationsetid
     *
     * Set a 3rd party ID on a specific schedule item.
     *
     */
    public function testScheduleintegrationsetid()
    {
    }

    /**
     * Test case for schedulemyofftimes
     *
     * View current user's schedule exceptions.
     *
     */
    public function testSchedulemyofftimes()
    {
    }

    /**
     * Test case for schedulesave
     *
     * Create or edit a schedule slot.
     *
     */
    public function testSchedulesave()
    {
    }

    /**
     * Test case for schedulesavemine
     *
     * Create or edit a block in current user's schedule.
     *
     */
    public function testSchedulesavemine()
    {
    }

    /**
     * Test case for search
     *
     * Search.
     *
     */
    public function testSearch()
    {
    }

    /**
     * Test case for searchgetentities
     *
     * Get the information of the entities that can be searched.
     *
     */
    public function testSearchgetentities()
    {
    }

    /**
     * Test case for securityassesspermission
     *
     * Returns the list of users for a specific permission.
     *
     */
    public function testSecurityassesspermission()
    {
    }

    /**
     * Test case for securityassessrole
     *
     * Returns the list of permissions for a specific role.
     *
     */
    public function testSecurityassessrole()
    {
    }

    /**
     * Test case for securityassessscope
     *
     * Returns the list of users for a specific user.
     *
     */
    public function testSecurityassessscope()
    {
    }

    /**
     * Test case for securityassessuser
     *
     * Returns the list of permissions for a specific user.
     *
     */
    public function testSecurityassessuser()
    {
    }

    /**
     * Test case for seminardelete
     *
     * Delete an event.
     *
     */
    public function testSeminardelete()
    {
    }

    /**
     * Test case for seminarget
     *
     * Search and view details of a event.
     *
     */
    public function testSeminarget()
    {
    }

    /**
     * Test case for seminarlist
     *
     * View a list of events.
     *
     */
    public function testSeminarlist()
    {
    }

    /**
     * Test case for seminarsave
     *
     * Create or edit a event.
     *
     */
    public function testSeminarsave()
    {
    }

    /**
     * Test case for serviceassignmentaddservice
     *
     * Enable a service in a specific location.
     *
     */
    public function testServiceassignmentaddservice()
    {
    }

    /**
     * Test case for serviceassignmentgetlocation
     *
     * View a list of services enabled for a specific location.
     *
     */
    public function testServiceassignmentgetlocation()
    {
    }

    /**
     * Test case for serviceassignmentgetservice
     *
     * View a list of locations where a service is available.
     *
     */
    public function testServiceassignmentgetservice()
    {
    }

    /**
     * Test case for serviceassignmentremoveservice
     *
     * Remove a service from a location.
     *
     */
    public function testServiceassignmentremoveservice()
    {
    }

    /**
     * Test case for servicedelete
     *
     * Delete a service.
     *
     */
    public function testServicedelete()
    {
    }

    /**
     * Test case for serviceget
     *
     * Search and view details of a service.
     *
     */
    public function testServiceget()
    {
    }

    /**
     * Test case for servicelist
     *
     * View a list of services.
     *
     */
    public function testServicelist()
    {
    }

    /**
     * Test case for servicesave
     *
     * Create or edit a service.
     *
     */
    public function testServicesave()
    {
    }

    /**
     * Test case for sessionattendancelogaddnote
     *
     * Add a note to a class attendance log.
     *
     */
    public function testSessionattendancelogaddnote()
    {
    }

    /**
     * Test case for sessionattendancelogget
     *
     * View details of a class attendance log.
     *
     */
    public function testSessionattendancelogget()
    {
    }

    /**
     * Test case for sessionattendanceloggetuser
     *
     * View the class session attendance information for a specific user.
     *
     */
    public function testSessionattendanceloggetuser()
    {
    }

    /**
     * Test case for sessionattendanceloglist
     *
     * View attendance logs of the specified session.
     *
     */
    public function testSessionattendanceloglist()
    {
    }

    /**
     * Test case for sessionattendanceloglistevent
     *
     * View the attendance information of an entire class.
     *
     */
    public function testSessionattendanceloglistevent()
    {
    }

    /**
     * Test case for sessionattendanceloglistsummary
     *
     * View the attendance summary for a class and/or a attendee.
     *
     */
    public function testSessionattendanceloglistsummary()
    {
    }

    /**
     * Test case for sessionattendancelogmylistsummary
     *
     * View my attendance summary.
     *
     */
    public function testSessionattendancelogmylistsummary()
    {
    }

    /**
     * Test case for sessionattendancelogsave
     *
     * Create or edit a class attendance log.
     *
     */
    public function testSessionattendancelogsave()
    {
    }

    /**
     * Test case for sessionattendancelogsaveswipe
     *
     * Create or edit a class attendance log swipe.
     *
     */
    public function testSessionattendancelogsaveswipe()
    {
    }

    /**
     * Test case for sessionbulkupdate
     *
     * Bulk update event sessions.
     *
     */
    public function testSessionbulkupdate()
    {
    }

    /**
     * Test case for sessionget
     *
     * View details of a session.
     *
     */
    public function testSessionget()
    {
    }

    /**
     * Test case for sessiongetschedule
     *
     * Gets the schedule for a location, instructor or attendees.
     *
     */
    public function testSessiongetschedule()
    {
    }

    /**
     * Test case for sessionlist
     *
     * Gets all future sessions of the current semester.
     *
     */
    public function testSessionlist()
    {
    }

    /**
     * Test case for sessionregaddcurrentuser
     *
     * Register current user to an event session.
     *
     */
    public function testSessionregaddcurrentuser()
    {
    }

    /**
     * Test case for sessionregadduser
     *
     * Register users for events.
     *
     */
    public function testSessionregadduser()
    {
    }

    /**
     * Test case for sessionreggetmysessions
     *
     * View all the sessions the logged user is registered to.
     *
     */
    public function testSessionreggetmysessions()
    {
    }

    /**
     * Test case for sessionreggetsessions
     *
     * Lists the registrations for a specific user.
     *
     */
    public function testSessionreggetsessions()
    {
    }

    /**
     * Test case for sessionreggetsettings
     *
     * Get the settings for session registration.
     *
     */
    public function testSessionreggetsettings()
    {
    }

    /**
     * Test case for sessionreggetusers
     *
     * Lists the registrations for a specific session.
     *
     */
    public function testSessionreggetusers()
    {
    }

    /**
     * Test case for sessionreglistsessions
     *
     * List the sessions available for a specific event.
     *
     */
    public function testSessionreglistsessions()
    {
    }

    /**
     * Test case for sessionreglistupcoming
     *
     * View a list of upcoming event sessions.
     *
     */
    public function testSessionreglistupcoming()
    {
    }

    /**
     * Test case for sessionreglistupcomingevent
     *
     * View a list of upcoming sessions of a particular event.
     *
     */
    public function testSessionreglistupcomingevent()
    {
    }

    /**
     * Test case for sessionregremovecurrentuser
     *
     * Unregister current user from an event session.
     *
     */
    public function testSessionregremovecurrentuser()
    {
    }

    /**
     * Test case for sessionregremoveuser
     *
     * Removes a user from an event session.
     *
     */
    public function testSessionregremoveuser()
    {
    }

    /**
     * Test case for sessionregsavesettings
     *
     * Save the settings for an event's session registration.
     *
     */
    public function testSessionregsavesettings()
    {
    }

    /**
     * Test case for sessionswipedelete
     *
     * Delete a session swipe.
     *
     */
    public function testSessionswipedelete()
    {
    }

    /**
     * Test case for sessionswipeget
     *
     * View details of a class attendance swipe.
     *
     */
    public function testSessionswipeget()
    {
    }

    /**
     * Test case for sessionswipelistunresolved
     *
     * View a list of unresolved swipes.
     *
     */
    public function testSessionswipelistunresolved()
    {
    }

    /**
     * Test case for sessionswiperesolve
     *
     * Resolve a swipe and create the corresponding attendance log.
     *
     */
    public function testSessionswiperesolve()
    {
    }

    /**
     * Test case for sessionswipesave
     *
     * Creates a new swipe, and if possible, creates the attendance log.
     *
     */
    public function testSessionswipesave()
    {
    }

    /**
     * Test case for sessionswipesaveanonym
     *
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log.
     *
     */
    public function testSessionswipesaveanonym()
    {
    }

    /**
     * Test case for settingaddlogo
     *
     * Add a logo to the account.
     *
     */
    public function testSettingaddlogo()
    {
    }

    /**
     * Test case for settingget
     *
     * Get settings for the account or the specified scope.
     *
     */
    public function testSettingget()
    {
    }

    /**
     * Test case for settingsave
     *
     * Save settings for the account or the specified scope.
     *
     */
    public function testSettingsave()
    {
    }

    /**
     * Test case for settingviewgeneral
     *
     * View general settings for the account.
     *
     */
    public function testSettingviewgeneral()
    {
    }

    /**
     * Test case for socialcontacts
     *
     * Gets the list of contacts in the network.
     *
     */
    public function testSocialcontacts()
    {
    }

    /**
     * Test case for socialgroupaddmembers
     *
     * Adds new members to a group (which the user must own already).
     *
     */
    public function testSocialgroupaddmembers()
    {
    }

    /**
     * Test case for socialgroupdelete
     *
     * Deletes a group.
     *
     */
    public function testSocialgroupdelete()
    {
    }

    /**
     * Test case for socialgrouplist
     *
     * View all the groups the current user is in.
     *
     */
    public function testSocialgrouplist()
    {
    }

    /**
     * Test case for socialgrouplistmembers
     *
     * Lists the members of a group.
     *
     */
    public function testSocialgrouplistmembers()
    {
    }

    /**
     * Test case for socialgroupremovemembers
     *
     * Removes members from a group (which the user must own already).
     *
     */
    public function testSocialgroupremovemembers()
    {
    }

    /**
     * Test case for socialgroupremovemyself
     *
     * Removes myself from an existent group.
     *
     */
    public function testSocialgroupremovemyself()
    {
    }

    /**
     * Test case for socialgroupsave
     *
     * Saves a new group.
     *
     */
    public function testSocialgroupsave()
    {
    }

    /**
     * Test case for ssogeneratekey
     *
     * Generate/reset single sign on access key..
     *
     */
    public function testSsogeneratekey()
    {
    }

    /**
     * Test case for ssogetsettings
     *
     * View single sign on settings..
     *
     */
    public function testSsogetsettings()
    {
    }

    /**
     * Test case for ssoissuetoken
     *
     * Issue single sign-on token.
     *
     */
    public function testSsoissuetoken()
    {
    }

    /**
     * Test case for ssosavesettings
     *
     * Edit single sign-on settings..
     *
     */
    public function testSsosavesettings()
    {
    }

    /**
     * Test case for staffavailaddmetoallservices
     *
     * Associate current user to all services.
     *
     */
    public function testStaffavailaddmetoallservices()
    {
    }

    /**
     * Test case for staffavailaddmetoservice
     *
     * Associate current user to a service.
     *
     */
    public function testStaffavailaddmetoservice()
    {
    }

    /**
     * Test case for staffavailaddusertoallservices
     *
     * Associate a staff member to all services.
     *
     */
    public function testStaffavailaddusertoallservices()
    {
    }

    /**
     * Test case for staffavailaddusertoservice
     *
     * Associate a staff member to a service.
     *
     */
    public function testStaffavailaddusertoservice()
    {
    }

    /**
     * Test case for staffavailgetmyservices
     *
     * View the services the current user is available for.
     *
     */
    public function testStaffavailgetmyservices()
    {
    }

    /**
     * Test case for staffavailgetservices
     *
     * View a list of services that a staff member is available for.
     *
     */
    public function testStaffavailgetservices()
    {
    }

    /**
     * Test case for staffavailgetusersforservice
     *
     * View a list of staff members that are available for a specific service.
     *
     */
    public function testStaffavailgetusersforservice()
    {
    }

    /**
     * Test case for staffavaillisttypes
     *
     * View all the availability types.
     *
     */
    public function testStaffavaillisttypes()
    {
    }

    /**
     * Test case for staffavailremovemefromallservices
     *
     * Remove current user from all services.
     *
     */
    public function testStaffavailremovemefromallservices()
    {
    }

    /**
     * Test case for staffavailremovemefromservice
     *
     * Remove current user from a service.
     *
     */
    public function testStaffavailremovemefromservice()
    {
    }

    /**
     * Test case for staffavailremoveuserfromallservices
     *
     * Removes a staff member from the registration to all services.
     *
     */
    public function testStaffavailremoveuserfromallservices()
    {
    }

    /**
     * Test case for staffavailremoveuserfromservice
     *
     * Remove a staff member from a service.
     *
     */
    public function testStaffavailremoveuserfromservice()
    {
    }

    /**
     * Test case for staffavailsetavailability
     *
     * Make a staff member available for a specific availability type.
     *
     */
    public function testStaffavailsetavailability()
    {
    }

    /**
     * Test case for staffavailsetmyavailability
     *
     * Change current user's availability type.
     *
     */
    public function testStaffavailsetmyavailability()
    {
    }

    /**
     * Test case for stationdelete
     *
     * Delete a sign-in station.
     *
     */
    public function testStationdelete()
    {
    }

    /**
     * Test case for stationget
     *
     * View details of a sign-in station.
     *
     */
    public function testStationget()
    {
    }

    /**
     * Test case for stationgetcurrentterms
     *
     * Get all the current terms.
     *
     */
    public function testStationgetcurrentterms()
    {
    }

    /**
     * Test case for stationgetinfo
     *
     * Gets a the info to display in the sign-in station by it's ID..
     *
     */
    public function testStationgetinfo()
    {
    }

    /**
     * Test case for stationgetlicense
     *
     * Gets the current license information.
     *
     */
    public function testStationgetlicense()
    {
    }

    /**
     * Test case for stationgetlocationsettings
     *
     * View the sign-in station settings of a specified location.
     *
     */
    public function testStationgetlocationsettings()
    {
    }

    /**
     * Test case for stationlist
     *
     * View a list of sign-in stations.
     *
     */
    public function testStationlist()
    {
    }

    /**
     * Test case for stationsave
     *
     * Create or edit a sign-in station.
     *
     */
    public function testStationsave()
    {
    }

    /**
     * Test case for stationsavemine
     *
     * Create or edit a class attendance sign-in station for myself.
     *
     */
    public function testStationsavemine()
    {
    }

    /**
     * Test case for stationunlock
     *
     * Unlocks the sign-in station..
     *
     */
    public function testStationunlock()
    {
    }

    /**
     * Test case for swipedelete
     *
     * Delete a swipe.
     *
     */
    public function testSwipedelete()
    {
    }

    /**
     * Test case for swipeget
     *
     * Search and view details of a swipe.
     *
     */
    public function testSwipeget()
    {
    }

    /**
     * Test case for swipelist
     *
     * View a list of swipes.
     *
     */
    public function testSwipelist()
    {
    }

    /**
     * Test case for swipesave
     *
     * Create or edit a swipe, and if possible, save the related attendance log.
     *
     */
    public function testSwipesave()
    {
    }

    /**
     * Test case for swipesaveanonym
     *
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log.
     *
     */
    public function testSwipesaveanonym()
    {
    }

    /**
     * Test case for tagdelete
     *
     * Delete a tag.
     *
     */
    public function testTagdelete()
    {
    }

    /**
     * Test case for tagget
     *
     * View details of a specified tag.
     *
     */
    public function testTagget()
    {
    }

    /**
     * Test case for taglist
     *
     * View a list of tags.
     *
     */
    public function testTaglist()
    {
    }

    /**
     * Test case for taglistgroups
     *
     * View a list of entities that can be tagged.
     *
     */
    public function testTaglistgroups()
    {
    }

    /**
     * Test case for tagsave
     *
     * Create or edit a tag.
     *
     */
    public function testTagsave()
    {
    }

    /**
     * Test case for tagsearch
     *
     * Search for tags in the account.
     *
     */
    public function testTagsearch()
    {
    }

    /**
     * Test case for templateaddimage
     *
     * Add an image to a template.
     *
     */
    public function testTemplateaddimage()
    {
    }

    /**
     * Test case for templatedelete
     *
     * Delete a template.
     *
     */
    public function testTemplatedelete()
    {
    }

    /**
     * Test case for templateemail
     *
     * Send generated templates by email.
     *
     */
    public function testTemplateemail()
    {
    }

    /**
     * Test case for templategenerate
     *
     * Generate specified templates.
     *
     */
    public function testTemplategenerate()
    {
    }

    /**
     * Test case for templateget
     *
     * View details of a template.
     *
     */
    public function testTemplateget()
    {
    }

    /**
     * Test case for templategetgenerated
     *
     * View generated templates.
     *
     */
    public function testTemplategetgenerated()
    {
    }

    /**
     * Test case for templatelist
     *
     * View a list of defined templates.
     *
     */
    public function testTemplatelist()
    {
    }

    /**
     * Test case for templatelistsources
     *
     * View a list of templates' data sources.
     *
     */
    public function testTemplatelistsources()
    {
    }

    /**
     * Test case for templatesave
     *
     * Create or edit a template.
     *
     */
    public function testTemplatesave()
    {
    }

    /**
     * Test case for templatesavelayout
     *
     * Save the layout of a template.
     *
     */
    public function testTemplatesavelayout()
    {
    }

    /**
     * Test case for termdelete
     *
     * Delete a term.
     *
     */
    public function testTermdelete()
    {
    }

    /**
     * Test case for termget
     *
     * Search and view details of a term.
     *
     */
    public function testTermget()
    {
    }

    /**
     * Test case for termlist
     *
     * Search and view details of all terms.
     *
     */
    public function testTermlist()
    {
    }

    /**
     * Test case for termsave
     *
     * Create and edit terms.
     *
     */
    public function testTermsave()
    {
    }

    /**
     * Test case for textcreditremaining
     *
     * Gets the remaining text credits for the account.
     *
     */
    public function testTextcreditremaining()
    {
    }

    /**
     * Test case for texttoimage
     *
     * Generates a dynamic image from text.
     *
     */
    public function testTexttoimage()
    {
    }

    /**
     * Test case for translationget
     *
     * Gets the translations of the specified values.
     *
     */
    public function testTranslationget()
    {
    }

    /**
     * Test case for translationgetcachefile
     *
     * Get the file containing the translations.
     *
     */
    public function testTranslationgetcachefile()
    {
    }

    /**
     * Test case for translationlist
     *
     * Lists all the available translations in the system.
     *
     */
    public function testTranslationlist()
    {
    }

    /**
     * Test case for translationsave
     *
     * Edit a translation.
     *
     */
    public function testTranslationsave()
    {
    }

    /**
     * Test case for userchangepwd
     *
     * Change user's own password.
     *
     */
    public function testUserchangepwd()
    {
    }

    /**
     * Test case for userchangepwdbyreq
     *
     * Changes the user password using a change password request id.
     *
     */
    public function testUserchangepwdbyreq()
    {
    }

    /**
     * Test case for userdelete
     *
     * Delete a user.
     *
     */
    public function testUserdelete()
    {
    }

    /**
     * Test case for userfindsimilar
     *
     * Finds similar users to prevent duplicates.
     *
     */
    public function testUserfindsimilar()
    {
    }

    /**
     * Test case for userget
     *
     * Search and view details of a user.
     *
     */
    public function testUserget()
    {
    }

    /**
     * Test case for usergetbycard
     *
     * Search user by card number.
     *
     */
    public function testUsergetbycard()
    {
    }

    /**
     * Test case for usergroupaddmember
     *
     * Add a user to a group.
     *
     */
    public function testUsergroupaddmember()
    {
    }

    /**
     * Test case for usergroupdelete
     *
     * Delete a group.
     *
     */
    public function testUsergroupdelete()
    {
    }

    /**
     * Test case for usergroupget
     *
     * Search and view details of a user group.
     *
     */
    public function testUsergroupget()
    {
    }

    /**
     * Test case for usergroupgetmembers
     *
     * View the members of a user group.
     *
     */
    public function testUsergroupgetmembers()
    {
    }

    /**
     * Test case for usergroupgetuser
     *
     * View the groups which a user is registered to.
     *
     */
    public function testUsergroupgetuser()
    {
    }

    /**
     * Test case for usergrouplist
     *
     * View a list of user groups.
     *
     */
    public function testUsergrouplist()
    {
    }

    /**
     * Test case for usergrouprefresh
     *
     * Refresh the dynamic group.
     *
     */
    public function testUsergrouprefresh()
    {
    }

    /**
     * Test case for usergroupremovemember
     *
     * Remove a user from a group.
     *
     */
    public function testUsergroupremovemember()
    {
    }

    /**
     * Test case for usergroupsave
     *
     * Create or edit a group.
     *
     */
    public function testUsergroupsave()
    {
    }

    /**
     * Test case for usergrouptagmembers
     *
     * Assign tags to the members of a specified group.
     *
     */
    public function testUsergrouptagmembers()
    {
    }

    /**
     * Test case for usergroupuntagmembers
     *
     * Unassign tags from the members of a specified group.
     *
     */
    public function testUsergroupuntagmembers()
    {
    }

    /**
     * Test case for userlist
     *
     * View a list of users.
     *
     */
    public function testUserlist()
    {
    }

    /**
     * Test case for userloadphoto
     *
     * Upload a photo for a specific user.
     *
     */
    public function testUserloadphoto()
    {
    }

    /**
     * Test case for usermovedata
     *
     * Move data between users.
     *
     */
    public function testUsermovedata()
    {
    }

    /**
     * Test case for userprofiledelete
     *
     * Delete a user profile.
     *
     */
    public function testUserprofiledelete()
    {
    }

    /**
     * Test case for userprofileget
     *
     * View a specific user profile.
     *
     */
    public function testUserprofileget()
    {
    }

    /**
     * Test case for userprofilegetallview
     *
     * Shows the profile for a specific (or current) user, based on each profile questionnaire questions..
     *
     */
    public function testUserprofilegetallview()
    {
    }

    /**
     * Test case for userprofilelist
     *
     * View the list of user profiles.
     *
     */
    public function testUserprofilelist()
    {
    }

    /**
     * Test case for userprofilelistquestions
     *
     * Gets the list of all the available user questions.
     *
     */
    public function testUserprofilelistquestions()
    {
    }

    /**
     * Test case for userprofilepreparestats
     *
     * Gets the statistics of a user group.
     *
     */
    public function testUserprofilepreparestats()
    {
    }

    /**
     * Test case for userprofilesave
     *
     * Create or edit user profile questions.
     *
     */
    public function testUserprofilesave()
    {
    }

    /**
     * Test case for userprofilesaveanswers
     *
     * Saves the profile for a specific (or current) user. Additional security applies on a per profile basis..
     *
     */
    public function testUserprofilesaveanswers()
    {
    }

    /**
     * Test case for userrequestpwdchange
     *
     * Requests a password change.
     *
     */
    public function testUserrequestpwdchange()
    {
    }

    /**
     * Test case for usersave
     *
     * Create or edit a user.
     *
     */
    public function testUsersave()
    {
    }

    /**
     * Test case for usersavepwdchange
     *
     * Send email to the specified user(s) to set/change their passwords.
     *
     */
    public function testUsersavepwdchange()
    {
    }

    /**
     * Test case for usersettingsget
     *
     * Lists available user settings.
     *
     */
    public function testUsersettingsget()
    {
    }

    /**
     * Test case for usersettingsgetmultiple
     *
     * Get multiple user settings.
     *
     */
    public function testUsersettingsgetmultiple()
    {
    }

    /**
     * Test case for usersettingssave
     *
     * Saves a user setting.
     *
     */
    public function testUsersettingssave()
    {
    }

    /**
     * Test case for usersettingssavemultiple
     *
     * Save multiple user settings at once.
     *
     */
    public function testUsersettingssavemultiple()
    {
    }

    /**
     * Test case for version
     *
     * Get current version information.
     *
     */
    public function testVersion()
    {
    }

    /**
     * Test case for virtuallineaddmyself
     *
     * Add myself to a waiting line.
     *
     */
    public function testVirtuallineaddmyself()
    {
    }

    /**
     * Test case for virtuallinelist
     *
     * Lists waiting lines that have remote access enabled.
     *
     */
    public function testVirtuallinelist()
    {
    }

    /**
     * Test case for virtuallineremovemyself
     *
     * Remove myself from a waiting line.
     *
     */
    public function testVirtuallineremovemyself()
    {
    }

    /**
     * Test case for waitinglineadduser
     *
     * Put user in a waiting line.
     *
     */
    public function testWaitinglineadduser()
    {
    }

    /**
     * Test case for waitinglinedelete
     *
     * Delete a waiting line.
     *
     */
    public function testWaitinglinedelete()
    {
    }

    /**
     * Test case for waitinglineget
     *
     * View details of a waiting line.
     *
     */
    public function testWaitinglineget()
    {
    }

    /**
     * Test case for waitinglineisuserin
     *
     * Check whether a user is in a waiting line, signed-in or is not in the area.
     *
     */
    public function testWaitinglineisuserin()
    {
    }

    /**
     * Test case for waitinglinelist
     *
     * View a list of waiting lines.
     *
     */
    public function testWaitinglinelist()
    {
    }

    /**
     * Test case for waitinglineremoveuser
     *
     * Remove a user from a waiting line.
     *
     */
    public function testWaitinglineremoveuser()
    {
    }

    /**
     * Test case for waitinglinesave
     *
     * Create or edit a waiting line.
     *
     */
    public function testWaitinglinesave()
    {
    }

    /**
     * Test case for waitinglinesigninuser
     *
     * Sign a user in from a waiting line.
     *
     */
    public function testWaitinglinesigninuser()
    {
    }
}
